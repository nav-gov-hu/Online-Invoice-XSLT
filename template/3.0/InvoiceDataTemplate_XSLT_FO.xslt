<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2022 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altova-xfi="http://www.altova.com/xslt-extensions/xbrl" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:array="http://www.w3.org/2005/xpath-functions/array" xmlns:base="http://schemas.nav.gov.hu/OSA/3.0/base" xmlns:clitype="clitype" xmlns:common="http://schemas.nav.gov.hu/NTCA/1.0/common" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:n1="http://schemas.nav.gov.hu/OSA/3.0/data" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xff="http://www.xbrl.org/2010/function/formula" xmlns:xfi="http://www.xbrl.org/2008/function/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="#all">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;InvoiceDataTemplate&apos;" as="xs:string?"/>
	<xsl:param name="lang"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:decimal-format name="format1" grouping-separator="Â " decimal-separator=","/>
	<xsl:import-schema schema-location="altova://file_resource/NTCA_Github_invoiceData.XSD" use-when="system-property('xsl:is-schema-aware')='yes'" namespace="http://schemas.nav.gov.hu/OSA/3.0/data"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-0-even" margin-left="10mm" margin-right="10mm" page-height="297mm" page-width="210mm" margin-top="8mm" margin-bottom="8mm">
				<fo:region-body margin-top="27mm" margin-bottom="12mm" column-count="1" column-gap="12mm"/>
				<fo:region-before region-name="even-page-header" overflow="hidden" extent="27mm"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="12mm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd" margin-left="10mm" margin-right="10mm" page-height="297mm" page-width="210mm" margin-top="8mm" margin-bottom="8mm">
				<fo:region-body margin-top="27mm" margin-bottom="12mm" column-count="1" column-gap="12mm"/>
				<fo:region-before region-name="odd-page-header" overflow="hidden" extent="27mm"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="12mm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-0">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:variable name="altova:bDoFirstSectionBreak" as="xs:boolean" select="true()"/>
	<xsl:variable name="altova:sCssSwitch" as="xs:string" select="''"/>
	<xsl:variable name="altova:nodeCssClasses" select="()"/>
	<xsl:variable name="altova:design-xslt-tree-view">
		<altova:main-document url="{if ($SV_BaseOutputFileName) then concat($SV_BaseOutputFileName,'.fo') else ''}">
			<fo:root>
				<xsl:copy-of select="$fo:layout-master-set"/>
				<fo:declarations>
					<x:xmpmeta xmlns:x="adobe:ns:meta/">
						<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
							<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
								<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2022 (x64) (http://www.altova.com)</xmp:CreatorTool>
							</rdf:Description>
						</rdf:RDF>
					</x:xmpmeta>
				</fo:declarations>
				<fo:page-sequence master-reference="page-master-0" initial-page-number="auto" format="1" force-page-count="no-force">
					<fo:static-content flow-name="xsl-footnote-separator">
						<fo:block>
							<fo:leader leader-pattern="rule" leader-length="100%" rule-style="solid" rule-thickness="0.5pt"/>
						</fo:block>
					</fo:static-content>
					<fo:static-content flow-name="odd-page-header">
						<fo:block-container overflow="hidden" display-align="before">
							<fo:block font-family="Tahoma" font-size="8pt">
								<xsl:variable name="altova:table">
									<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
										<fo:table-column column-width="10%"/>
										<fo:table-column column-width="90%"/>
										<xsl:variable name="altova:CurrContextGrid_1" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<fo:table-body start-indent="0pt">
											<fo:table-row height="20mm">
												<fo:table-cell height="2cm" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:variable name="altova:sUrlOrData" select="&apos;../../img/NAV.png&apos;"/>
														<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
															<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																	<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:sequence select="(0, 0)"/>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
														</xsl:variable>
														<fo:external-graphic alignment-baseline="before-edge" content-height="20mm" scaling="non-uniform" content-width="12.5mm">
															<xsl:attribute name="src">
																<xsl:text>url(</xsl:text>
																<xsl:call-template name="altova:double-backslash">
																	<xsl:with-param name="text">
																		<xsl:value-of select="string(&apos;../../img/NAV.png&apos;)"/>
																	</xsl:with-param>
																	<xsl:with-param name="text-length">
																		<xsl:value-of select="string-length(string(&apos;../../img/NAV.png&apos;))"/>
																	</xsl:with-param>
																</xsl:call-template>
																<xsl:text>)</xsl:text>
															</xsl:attribute>
														</fo:external-graphic>
														<fo:inline>
															<xsl:text>&#x200B;</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" height="2cm" padding="0" display-align="center">
													<fo:block text-align="center">
														<xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
															<fo:block font-family="Tahoma" font-size="16pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																<xsl:call-template name="HeaderTemplate_L10N"/>
															</fo:block>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell number-columns-spanned="2" padding="2pt" display-align="center">
													<fo:block>
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="even-page-header">
						<fo:block-container overflow="hidden" display-align="before">
							<fo:block font-family="Tahoma" font-size="8pt">
								<xsl:variable name="altova:table">
									<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
										<fo:table-column column-width="10%"/>
										<fo:table-column column-width="90%"/>
										<xsl:variable name="altova:CurrContextGrid_1" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<fo:table-body start-indent="0pt">
											<fo:table-row height="20mm">
												<fo:table-cell height="2cm" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:variable name="altova:sUrlOrData" select="&apos;../../img/NAV.png&apos;"/>
														<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
															<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																	<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:sequence select="(0, 0)"/>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
														</xsl:variable>
														<fo:external-graphic alignment-baseline="before-edge" content-height="20mm" scaling="non-uniform" content-width="12.5mm">
															<xsl:attribute name="src">
																<xsl:text>url(</xsl:text>
																<xsl:call-template name="altova:double-backslash">
																	<xsl:with-param name="text">
																		<xsl:value-of select="string(&apos;../../img/NAV.png&apos;)"/>
																	</xsl:with-param>
																	<xsl:with-param name="text-length">
																		<xsl:value-of select="string-length(string(&apos;../../img/NAV.png&apos;))"/>
																	</xsl:with-param>
																</xsl:call-template>
																<xsl:text>)</xsl:text>
															</xsl:attribute>
														</fo:external-graphic>
														<fo:inline>
															<xsl:text>&#x200B;</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" height="2cm" padding="0" display-align="center">
													<fo:block text-align="center">
														<xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
															<fo:block font-family="Tahoma" font-size="16pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																<xsl:call-template name="HeaderTemplate_L10N"/>
															</fo:block>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell number-columns-spanned="2" padding="2pt" display-align="center">
													<fo:block>
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="odd-page-footer">
						<fo:block-container height="12mm" overflow="hidden" display-align="after">
							<fo:block font-family="Tahoma" font-size="8pt">
								<xsl:variable name="altova:table">
									<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
										<fo:table-column column-width="90%"/>
										<fo:table-column column-width="10%"/>
										<xsl:variable name="altova:CurrContextGrid_2" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<fo:table-body start-indent="0pt">
											<fo:table-row>
												<fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
													<fo:block>
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="center">
														<xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
															<fo:block font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																<xsl:call-template name="FooterTemplate_L10N"/>
															</fo:block>
															<fo:block font-family="Tahoma" font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																<xsl:call-template name="InvoiceNumberTemplate_L10N"/>
																<xsl:for-each select="$XML">
																	<xsl:for-each select="n1:InvoiceData">
																		<xsl:for-each select="n1:invoiceNumber">
																			<altova:inline-container-substitute font-weight="bold">
																				<xsl:apply-templates/>
																			</altova:inline-container-substitute>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</fo:block>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:block font-family="Tahoma" font-size="8pt" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
															<fo:page-number font-family="Tahoma" font-size="8pt" font-weight="bold"/>
															<fo:inline font-weight="bold">
																<xsl:text>/</xsl:text>
															</fo:inline>
															<fo:page-number-citation ref-id="SV_RefID_PageTotal" font-family="Tahoma" font-size="8pt" font-weight="bold"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="even-page-footer">
						<fo:block-container height="12mm" overflow="hidden" display-align="after">
							<fo:block font-family="Tahoma" font-size="8pt">
								<xsl:variable name="altova:table">
									<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
										<fo:table-column column-width="90%"/>
										<fo:table-column column-width="10%"/>
										<xsl:variable name="altova:CurrContextGrid_2" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<fo:table-body start-indent="0pt">
											<fo:table-row>
												<fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
													<fo:block>
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="center">
														<xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
															<fo:block font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																<xsl:call-template name="FooterTemplate_L10N"/>
															</fo:block>
															<fo:block font-family="Tahoma" font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																<xsl:call-template name="InvoiceNumberTemplate_L10N"/>
																<xsl:for-each select="$XML">
																	<xsl:for-each select="n1:InvoiceData">
																		<xsl:for-each select="n1:invoiceNumber">
																			<altova:inline-container-substitute font-weight="bold">
																				<xsl:apply-templates/>
																			</altova:inline-container-substitute>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</fo:block>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:block font-family="Tahoma" font-size="8pt" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
															<fo:page-number font-family="Tahoma" font-size="8pt" font-weight="bold"/>
															<fo:inline font-weight="bold">
																<xsl:text>/</xsl:text>
															</fo:inline>
															<fo:page-number-citation ref-id="SV_RefID_PageTotal" font-family="Tahoma" font-size="8pt" font-weight="bold"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:flow flow-name="xsl-region-body">
						<fo:block font-family="Tahoma" font-size="8pt">
							<xsl:choose>
								<xsl:when test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
									<xsl:for-each select="$XML">
										<xsl:for-each select="n1:InvoiceData">
											<fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
												<xsl:call-template name="InvoiceNumberTemplate_L10N"/>
												<xsl:for-each select="n1:invoiceNumber">
													<altova:inline-container-substitute font-weight="bold">
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</xsl:for-each>
											</fo:block>
											<fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
												<xsl:call-template name="InvoiceIssueDateTemplate_L10N"/>
												<xsl:for-each select="n1:invoiceIssueDate">
													<xsl:call-template name="GenericDateOffset_Outer"/>
												</xsl:for-each>
											</fo:block>
											<fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
												<xsl:call-template name="InvoiceClassificationTemplate_C5X"/>
											</fo:block>
											<xsl:choose>
												<xsl:when test="not(exists(n1:invoiceMain/n1:invoice))">
													<xsl:for-each select="n1:invoiceMain">
														<xsl:variable name="maxBatchIndex" select="max(n1:batchInvoice/n1:batchIndex)"/>
														<xsl:for-each-group group-by="n1:batchIndex" select="n1:batchInvoice">
															<xsl:sort select="n1:batchIndex" data-type="number" order="ascending"/>
															<xsl:for-each select="current-group()">
																<fo:block padding-top="0.5cm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																	<xsl:call-template name="BatchIndexTemplate_L10N"/>
																	<xsl:for-each select="n1:batchIndex">
																		<altova:inline-container-substitute font-weight="bold">
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</fo:block>
																<xsl:apply-templates select="n1:invoice"/>
																<xsl:if test="n1:batchIndex != $maxBatchIndex">
																	<altova:page-break/>
																</xsl:if>
															</xsl:for-each>
														</xsl:for-each-group>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="n1:invoiceMain">
														<xsl:apply-templates select="n1:invoice"/>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
										<altova:line-break/>
									</xsl:for-each>
								</xsl:when>
								<xsl:when test="/*/namespace::*[name()=&apos;&apos;] != &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos;">
									<fo:block color="red" font-size="14pt" letter-spacing="2pt" padding-top="2cm" text-align="justify" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
										<xsl:call-template name="NamespaceErrorTemplate_L10N"/>
									</fo:block>
								</xsl:when>
								<xsl:when test="$lang != (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
									<fo:block color="red" font-size="14pt" letter-spacing="2pt" padding-top="2cm" text-align="justify" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
										<xsl:call-template name="DisplayErrorTemplate_L10N"/>
									</fo:block>
								</xsl:when>
							</xsl:choose>
						</fo:block>
						<fo:block id="SV_RefID_PageTotal"/>
					</fo:flow>
				</fo:page-sequence>
			</fo:root>
		</altova:main-document>
	</xsl:variable>
	<xsl:template match="n1:invoice">
		<xsl:variable name="CurrencyCodeValue" select="n1:invoiceHead/n1:invoiceDetail/n1:currencyCode"/>
		<xsl:variable name="ProductFeeSummaryCount" select="count(n1:productFeeSummary)"/>
		<xsl:if test="exists(n1:invoiceReference)">
			<xsl:for-each select="n1:invoiceReference">
				<fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
					<xsl:call-template name="OriginalInvoiceNumberTemplate_L10N"/>
					<xsl:for-each select="n1:originalInvoiceNumber">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
				</fo:block>
				<fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
					<xsl:call-template name="ModificationIndexTemplate_L10N"/>
					<xsl:for-each select="n1:modificationIndex">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
				</fo:block>
			</xsl:for-each>
		</xsl:if>
		<xsl:for-each select="n1:invoiceHead">
			<fo:block padding-bottom="5mm" padding-top="5mm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
				<xsl:variable name="altova:table">
					<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
						<fo:table-column column-width="85.500mm"/>
						<fo:table-column column-width="19mm"/>
						<fo:table-column column-width="85.500mm"/>
						<xsl:variable name="altova:CurrContextGrid_3" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<fo:table-body start-indent="0pt">
							<fo:table-row font-size="10pt">
								<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block text-align="center">
										<xsl:call-template name="SellerTemplate_L10N"/>
									</fo:block>
								</fo:table-cell>
								<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block text-align="center"/>
								</fo:table-cell>
								<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block text-align="center">
										<xsl:call-template name="BuyerTemplate_L10N"/>
									</fo:block>
								</fo:table-cell>
							</fo:table-row>
							<fo:table-row>
								<fo:table-cell border-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="before">
									<fo:block>
										<xsl:for-each select="n1:supplierInfo">
											<altova:line-break/>
											<xsl:choose>
												<xsl:when test="not(exists(n1:groupMemberTaxNumber))">
													<xsl:call-template name="TaxNumberTemplate_L10N"/>
												</xsl:when>
												<xsl:when test="exists(n1:groupMemberTaxNumber)">
													<xsl:call-template name="TaxNumberGroupTemplate_L10N"/>
												</xsl:when>
											</xsl:choose>
											<xsl:for-each select="n1:supplierTaxNumber">
												<xsl:call-template name="BaseTaxNumberTemplate"/>
											</xsl:for-each>
											<xsl:if test="exists(n1:communityVatNumber)">
												<altova:line-break/>
												<xsl:call-template name="CommunityVatNumberTemplate_L10N"/>
												<xsl:for-each select="n1:communityVatNumber">
													<altova:inline-container-substitute font-weight="bold">
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</xsl:for-each>
											</xsl:if>
											<xsl:if test="exists(n1:groupMemberTaxNumber)">
												<altova:line-break/>
												<xsl:call-template name="GroupMemberTaxNumberTemplate_L10N"/>
												<xsl:for-each select="n1:groupMemberTaxNumber">
													<xsl:call-template name="BaseTaxNumberTemplate"/>
												</xsl:for-each>
											</xsl:if>
											<xsl:if test="exists(n1:exciseLicenceNum)">
												<altova:line-break/>
												<xsl:call-template name="ExciseLicensNumberTemplate_L10N"/>
												<xsl:for-each select="n1:exciseLicenceNum">
													<altova:inline-container-substitute font-weight="bold">
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</xsl:for-each>
											</xsl:if>
											<altova:line-break/>
											<altova:line-break/>
											<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
											<xsl:for-each select="n1:supplierName">
												<altova:inline-container-substitute font-weight="bold">
													<xsl:apply-templates/>
												</altova:inline-container-substitute>
											</xsl:for-each>
											<xsl:if test="../n1:invoiceDetail/n1:smallBusinessIndicator = true()">
												<fo:inline>
													<xsl:text>&#160;</xsl:text>
												</fo:inline>
												<xsl:call-template name="SmallBusinessIndicatorTemplate_L10N"/>
											</xsl:if>
											<xsl:if test="n1:individualExemption = true()">
												<fo:inline>
													<xsl:text>&#160;</xsl:text>
												</fo:inline>
												<xsl:call-template name="IndividualExemptionTemplate_L10N"/>
											</xsl:if>
											<altova:line-break/>
											<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
											<xsl:for-each select="n1:supplierAddress">
												<xsl:call-template name="BaseAddressTemplate"/>
											</xsl:for-each>
											<xsl:if test="exists(n1:supplierBankAccountNumber)">
												<altova:line-break/>
												<xsl:call-template name="BankAccountNumberTemplate_L10N"/>
												<xsl:for-each select="n1:supplierBankAccountNumber">
													<altova:inline-container-substitute font-weight="bold">
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</xsl:for-each>
											</xsl:if>
										</xsl:for-each>
										<altova:line-break/>
									</fo:block>
								</fo:table-cell>
								<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block/>
								</fo:table-cell>
								<fo:table-cell border-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="before">
									<fo:block>
										<xsl:for-each select="n1:customerInfo">
											<altova:line-break/>
											<xsl:choose>
												<xsl:when test="n1:customerVatStatus != &apos;PRIVATE_PERSON&apos; and exists(n1:customerVatData/n1:customerTaxNumber)">
													<xsl:choose>
														<xsl:when test="not(exists(n1:customerVatData/n1:customerTaxNumber/n1:groupMemberTaxNumber))">
															<xsl:call-template name="TaxNumberTemplate_L10N"/>
														</xsl:when>
														<xsl:when test="exists(n1:customerVatData/n1:customerTaxNumber/n1:groupMemberTaxNumber)">
															<xsl:call-template name="TaxNumberGroupTemplate_L10N"/>
														</xsl:when>
													</xsl:choose>
													<xsl:for-each select="n1:customerVatData">
														<xsl:for-each select="n1:customerTaxNumber">
															<xsl:call-template name="BaseTaxNumberTemplate"/>
															<xsl:if test="exists(n1:groupMemberTaxNumber)">
																<altova:line-break/>
																<xsl:call-template name="GroupMemberTaxNumberTemplate_L10N"/>
																<xsl:for-each select="n1:groupMemberTaxNumber">
																	<xsl:call-template name="BaseTaxNumberTemplate"/>
																</xsl:for-each>
															</xsl:if>
															<altova:line-break/>
														</xsl:for-each>
													</xsl:for-each>
													<altova:line-break/>
													<xsl:if test="exists(n1:customerName)">
														<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
														<xsl:for-each select="n1:customerName">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:if>
													<altova:line-break/>
													<xsl:if test="exists(n1:customerAddress)">
														<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
														<xsl:for-each select="n1:customerAddress">
															<xsl:call-template name="BaseAddressTemplate"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:when>
												<xsl:when test="n1:customerVatStatus != &apos;PRIVATE_PERSON&apos; and exists(n1:customerVatData/n1:communityVatNumber)">
													<xsl:call-template name="CommunityVatNumberTemplate_L10N"/>
													<xsl:for-each select="n1:customerVatData">
														<xsl:for-each select="n1:communityVatNumber">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:for-each>
													<altova:line-break/>
													<altova:line-break/>
													<xsl:if test="exists(n1:customerName)">
														<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
														<xsl:for-each select="n1:customerName">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:if>
													<altova:line-break/>
													<xsl:if test="exists(n1:customerAddress)">
														<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
														<xsl:for-each select="n1:customerAddress">
															<xsl:call-template name="BaseAddressTemplate"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:when>
												<xsl:when test="n1:customerVatStatus != &apos;PRIVATE_PERSON&apos; and exists(n1:customerVatData/n1:thirdStateTaxId)">
													<xsl:call-template name="ThirdStateTaxIdTemplate_L10N"/>
													<xsl:for-each select="n1:customerVatData">
														<xsl:for-each select="n1:thirdStateTaxId">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:for-each>
													<altova:line-break/>
													<altova:line-break/>
													<xsl:if test="exists(n1:customerName)">
														<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
														<xsl:for-each select="n1:customerName">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:if>
													<altova:line-break/>
													<xsl:if test="exists(n1:customerAddress)">
														<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
														<xsl:for-each select="n1:customerAddress">
															<xsl:call-template name="BaseAddressTemplate"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:when>
												<xsl:when test="n1:customerVatStatus = &apos;PRIVATE_PERSON&apos;">
													<xsl:call-template name="PrivatePersonTemplate_L10N"/>
													<altova:line-break/>
												</xsl:when>
											</xsl:choose>
											<xsl:if test="exists(n1:customerBankAccountNumber)">
												<altova:line-break/>
												<xsl:call-template name="BankAccountNumberTemplate_L10N"/>
												<xsl:for-each select="n1:customerBankAccountNumber">
													<altova:inline-container-substitute font-weight="bold">
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</xsl:for-each>
											</xsl:if>
										</xsl:for-each>
									</fo:block>
								</fo:table-cell>
							</fo:table-row>
							<xsl:choose>
								<xsl:when test="exists(n1:fiscalRepresentativeInfo)">
									<fo:table-row>
										<fo:table-cell border-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:for-each select="n1:fiscalRepresentativeInfo">
													<xsl:call-template name="FiscalRepresentativeNameTemplate_L10N"/>
													<xsl:for-each select="n1:fiscalRepresentativeName">
														<altova:inline-container-substitute font-weight="bold">
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
													<altova:line-break/>
													<xsl:call-template name="TaxNumberTemplate_L10N"/>
													<xsl:for-each select="n1:fiscalRepresentativeTaxNumber">
														<xsl:call-template name="BaseTaxNumberTemplate"/>
													</xsl:for-each>
													<altova:line-break/>
													<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
													<xsl:for-each select="n1:fiscalRepresentativeAddress">
														<xsl:call-template name="BaseAddressTemplate"/>
													</xsl:for-each>
													<xsl:if test="exists(n1:fiscalRepresentativeBankAccountNumber)">
														<xsl:call-template name="BankAccountNumberTemplate_L10N"/>
														<xsl:for-each select="n1:fiscalRepresentativeBankAccountNumber">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:if>
												</xsl:for-each>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
									</fo:table-row>
								</xsl:when>
								<xsl:otherwise/>
							</xsl:choose>
						</fo:table-body>
					</fo:table>
				</xsl:variable>
				<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
			</fo:block>
			<xsl:for-each select="n1:invoiceDetail">
				<fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
					<xsl:variable name="altova:table">
						<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
							<fo:table-column column-width="62.700mm"/>
							<fo:table-column column-width="62.700mm"/>
							<fo:table-column column-width="62.700mm"/>
							<xsl:variable name="altova:CurrContextGrid_4" select="."/>
							<xsl:variable name="altova:ColumnData"/>
							<fo:table-body start-indent="0pt">
								<fo:table-row>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="InvoiceCategoryTemplate"/>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="InvoiceAppearanceTemplate"/>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:if test="n1:selfBillingIndicator = true()">
												<xsl:call-template name="SelfBillingIncidatorTemplate_L10N"/>
											</xsl:if>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
								<fo:table-row>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="InvoiceDeliveryDateTemplate_L10N"/>
											<xsl:choose>
												<xsl:when test="n1:invoiceCategory != &apos;AGGREGATE&apos;">
													<xsl:for-each select="n1:invoiceDeliveryDate">
														<xsl:call-template name="GenericDateOffset_Inner"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="n1:invoiceCategory = &apos;AGGREGATE&apos;">
													<xsl:call-template name="AggregateInstructionsTemplate_L10N"/>
												</xsl:when>
											</xsl:choose>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="InvoiceAccountingDeliveryDateTemplate_L10N"/>
											<xsl:for-each select="n1:invoiceAccountingDeliveryDate">
												<xsl:call-template name="GenericDateOffset_Inner"/>
											</xsl:for-each>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:if test="n1:cashAccountingIndicator = true()">
												<xsl:call-template name="CashAccountingIndicatorTemplate_L10N"/>
											</xsl:if>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
								<xsl:choose>
									<xsl:when test="exists(n1:invoiceDeliveryPeriodStart) or exists(n1:invoiceDeliveryPeriodEnd) or n1:periodicalSettlement = true()">
										<fo:table-row>
											<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="InvoiceDeliveryPeriodStartTemplate_L10N"/>
													<xsl:for-each select="n1:invoiceDeliveryPeriodStart">
														<xsl:call-template name="GenericDateOffset_Inner"/>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="InvoiceDeliveryPeriodEndTemplate_L10N"/>
													<xsl:for-each select="n1:invoiceDeliveryPeriodEnd">
														<xsl:call-template name="GenericDateOffset_Inner"/>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:if test="n1:periodicalSettlement = true()">
														<xsl:call-template name="PeriodicalSettlementTemplate_L10N"/>
													</xsl:if>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<fo:table-row>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="PaymentMethodTemplate_C5X"/>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="PaymentDateTemplate_L10N"/>
											<xsl:for-each select="n1:paymentDate">
												<xsl:call-template name="GenericDateOffset_Inner"/>
											</xsl:for-each>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell number-rows-spanned="2" border-style="none" border="solid 1pt gray" padding="2pt" display-align="before">
										<fo:block>
											<xsl:if test="n1:utilitySettlementIndicator = true()">
												<xsl:call-template name="UtilitySettlementIndicatorTemplate_L10N"/>
											</xsl:if>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
								<fo:table-row>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="CurrencyCodeTemplate_L10N"/>
											<xsl:for-each select="n1:currencyCode">
												<altova:inline-container-substitute font-weight="bold">
													<xsl:apply-templates/>
												</altova:inline-container-substitute>
											</xsl:for-each>
										</fo:block>
									</fo:table-cell>
									<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="ExchangeRateTemplate_L10N"/>
											<xsl:choose>
												<xsl:when test="n1:invoiceCategory != &apos;AGGREGATE&apos;">
													<xsl:for-each select="n1:exchangeRate">
														<xsl:call-template name="GenericExchangeRateOffset"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="n1:invoiceCategory = &apos;AGGREGATE&apos;">
													<xsl:call-template name="AggregateInstructionsTemplate_L10N"/>
												</xsl:when>
											</xsl:choose>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
							</fo:table-body>
						</fo:table>
					</xsl:variable>
					<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
				</fo:block>
				<fo:block padding-top="5mm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:orderNumbers)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray" altova:hide-rows="body-empty" altova:hide-cols="body-empty">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_5" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:orderNumbers">
											<xsl:for-each select="n1:orderNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center" altova:is-body-cell="true">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoOrderNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center" altova:is-body-cell="true">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:variable name="altova:effective-table">
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/fo:table/(fo:table-header | fo:table-body | fo:table-footer)[ 1 ]/fo:table-row[ 1 ]/fo:table-cell return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*">
								<xsl:choose>
									<xsl:when test="$altova:table/fo:table/@altova:hide-cols = 'empty'">
										<xsl:sequence select="for $altova:pos in 1 to $altova:col-count return some $altova:cell in $altova:table/fo:table/(fo:table-header | fo:table-body | fo:table-footer)/fo:table-row/fo:table-cell[ altova:col-position(., $altova:TableIndexInfo) = $altova:pos ] satisfies not( altova:is-cell-empty( $altova:cell ) )"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="for $altova:pos in 1 to $altova:col-count return some $altova:cell in $altova:table/fo:table/fo:table-body/fo:table-row/fo:table-cell[ altova:col-position(., $altova:TableIndexInfo) = $altova:pos ] satisfies not( altova:is-cell-empty( $altova:cell ) )"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:apply-templates select="$altova:effective-table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:deliveryNotes)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_6" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:deliveryNotes">
											<xsl:for-each select="n1:deliveryNote">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoDeliveryNoteTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:shippingDates)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_7" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:shippingDates">
											<xsl:for-each select="n1:shippingDate">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoShippingDateTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:contractNumbers)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_8" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:contractNumbers">
											<xsl:for-each select="n1:contractNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoContractNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:supplierCompanyCodes)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_9" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:supplierCompanyCodes">
											<xsl:for-each select="n1:supplierCompanyCode">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoSupplierCompanyCodeTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:customerCompanyCodes)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_10" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:customerCompanyCodes">
											<xsl:for-each select="n1:customerCompanyCode">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoCustomerCompanyCodeTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:dealerCodes)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_11" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:dealerCodes">
											<xsl:for-each select="n1:dealerCode">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoDealerCodeTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:costCenters)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_12" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:costCenters">
											<xsl:for-each select="n1:costCenter">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoCostCenterTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:projectNumbers)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_13" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:projectNumbers">
											<xsl:for-each select="n1:projectNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoProjectNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:generalLedgerAccountNumbers)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_14" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:generalLedgerAccountNumbers">
											<xsl:for-each select="n1:generalLedgerAccountNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoGeneralLedgerAccountNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:glnNumbersSupplier)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_15" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:glnNumbersSupplier">
											<xsl:for-each select="n1:glnNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoGlnSupplierNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:glnNumbersCustomer)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_16" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:glnNumbersCustomer">
											<xsl:for-each select="n1:glnNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoGlnCustomerNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:materialNumbers)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_17" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:materialNumbers">
											<xsl:for-each select="n1:materialNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoMaterialNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:itemNumbers)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_18" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:itemNumbers">
											<xsl:for-each select="n1:itemNumber">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoItemNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:ekaerIds)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.300mm"/>
								<xsl:variable name="altova:CurrContextGrid_19" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:ekaerIds">
											<xsl:for-each select="n1:ekaerId">
												<fo:table-row>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:if test="position() &lt; 2">
																<xsl:call-template name="ConventionalInfoEkaerNumberTemplate_L10N"/>
															</xsl:if>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
														<fo:block>
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:if>
				</fo:block>
				<xsl:if test="exists(n1:additionalInvoiceData)">
					<fo:block padding-top="5mm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="62.700mm"/>
								<fo:table-column column-width="127.100mm"/>
								<xsl:variable name="altova:CurrContextGrid_20" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:additionalInvoiceData">
										<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
											<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:for-each select="n1:dataDescription">
														<altova:inline-container-substitute font-weight="bold">
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>:</xsl:text>
													</fo:inline>
													<altova:line-break/>
													<fo:inline>
														<xsl:text>(</xsl:text>
													</fo:inline>
													<xsl:for-each select="n1:dataName">
														<altova:inline-container-substitute>
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>)</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:for-each select="n1:dataValue">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</fo:block>
				</xsl:if>
			</xsl:for-each>
		</xsl:for-each>
		<xsl:if test="exists(n1:invoiceLines)">
			<fo:block padding-top="5mm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
				<xsl:for-each select="n1:invoiceLines">
					<xsl:if test="n1:mergedItemIndicator = true()">
						<fo:block color="red" text-align="left" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
							<xsl:call-template name="MergedItemTemplate_L10N"/>
						</fo:block>
					</xsl:if>
					<altova:line-break/>
					<xsl:variable name="altova:table">
						<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed" border="solid 1pt gray">
							<fo:table-column column-width="47.500mm"/>
							<fo:table-column column-width="47.500mm"/>
							<fo:table-column column-width="47.500mm"/>
							<fo:table-column column-width="47.500mm"/>
							<xsl:variable name="altova:CurrContextGrid_21" select="."/>
							<xsl:variable name="altova:ColumnData"/>
							<fo:table-body start-indent="0pt">
								<xsl:for-each select="n1:line">
									<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
										<xsl:variable name="sBackground-color">
											<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
												<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="$sBackground-color != ''">
											<xsl:attribute name="background-color">
												<xsl:value-of select="$sBackground-color"/>
											</xsl:attribute>
										</xsl:if>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-left-style="none" border-right-style="none" border-top-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:call-template name="LineNumberTemplate_L10N"/>
												<xsl:for-each select="n1:lineNumber">
													<altova:inline-container-substitute font-weight="bold">
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</xsl:for-each>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell number-columns-spanned="2" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-left-style="none" border-right-style="none" border-top-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:choose>
													<xsl:when test="n1:lineModificationReference/n1:lineOperation = &apos;CREATE&apos;">
														<xsl:call-template name="LineOperationCreateTemplate_L10N"/>
													</xsl:when>
													<xsl:when test="n1:lineModificationReference/n1:lineOperation = &apos;MODIFY&apos;">
														<xsl:call-template name="LineOperationModifyTemplate_L10N"/>
													</xsl:when>
												</xsl:choose>
												<xsl:for-each select="n1:lineModificationReference">
													<xsl:for-each select="n1:lineNumberReference">
														<altova:inline-container-substitute font-weight="bold">
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
												</xsl:for-each>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-left-style="none" border-right-style="none" border-top-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:referencesToOtherLines)">
													<xsl:call-template name="ReferenceToOtherLineTemplate_L10N"/>
													<xsl:for-each select="n1:referencesToOtherLines">
														<altova:inline-container-substitute font-weight="bold">
															<xsl:value-of select="string-join(n1:referenceToOtherLine/text(), &apos;, &apos;)"/>
														</altova:inline-container-substitute>
													</xsl:for-each>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
									<xsl:choose>
										<xsl:when test="n1:advanceData/n1:advanceIndicator = true()">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="AdvanceIndicatorTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
										<xsl:variable name="sBackground-color">
											<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
												<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="$sBackground-color != ''">
											<xsl:attribute name="background-color">
												<xsl:value-of select="$sBackground-color"/>
											</xsl:attribute>
										</xsl:if>
										<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:call-template name="LineDescriptionTemplate_L10N"/>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell number-columns-spanned="3" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:for-each select="n1:lineDescription">
													<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
												</xsl:for-each>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
									<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
										<xsl:variable name="sBackground-color">
											<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
												<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="$sBackground-color != ''">
											<xsl:attribute name="background-color">
												<xsl:value-of select="$sBackground-color"/>
											</xsl:attribute>
										</xsl:if>
										<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:quantity)">
													<xsl:call-template name="QuantityTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:quantity">
														<altova:inline-container-substitute font-weight="bold">
															<fo:inline>
																<xsl:value-of select="format-number(number(string(.)), '###Â ###Â ###Â ###', 'format1')"/>
															</fo:inline>
														</altova:inline-container-substitute>
													</xsl:for-each>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:unitOfMeasure) or exists(n1:unitOfMeasureOwn)">
													<xsl:call-template name="UnitOfMeasureTemplate_L10N"/>
													<altova:line-break/>
													<xsl:choose>
														<xsl:when test="not(exists(n1:unitOfMeasureOwn)) and exists(n1:unitOfMeasure)">
															<xsl:for-each select="n1:unitOfMeasure">
																<xsl:call-template name="UnitOfMeasureValueTemplate_L10N"/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="exists(n1:unitOfMeasureOwn)">
															<xsl:for-each select="n1:unitOfMeasureOwn">
																<altova:inline-container-substitute font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:aggregateInvoiceLineData/n1:lineDeliveryDate)">
													<xsl:call-template name="LineDeliveryDateTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:aggregateInvoiceLineData">
														<xsl:for-each select="n1:lineDeliveryDate">
															<xsl:call-template name="GenericDateOffset_Inner"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:if>
												<altova:line-break/>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:aggregateInvoiceLineData/n1:lineExchangeRate)">
													<xsl:call-template name="LineExchangeRateTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:aggregateInvoiceLineData">
														<xsl:for-each select="n1:lineExchangeRate">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
									<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
										<xsl:variable name="sBackground-color">
											<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
												<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="$sBackground-color != ''">
											<xsl:attribute name="background-color">
												<xsl:value-of select="$sBackground-color"/>
											</xsl:attribute>
										</xsl:if>
										<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:unitPrice)">
													<xsl:call-template name="UnitPriceTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:unitPrice">
														<xsl:call-template name="GenericQuantityTypeOffset"/>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<altova:inline-container-substitute font-weight="bold">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</altova:inline-container-substitute>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:lineAmountsNormal/n1:lineNetAmountData/n1:lineNetAmount)">
													<xsl:call-template name="NetAmountTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:lineAmountsNormal">
														<xsl:for-each select="n1:lineNetAmountData">
															<xsl:for-each select="n1:lineNetAmount">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<altova:inline-container-substitute font-weight="bold">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</altova:inline-container-substitute>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:lineAmountsNormal/n1:lineVatData/n1:lineVatAmount)">
													<xsl:call-template name="VatAmountTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:lineAmountsNormal">
														<xsl:for-each select="n1:lineVatData">
															<xsl:for-each select="n1:lineVatAmount">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<altova:inline-container-substitute font-weight="bold">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</altova:inline-container-substitute>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:choose>
													<xsl:when test="exists(n1:lineAmountsNormal/n1:lineGrossAmountData/n1:lineGrossAmountNormal)">
														<xsl:call-template name="GrossAmountTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:lineAmountsNormal">
															<xsl:for-each select="n1:lineGrossAmountData">
																<xsl:for-each select="n1:lineGrossAmountNormal">
																	<xsl:call-template name="GenericMonetaryTypeOffset"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<altova:inline-container-substitute font-weight="bold">
															<xsl:value-of select="$CurrencyCodeValue"/>
														</altova:inline-container-substitute>
													</xsl:when>
													<xsl:when test="exists(n1:lineAmountsSimplified/n1:lineGrossAmountSimplified)">
														<xsl:call-template name="GrossAmountTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:lineAmountsSimplified">
															<xsl:for-each select="n1:lineGrossAmountSimplified">
																<altova:inline-container-substitute font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160; </xsl:text>
														</fo:inline>
														<altova:inline-container-substitute font-weight="bold">
															<xsl:value-of select="$CurrencyCodeValue"/>
														</altova:inline-container-substitute>
													</xsl:when>
												</xsl:choose>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
									<xsl:choose>
										<xsl:when test="exists(n1:lineAmountsNormal)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:lineAmountsNormal">
															<xsl:for-each select="n1:lineVatRate">
																<xsl:call-template name="VatRateTypeTemplate_C5X"/>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:lineAmountsNormal/n1:lineVatRate/n1:vatExemption/n1:reason) or exists(n1:lineAmountsNormal/n1:lineVatRate/n1:vatOutOfScope/n1:reason) or n1:lineAmountsNormal/n1:lineVatRate/n1:vatDomesticReverseCharge = true() or exists(n1:lineAmountsNormal/n1:lineVatRate/n1:marginSchemeIndicator) or exists(n1:lineAmountsNormal/n1:lineVatRate/n1:vatAmountMismatch/n1:case) or n1:lineAmountsNormal/n1:lineVatRate/n1:noVatCharge = true()">
															<xsl:call-template name="VatDescriptionTemplate_L10N"/>
															<xsl:for-each select="n1:lineAmountsNormal">
																<xsl:for-each select="n1:lineVatRate">
																	<xsl:call-template name="VatReasonTemplate_C5X"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:lineAmountsSimplified)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:lineAmountsSimplified">
															<xsl:for-each select="n1:lineVatRate">
																<xsl:call-template name="VatRateTypeTemplate_C5X"/>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:vatExemption/n1:reason) or exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:vatOutOfScope/n1:reason) or n1:lineAmountsSimplified/n1:lineVatRate/n1:vatDomesticReverseCharge = true() or exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:marginSchemeIndicator) or exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:vatAmountMismatch/n1:case) or n1:lineAmountsSimplified/n1:lineVatRate/n1:noVatCharge = true()">
															<xsl:call-template name="VatDescriptionTemplate_L10N"/>
															<xsl:for-each select="n1:lineAmountsSimplified">
																<xsl:for-each select="n1:lineVatRate">
																	<xsl:call-template name="VatReasonTemplate_C5X"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
										<xsl:variable name="sBackground-color">
											<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
												<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="$sBackground-color != ''">
											<xsl:attribute name="background-color">
												<xsl:value-of select="$sBackground-color"/>
											</xsl:attribute>
										</xsl:if>
										<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:call-template name="UnitPriceHUFTemplate_L10N"/>
												<altova:line-break/>
												<xsl:for-each select="n1:unitPriceHUF">
													<xsl:call-template name="GenericQuantityTypeOffset"/>
												</xsl:for-each>
												<fo:inline font-weight="bold">
													<xsl:text> HUF</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:lineAmountsNormal/n1:lineNetAmountData/n1:lineNetAmountHUF)">
													<xsl:call-template name="LineNetAmountHUFTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:lineAmountsNormal">
														<xsl:for-each select="n1:lineNetAmountData">
															<xsl:for-each select="n1:lineNetAmountHUF">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<fo:inline font-weight="bold">
														<xsl:text>HUF</xsl:text>
													</fo:inline>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:lineAmountsNormal/n1:lineVatData/n1:lineVatAmountHUF)">
													<xsl:call-template name="LineVatAmountHUFTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:lineAmountsNormal">
														<xsl:for-each select="n1:lineVatData">
															<xsl:for-each select="n1:lineVatAmountHUF">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<fo:inline font-weight="bold">
														<xsl:text>HUF</xsl:text>
													</fo:inline>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:choose>
													<xsl:when test="exists(n1:lineAmountsNormal/n1:lineGrossAmountData/n1:lineGrossAmountNormalHUF)">
														<xsl:call-template name="LineGrossAmountHUFTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:lineAmountsNormal">
															<xsl:for-each select="n1:lineGrossAmountData">
																<xsl:for-each select="n1:lineGrossAmountNormalHUF">
																	<xsl:call-template name="GenericMonetaryTypeOffset"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<fo:inline font-weight="bold">
															<xsl:text>HUF</xsl:text>
														</fo:inline>
													</xsl:when>
													<xsl:when test="exists(n1:lineAmountsSimplified/n1:lineGrossAmountSimplified)">
														<xsl:call-template name="LineGrossAmountHUFTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:lineAmountsSimplified">
															<xsl:for-each select="n1:lineGrossAmountSimplifiedHUF">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:when>
												</xsl:choose>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
									<xsl:choose>
										<xsl:when test="exists(n1:lineDiscountData)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="LineDiscountDataTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="LineDiscountDescriptionTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:lineDiscountData">
															<xsl:for-each select="n1:discountDescription">
																<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="LineDiscountValueTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:lineDiscountData">
															<xsl:for-each select="n1:discountValue">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<altova:inline-container-substitute font-weight="bold">
															<xsl:value-of select="$CurrencyCodeValue"/>
														</altova:inline-container-substitute>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="LineDiscountRateTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:lineDiscountData">
															<xsl:for-each select="n1:discountRate">
																<altova:inline-container-substitute font-weight="bold">
																	<xsl:value-of select=". * 100"/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-weight="bold">
															<xsl:text> %</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:advanceData/n1:advancePaymentData)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="AdvancePaymentTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:advanceData/n1:advancePaymentData)">
															<xsl:call-template name="AdvanceOriginalInvoiceTemplate_L10N"/>
															<altova:line-break/>
															<xsl:for-each select="n1:advanceData">
																<xsl:for-each select="n1:advancePaymentData">
																	<xsl:for-each select="n1:advanceOriginalInvoice">
																		<altova:inline-container-substitute font-weight="bold">
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:advanceData/n1:advancePaymentData)">
															<xsl:call-template name="AdvancePaymentDateTemplate_L10N"/>
															<altova:line-break/>
															<xsl:for-each select="n1:advanceData">
																<xsl:for-each select="n1:advancePaymentData">
																	<xsl:for-each select="n1:advancePaymentDate">
																		<xsl:call-template name="GenericDateOffset_Inner"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
														<altova:line-break/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:advanceData/n1:advancePaymentData)">
															<xsl:call-template name="AdvanceExchangeRateTemplate_L10N"/>
															<altova:line-break/>
															<xsl:for-each select="n1:advanceData">
																<xsl:for-each select="n1:advancePaymentData">
																	<xsl:for-each select="n1:advanceExchangeRate">
																		<altova:inline-container-substitute font-weight="bold">
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
														<altova:line-break/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:productCodes)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="ProductCodesData_L10N"/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:productCodes">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:value-of select="string-join(n1:productCode/string-join(*, &apos; - &apos;), &apos;, &apos;)"/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:intermediatedService = true()">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="IntermediatedServiceTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:depositIndicator = true()">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="DepositIndicatorTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:obligatedForProductFee = true()">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="2" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="ObligatedForProductFeeTemplate_L10N"/>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="2" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:choose>
															<xsl:when test="exists(n1:productFeeClause/n1:productFeeTakeoverData)">
																<xsl:call-template name="ProductFeeTakeoverTemplate_L10N"/>
															</xsl:when>
															<xsl:when test="exists(n1:productFeeClause/n1:customerDeclaration)">
																<xsl:call-template name="ProductFeeCustomerDeclarationTemplate_L10N"/>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:productFeeClause)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="2" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:choose>
															<xsl:when test="exists(n1:productFeeClause/n1:productFeeTakeoverData)">
																<xsl:call-template name="TakeoverTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:productFeeClause">
																	<xsl:for-each select="n1:productFeeTakeoverData">
																		<xsl:for-each select="n1:takeoverReason">
																			<altova:inline-container-substitute font-weight="bold">
																				<xsl:apply-templates/>
																			</altova:inline-container-substitute>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="exists(n1:productFeeClause/n1:customerDeclaration)">
																<xsl:call-template name="ProductStreamTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:productFeeClause">
																	<xsl:for-each select="n1:customerDeclaration">
																		<xsl:call-template name="ProductStreamTemplate_C5X"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="2" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:choose>
															<xsl:when test="exists(n1:productFeeClause/n1:productFeeTakeoverData)">
																<xsl:call-template name="TakeoverAmountTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:productFeeClause">
																	<xsl:for-each select="n1:productFeeTakeoverData">
																		<xsl:for-each select="n1:takeoverAmount">
																			<xsl:call-template name="GenericMonetaryTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline>
																	<xsl:text>&#160;</xsl:text>
																</fo:inline>
																<fo:inline font-weight="bold">
																	<xsl:text>HUF</xsl:text>
																</fo:inline>
															</xsl:when>
															<xsl:when test="exists(n1:productFeeClause/n1:customerDeclaration)">
																<xsl:call-template name="ProductFeeWeightTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:productFeeClause">
																	<xsl:for-each select="n1:customerDeclaration">
																		<xsl:for-each select="n1:productFeeWeight">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline>
																	<xsl:text>&#160;</xsl:text>
																</fo:inline>
																<fo:inline font-weight="bold">
																	<xsl:text>kg</xsl:text>
																</fo:inline>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:lineProductFeeContent)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" table-layout="fixed" width="100%">
																<fo:table-column column-width="100%"/>
																<xsl:variable name="altova:CurrContextGrid_22" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:lineProductFeeContent">
																		<fo:table-row>
																			<fo:table-cell border-style="none" padding="2pt" display-align="center">
																				<fo:block>
																					<altova:inline-container-substitute font-weight="bold">
																						<xsl:value-of select="string-join(./n1:productFeeCode/*, &apos; - &apos;)"/>
																					</altova:inline-container-substitute>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																					<xsl:call-template name="ProductFeeCodeAmount_L10N"/>
																					<xsl:for-each select="n1:productFeeAmount">
																						<xsl:call-template name="GenericMonetaryTypeOffset"/>
																					</xsl:for-each>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																					<fo:inline font-weight="bold">
																						<xsl:text>HUF</xsl:text>
																					</fo:inline>
																					<fo:inline>
																						<xsl:text>, </xsl:text>
																					</fo:inline>
																					<xsl:call-template name="ProductFeeQuantityTemplate_L10N"/>
																					<xsl:for-each select="n1:productFeeQuantity">
																						<xsl:call-template name="GenericQuantityTypeOffset"/>
																					</xsl:for-each>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																					<xsl:for-each select="n1:productFeeMeasuringUnit">
																						<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																					</xsl:for-each>
																					<fo:inline>
																						<xsl:text>, </xsl:text>
																					</fo:inline>
																					<xsl:call-template name="ProductFeeRateTemplate_L10N"/>
																					<xsl:for-each select="n1:productFeeRate">
																						<xsl:call-template name="GenericMonetaryTypeOffset"/>
																					</xsl:for-each>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																					<fo:inline font-weight="bold">
																						<xsl:text>HUF / </xsl:text>
																					</fo:inline>
																					<xsl:for-each select="n1:productFeeMeasuringUnit">
																						<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:GPCExcise)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="GPCExciseTemplate_L10N"/>
														<xsl:for-each select="n1:GPCExcise">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:netaDeclaration = true()">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="NetaDeclarationTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:newTransportMean)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="NewTransportMeanTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:choose>
															<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
																<xsl:call-template name="EngineCapacityTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:newTransportMean">
																	<xsl:for-each select="n1:vehicle">
																		<xsl:for-each select="n1:engineCapacity">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline font-weight="bold">
																	<xsl:text> cm3</xsl:text>
																</fo:inline>
															</xsl:when>
															<xsl:when test="exists(n1:newTransportMean/n1:vessel)">
																<xsl:call-template name="LengthTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:newTransportMean">
																	<xsl:for-each select="n1:vessel">
																		<xsl:for-each select="n1:length">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline font-weight="bold">
																	<xsl:text> m</xsl:text>
																</fo:inline>
															</xsl:when>
															<xsl:when test="exists(n1:newTransportMean/n1:aircraft)">
																<xsl:call-template name="TakeOffWeightTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:newTransportMean">
																	<xsl:for-each select="n1:aircraft">
																		<xsl:for-each select="n1:takeOffWeight">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline font-weight="bold">
																	<xsl:text> kg</xsl:text>
																</fo:inline>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:choose>
															<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
																<xsl:call-template name="EnginePowerTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:newTransportMean">
																	<xsl:for-each select="n1:vehicle">
																		<xsl:for-each select="n1:enginePower">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline font-weight="bold">
																	<xsl:text> kw</xsl:text>
																</fo:inline>
															</xsl:when>
															<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true() or n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
																<xsl:call-template name="NewTransportException"/>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:choose>
															<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
																<xsl:call-template name="KmsTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:newTransportMean">
																	<xsl:for-each select="n1:vehicle">
																		<xsl:for-each select="n1:kms">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline font-weight="bold">
																	<xsl:text> km</xsl:text>
																</fo:inline>
															</xsl:when>
															<xsl:when test="exists(n1:newTransportMean/n1:vessel)">
																<xsl:call-template name="SailedHoursTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:newTransportMean">
																	<xsl:for-each select="n1:vessel">
																		<xsl:for-each select="n1:sailedHours">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline font-weight="bold">
																	<xsl:text> h</xsl:text>
																</fo:inline>
															</xsl:when>
															<xsl:when test="exists(n1:newTransportMean/n1:aircraft)">
																<xsl:call-template name="OperationHoursTemplate_L10N"/>
																<altova:line-break/>
																<xsl:for-each select="n1:newTransportMean">
																	<xsl:for-each select="n1:aircraft">
																		<xsl:for-each select="n1:operationHours">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<fo:inline font-weight="bold">
																	<xsl:text> h</xsl:text>
																</fo:inline>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="count(child::n1:newTransportMean) &gt; 0">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="BrandTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:newTransportMean">
															<xsl:for-each select="n1:brand">
																<altova:inline-container-substitute font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="SerialNumTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:newTransportMean">
															<xsl:for-each select="n1:serialNum">
																<altova:inline-container-substitute font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="EngineNumTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:newTransportMean">
															<xsl:for-each select="n1:engineNum">
																<altova:inline-container-substitute font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="FirstEntryIntoServiceTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:newTransportMean">
															<xsl:for-each select="n1:firstEntryIntoService">
																<xsl:call-template name="GenericDateOffset_Inner"/>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:dieselOilPurchase)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="DieselOilPurchaseTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="DieselOilPurchaseDateTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:dieselOilPurchase">
															<xsl:for-each select="n1:purchaseDate">
																<xsl:call-template name="GenericDateOffset_Inner"/>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="DieselOilPurchaseVehicleRegistrationNumberTemplate_L10N"/>
														<altova:line-break/>
														<xsl:for-each select="n1:dieselOilPurchase">
															<xsl:for-each select="n1:vehicleRegistrationNumber">
																<altova:inline-container-substitute font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:dieselOilPurchase/n1:dieselOilQuantity)">
															<xsl:call-template name="DieselOilQuantityTemplate_L10N"/>
															<altova:line-break/>
															<xsl:for-each select="n1:dieselOilPurchase">
																<xsl:for-each select="n1:dieselOilQuantity">
																	<xsl:call-template name="GenericQuantityTypeOffset"/>
																</xsl:for-each>
															</xsl:for-each>
															<fo:inline>
																<xsl:text>&#160;</xsl:text>
															</fo:inline>
															<fo:inline font-weight="bold">
																<xsl:text>l</xsl:text>
															</fo:inline>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:dieselOilPurchase)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="DieselOilPurchaseLocationTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:dieselOilPurchase">
															<xsl:for-each select="n1:purchaseLocation">
																<xsl:for-each select="base:countryCode">
																	<altova:inline-container-substitute font-weight="bold">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
																<fo:inline>
																	<xsl:text>&#160;</xsl:text>
																</fo:inline>
																<xsl:if test="exists(n1:dieselOilPurchase/n1:purchaseLocation/base:region)">
																	<xsl:for-each select="base:region">
																		<altova:inline-container-substitute font-weight="bold">
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																	<fo:inline>
																		<xsl:text>&#160;</xsl:text>
																	</fo:inline>
																</xsl:if>
																<xsl:for-each select="base:postalCode">
																	<altova:inline-container-substitute font-weight="bold">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
																<fo:inline>
																	<xsl:text>, </xsl:text>
																</fo:inline>
																<xsl:for-each select="base:city">
																	<altova:inline-container-substitute font-weight="bold">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
																<fo:inline>
																	<xsl:text>&#160;</xsl:text>
																</fo:inline>
																<xsl:for-each select="base:additionalAddressDetail">
																	<altova:inline-container-substitute font-weight="bold">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:orderNumbers)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_23" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:orderNumbers">
																			<xsl:variable name="conventionalLine" select="string-join(n1:orderNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoOrderNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:deliveryNotes)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_24" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:deliveryNotes">
																			<xsl:variable name="conventionalLine" select="string-join(n1:deliveryNote/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoDeliveryNoteTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:shippingDates)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_25" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:shippingDates">
																			<xsl:variable name="conventionalLine" select="string-join(n1:shippingDate/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoShippingDateTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:contractNumbers)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_26" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:contractNumbers">
																			<xsl:variable name="conventionalLine" select="string-join(n1:contractNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoContractNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:supplierCompanyCodes)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_27" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:supplierCompanyCodes">
																			<xsl:variable name="conventionalLine" select="string-join(n1:supplierCompanyCode/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoSupplierCompanyCodeTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:customerCompanyCodes)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_28" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:customerCompanyCodes">
																			<xsl:variable name="conventionalLine" select="string-join(n1:customerCompanyCode/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoCustomerCompanyCodeTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:dealerCodes)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_29" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:dealerCodes">
																			<xsl:variable name="conventionalLine" select="string-join(n1:dealerCode/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoDealerCodeTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:costCenters)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_30" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:costCenters">
																			<xsl:variable name="conventionalLine" select="string-join(n1:costCenter/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoCostCenterTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:projectNumbers)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_31" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:projectNumbers">
																			<xsl:variable name="conventionalLine" select="string-join(n1:projectNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoProjectNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:generalLedgerAccountNumbers)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_32" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:generalLedgerAccountNumbers">
																			<xsl:variable name="conventionalLine" select="string-join(n1:generalLedgerAccountNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoGeneralLedgerAccountNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:glnNumbersSupplier)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_33" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:glnNumbersSupplier">
																			<xsl:variable name="conventionalLine" select="string-join(n1:glnNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoGlnSupplierNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:glnNumbersCustomer)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_34" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:glnNumbersCustomer">
																			<xsl:variable name="conventionalLine" select="string-join(n1:glnNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoGlnCustomerNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:materialNumbers)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_35" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:materialNumbers">
																			<xsl:variable name="conventionalLine" select="string-join(n1:materialNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoMaterialNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:itemNumbers)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_36" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:itemNumbers">
																			<xsl:variable name="conventionalLine" select="string-join(n1:itemNumber/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoItemNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:ekaerIds)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_37" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:conventionalLineInfo">
																		<xsl:for-each select="n1:ekaerIds">
																			<xsl:variable name="conventionalLine" select="string-join(n1:ekaerId/text(), &apos;, &apos;)"/>
																			<fo:table-row>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<xsl:call-template name="ConventionalInfoEkaerNumberTemplate_L10N"/>
																					</fo:block>
																				</fo:table-cell>
																				<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" padding="2pt" display-align="center">
																					<fo:block>
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																						</altova:inline-container-substitute>
																					</fo:block>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:for-each>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:additionalLineData)">
											<fo:table-row keep-together.within-page="always" keep-together.within-column="always">
												<xsl:variable name="sBackground-color">
													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
														<xsl:with-param name="sValue" select="if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="$sBackground-color != ''">
													<xsl:attribute name="background-color">
														<xsl:value-of select="$sBackground-color"/>
													</xsl:attribute>
												</xsl:if>
												<fo:table-cell number-columns-spanned="4" border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:variable name="altova:table">
															<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed" border="solid 1pt gray">
																<fo:table-column column-width="25%"/>
																<fo:table-column column-width="75%"/>
																<xsl:variable name="altova:CurrContextGrid_38" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<fo:table-body start-indent="0pt">
																	<xsl:for-each select="n1:additionalLineData">
																		<fo:table-row>
																			<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block>
																					<xsl:for-each select="n1:dataDescription">
																						<altova:inline-container-substitute font-weight="bold">
																							<xsl:apply-templates/>
																						</altova:inline-container-substitute>
																					</xsl:for-each>
																					<fo:inline>
																						<xsl:text>:</xsl:text>
																					</fo:inline>
																					<altova:line-break/>
																					<fo:inline>
																						<xsl:text>(</xsl:text>
																					</fo:inline>
																					<xsl:for-each select="n1:dataName">
																						<altova:inline-container-substitute>
																							<xsl:apply-templates/>
																						</altova:inline-container-substitute>
																					</xsl:for-each>
																					<fo:inline>
																						<xsl:text>)</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border-left-color="black" border-left-width="0.01in" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block>
																					<xsl:for-each select="n1:dataValue">
																						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
																					</xsl:for-each>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:for-each>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="position() != last()">
											<fo:table-row height="5mm" keep-together.within-page="always" keep-together.within-column="always">
												<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
								</xsl:for-each>
							</fo:table-body>
						</fo:table>
					</xsl:variable>
					<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					<altova:line-break/>
				</xsl:for-each>
			</fo:block>
		</xsl:if>
		<xsl:if test="exists(n1:productFeeSummary)">
			<fo:block keep-together.within-page="always" keep-together.within-column="always" padding-top="5mm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
				<xsl:call-template name="ProductFeeSummaryTemplate_L10N"/>
				<xsl:variable name="altova:table">
					<fo:table border-collapse="collapse" border-color="black" border-style="solid" table-omit-header-at-break="true" table-layout="fixed" width="100%" border="solid 1pt gray">
						<fo:table-column column-width="47.500mm"/>
						<fo:table-column column-width="47.500mm"/>
						<fo:table-column column-width="47.500mm"/>
						<fo:table-column column-width="47.500mm"/>
						<xsl:variable name="altova:CurrContextGrid_39" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<fo:table-header start-indent="0pt">
							<fo:table-row>
								<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block text-align="left">
										<xsl:call-template name="ProductFeeSummaryQuantityTemplate_L10N"/>
									</fo:block>
								</fo:table-cell>
								<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block text-align="left">
										<xsl:call-template name="ProductFeeRateSummaryTemplate_L10N"/>
									</fo:block>
								</fo:table-cell>
								<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block text-align="left">
										<xsl:call-template name="ProductFeeAmountSummaryTemplate_L10N"/>
									</fo:block>
								</fo:table-cell>
								<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
									<fo:block text-align="left">
										<xsl:call-template name="ProductFeeCodeSummaryTemplate_L10N"/>
									</fo:block>
								</fo:table-cell>
							</fo:table-row>
						</fo:table-header>
						<fo:table-body start-indent="0pt">
							<xsl:for-each select="n1:productFeeSummary">
								<fo:table-row>
									<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:variable name="altova:table">
												<fo:table border-collapse="collapse" border-style="none" width="100%" table-layout="fixed">
													<fo:table-column column-width="25%"/>
													<fo:table-column column-width="25%"/>
													<fo:table-column column-width="25%"/>
													<fo:table-column column-width="25%"/>
													<xsl:variable name="altova:CurrContextGrid_40" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<fo:table-body start-indent="0pt">
														<xsl:for-each select="n1:productFeeData">
															<fo:table-row>
																<fo:table-cell border-style="none" padding="2pt" display-align="center">
																	<fo:block>
																		<xsl:for-each select="n1:productFeeQuantity">
																			<xsl:call-template name="GenericQuantityTypeOffset"/>
																		</xsl:for-each>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																		<xsl:for-each select="n1:productFeeMeasuringUnit">
																			<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																		</xsl:for-each>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-style="none" padding="2pt" display-align="center">
																	<fo:block>
																		<xsl:for-each select="n1:productFeeRate">
																			<xsl:call-template name="GenericMonetaryTypeOffset"/>
																		</xsl:for-each>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																		<fo:inline font-weight="bold">
																			<xsl:text>HUF / </xsl:text>
																		</fo:inline>
																		<xsl:for-each select="n1:productFeeMeasuringUnit">
																			<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																		</xsl:for-each>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-style="none" padding="2pt" display-align="center">
																	<fo:block>
																		<xsl:for-each select="n1:productFeeAmount">
																			<xsl:call-template name="GenericMonetaryTypeOffset"/>
																		</xsl:for-each>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																		<fo:inline font-weight="bold">
																			<xsl:text>HUF</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-style="none" padding="2pt" display-align="center">
																	<fo:block>
																		<altova:inline-container-substitute font-weight="bold">
																			<xsl:value-of select="string-join(./n1:productFeeCode/*, &apos; - &apos;)"/>
																		</altova:inline-container-substitute>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</fo:table-body>
												</fo:table>
											</xsl:variable>
											<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
								<fo:table-row>
									<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="ProductChargeSumTemplate_L10N"/>
											<xsl:for-each select="n1:productChargeSum">
												<xsl:call-template name="GenericMonetaryTypeOffset"/>
											</xsl:for-each>
											<fo:inline>
												<xsl:text>&#160;</xsl:text>
											</fo:inline>
											<fo:inline font-weight="bold">
												<xsl:text>HUF</xsl:text>
											</fo:inline>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
								<fo:table-row>
									<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
										<fo:block>
											<xsl:call-template name="ProductFeeOperationTemplate_C5X"/>
										</fo:block>
									</fo:table-cell>
								</fo:table-row>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<fo:table-row>
											<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="PaymentEvidenceDocumentDataTemplate_L10N"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<fo:table-row>
											<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="PaymentEvidenceObligatedTemplate_L10N"/>
													<xsl:for-each select="n1:paymentEvidenceDocumentData">
														<xsl:for-each select="n1:obligatedTaxNumber">
															<xsl:call-template name="BaseTaxNumberTemplate"/>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>, </xsl:text>
														</fo:inline>
														<xsl:for-each select="n1:obligatedName">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<fo:table-row>
											<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="PaymentEvidenceObligatedAddressTemplate_L10N"/>
													<xsl:for-each select="n1:paymentEvidenceDocumentData">
														<xsl:for-each select="n1:obligatedAddress">
															<xsl:call-template name="BaseAddressTemplate"/>
														</xsl:for-each>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<fo:table-row>
											<fo:table-cell number-columns-spanned="2" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="PaymentEvidenceDocumentNoTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:paymentEvidenceDocumentData">
														<xsl:for-each select="n1:evidenceDocumentNo">
															<altova:inline-container-substitute font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell number-columns-spanned="2" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="PaymentEvidenceDocumentDateTemplate_L10N"/>
													<altova:line-break/>
													<xsl:for-each select="n1:paymentEvidenceDocumentData">
														<xsl:for-each select="n1:evidenceDocumentDate">
															<xsl:call-template name="GenericDateOffset_Inner"/>
														</xsl:for-each>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$ProductFeeSummaryCount &gt; 1 and position() != last()">
										<fo:table-row>
											<fo:table-cell number-columns-spanned="4" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<fo:block text-align="center">
														<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%"/>
													</fo:block>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$ProductFeeSummaryCount &gt; 1 and position() != last()">
										<fo:table-row height="1mm">
											<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="ProductFeeSummaryQuantityTemplate_L10N"/>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="ProductFeeRateSummaryTemplate_L10N"/>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="ProductFeeAmountSummaryTemplate_L10N"/>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:call-template name="ProductFeeCodeSummaryTemplate_L10N"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
							</xsl:for-each>
						</fo:table-body>
					</fo:table>
				</xsl:variable>
				<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
			</fo:block>
		</xsl:if>
		<fo:block padding-top="5mm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
			<xsl:for-each select="n1:invoiceSummary">
				<xsl:choose>
					<xsl:when test="exists(n1:summaryNormal)">
						<altova:line-break/>
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="47.500mm"/>
								<fo:table-column column-width="47.500mm"/>
								<fo:table-column column-width="47.500mm"/>
								<fo:table-column column-width="47.500mm"/>
								<xsl:variable name="altova:CurrContextGrid_41" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-header start-indent="0pt">
									<fo:table-row>
										<fo:table-cell background-color="#E8E8E8" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left">
												<xsl:call-template name="VatTemplate_L10N"/>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left">
												<xsl:call-template name="NetAmountTemplate_L10N"/>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left">
												<xsl:call-template name="VatAmountTemplate_L10N"/>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" font-weight="normal" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left">
												<xsl:call-template name="GrossAmountTemplate_L10N"/>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
								</fo:table-header>
								<fo:table-footer start-indent="0pt">
									<fo:table-row height="2.5mm">
										<fo:table-cell background-color="#E8E8E8" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
									</fo:table-row>
									<fo:table-row>
										<fo:table-cell background-color="#E8E8E8" border-color="black" border-style="none" font-size="9pt" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:call-template name="InvoiceSummarySumTotalTemplate_L10N"/>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:for-each select="n1:summaryNormal">
													<xsl:for-each select="n1:invoiceNetAmount">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<fo:inline>
													<xsl:text>&#160;</xsl:text>
												</fo:inline>
												<altova:inline-container-substitute font-weight="bold">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</altova:inline-container-substitute>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:for-each select="n1:summaryNormal">
													<xsl:for-each select="n1:invoiceVatAmount">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<fo:inline>
													<xsl:text>&#160;</xsl:text>
												</fo:inline>
												<altova:inline-container-substitute font-weight="bold">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</altova:inline-container-substitute>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-left-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="center">
											<xsl:variable name="sBorder-bottom-color">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sBorder-bottom-color != ''">
												<xsl:attribute name="border-bottom-color">
													<xsl:value-of select="$sBorder-bottom-color"/>
												</xsl:attribute>
											</xsl:if>
											<xsl:variable name="sBorder-right-color">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sBorder-right-color != ''">
												<xsl:attribute name="border-right-color">
													<xsl:value-of select="$sBorder-right-color"/>
												</xsl:attribute>
											</xsl:if>
											<xsl:variable name="sBorder-top-color">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sBorder-top-color != ''">
												<xsl:attribute name="border-top-color">
													<xsl:value-of select="$sBorder-top-color"/>
												</xsl:attribute>
											</xsl:if>
											<fo:block>
												<xsl:if test="exists(n1:summaryGrossData)">
													<xsl:for-each select="n1:summaryGrossData">
														<xsl:for-each select="n1:invoiceGrossAmount">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<altova:inline-container-substitute font-weight="bold">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</altova:inline-container-substitute>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
									<fo:table-row>
										<fo:table-cell background-color="#E8E8E8" border-color="black" border-style="none" font-size="9pt" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:call-template name="InvoiceSummarySumTotalInHUFTemplate_L10N"/>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:for-each select="n1:summaryNormal">
													<xsl:for-each select="n1:invoiceNetAmountHUF">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<fo:inline>
													<xsl:text>&#160;</xsl:text>
												</fo:inline>
												<fo:inline font-weight="bold">
													<xsl:text>HUF</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:for-each select="n1:summaryNormal">
													<xsl:for-each select="n1:invoiceVatAmountHUF">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<fo:inline font-weight="bold">
													<xsl:text> HUF</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-left-color="black" border-style="solid" border="solid 1pt gray" padding="2pt" display-align="center">
											<xsl:variable name="sBorder-bottom-color">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sBorder-bottom-color != ''">
												<xsl:attribute name="border-bottom-color">
													<xsl:value-of select="$sBorder-bottom-color"/>
												</xsl:attribute>
											</xsl:if>
											<xsl:variable name="sBorder-right-color">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sBorder-right-color != ''">
												<xsl:attribute name="border-right-color">
													<xsl:value-of select="$sBorder-right-color"/>
												</xsl:attribute>
											</xsl:if>
											<xsl:variable name="sBorder-top-color">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sBorder-top-color != ''">
												<xsl:attribute name="border-top-color">
													<xsl:value-of select="$sBorder-top-color"/>
												</xsl:attribute>
											</xsl:if>
											<fo:block>
												<xsl:if test="exists(n1:summaryGrossData)">
													<xsl:for-each select="n1:summaryGrossData">
														<xsl:for-each select="n1:invoiceGrossAmountHUF">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<fo:inline font-weight="bold">
														<xsl:text>HUF</xsl:text>
													</fo:inline>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
								</fo:table-footer>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:summaryNormal">
										<xsl:for-each select="n1:summaryByVatRate">
											<fo:table-row>
												<fo:table-cell background-color="#E8E8E8" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:vatRate">
															<xsl:call-template name="VatRateTypeTemplate_C5X"/>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:vatRateNetData">
															<xsl:for-each select="n1:vatRateNetAmount">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<altova:inline-container-substitute font-weight="bold">
															<xsl:value-of select="$CurrencyCodeValue"/>
														</altova:inline-container-substitute>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:vatRateVatData">
															<xsl:for-each select="n1:vatRateVatAmount">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<altova:inline-container-substitute font-weight="bold">
															<xsl:value-of select="$CurrencyCodeValue"/>
														</altova:inline-container-substitute>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:vatRateGrossData)">
															<xsl:for-each select="n1:vatRateGrossData">
																<xsl:for-each select="n1:vatRateGrossAmount">
																	<xsl:call-template name="GenericMonetaryTypeOffset"/>
																</xsl:for-each>
															</xsl:for-each>
															<fo:inline>
																<xsl:text>&#160;</xsl:text>
															</fo:inline>
															<altova:inline-container-substitute font-weight="bold">
																<xsl:value-of select="$CurrencyCodeValue"/>
															</altova:inline-container-substitute>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#E8E8E8" border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:call-template name="InvoiceSummaryInHUFTemplate_L10N"/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:vatRateNetData">
															<xsl:for-each select="n1:vatRateNetAmount">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<fo:inline font-weight="bold">
															<xsl:text>HUF</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:for-each select="n1:vatRateVatData">
															<xsl:for-each select="n1:vatRateVatAmountHUF">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<fo:inline font-weight="bold">
															<xsl:text>HUF</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-style="none" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block>
														<xsl:if test="exists(n1:vatRateGrossData)">
															<xsl:for-each select="n1:vatRateGrossData">
																<xsl:for-each select="n1:vatRateGrossAmountHUF">
																	<xsl:call-template name="GenericMonetaryTypeOffset"/>
																</xsl:for-each>
															</xsl:for-each>
															<fo:inline>
																<xsl:text>&#160;</xsl:text>
															</fo:inline>
															<fo:inline font-weight="bold">
																<xsl:text>HUF</xsl:text>
															</fo:inline>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:for-each>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:when>
					<xsl:when test="exists(n1:summarySimplified)">
						<xsl:variable name="altova:table">
							<fo:table border-collapse="collapse" border-style="none" table-omit-header-at-break="true" table-layout="fixed" width="100%" border="solid 1pt gray">
								<fo:table-column column-width="47.500mm"/>
								<fo:table-column column-width="47.500mm"/>
								<fo:table-column column-width="47.500mm"/>
								<fo:table-column column-width="47.500mm"/>
								<xsl:variable name="altova:CurrContextGrid_42" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<fo:table-header start-indent="0pt">
									<fo:table-row>
										<fo:table-cell background-color="#E8E8E8" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left">
												<fo:inline>
													<xsl:text>ÃFA</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left"/>
										</fo:table-cell>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left"/>
										</fo:table-cell>
										<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="0.01in" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block text-align="left">
												<fo:inline>
													<xsl:text>BruttÃ³ Ã¶sszeg</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
								</fo:table-header>
								<fo:table-footer start-indent="0pt">
									<fo:table-row height="2.5mm">
										<fo:table-cell background-color="#E8E8E8" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
									</fo:table-row>
									<fo:table-row>
										<fo:table-cell background-color="#E8E8E8" font-size="9pt" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<fo:inline font-weight="bold">
													<xsl:text>MindÃ¶sszesen:</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-bottom-style="none" border-right-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-bottom-style="none" border-left-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:summaryGrossData)">
													<xsl:for-each select="n1:summaryGrossData">
														<xsl:for-each select="n1:invoiceGrossAmount">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<altova:inline-container-substitute font-weight="bold">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</altova:inline-container-substitute>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
									<fo:table-row>
										<fo:table-cell background-color="#E8E8E8" font-size="9pt" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<fo:inline font-weight="bold">
													<xsl:text>Forintban:</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell border-right-style="none" border-top-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell border-left-style="none" border-top-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block/>
										</fo:table-cell>
										<fo:table-cell table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
											<fo:block>
												<xsl:if test="exists(n1:summaryGrossData)">
													<xsl:for-each select="n1:summaryGrossData">
														<xsl:for-each select="n1:invoiceGrossAmountHUF">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<fo:inline font-weight="bold">
														<xsl:text>HUF</xsl:text>
													</fo:inline>
												</xsl:if>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
								</fo:table-footer>
								<fo:table-body start-indent="0pt">
									<xsl:for-each select="n1:summarySimplified">
										<fo:table-row>
											<fo:table-cell background-color="#E8E8E8" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:for-each select="n1:vatRate">
														<xsl:call-template name="VatRateTypeTemplate_C5X"/>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block/>
											</fo:table-cell>
											<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:for-each select="n1:vatContentGrossAmount">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160; </xsl:text>
													</fo:inline>
													<altova:inline-container-substitute font-weight="bold">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</altova:inline-container-substitute>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
										<fo:table-row>
											<fo:table-cell background-color="#E8E8E8" border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<fo:inline>
														<xsl:text>Forintban: </xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block/>
											</fo:table-cell>
											<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block/>
											</fo:table-cell>
											<fo:table-cell border-style="none" table-omit-footer-at-break="true" table-omit-header-at-break="true" border="solid 1pt gray" padding="2pt" display-align="center">
												<fo:block>
													<xsl:for-each select="n1:vatContentGrossAmountHUF">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
													<fo:inline>
														<xsl:text>&#160;</xsl:text>
													</fo:inline>
													<fo:inline font-weight="bold">
														<xsl:text>HUF</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:for-each>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
					</xsl:when>
				</xsl:choose>
				<altova:line-break/>
			</xsl:for-each>
		</fo:block>
	</xsl:template>
	<xsl:template name="InvoiceClassificationTemplate_C5X">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Bizonylat tÃ­pusa</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Document type</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Dokumentenart</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
		<fo:inline>
			<xsl:text>: </xsl:text>
		</fo:inline>
		<xsl:choose>
			<xsl:when test="not(exists($XML/n1:InvoiceData/n1:invoiceMain/n1:invoice/n1:invoiceReference)) and not(exists($XML/n1:InvoiceData/n1:invoiceMain/n1:batchInvoice))">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>SzÃ¡mla</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Invoice</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Rechnung</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="(exists($XML/n1:InvoiceData/n1:invoiceMain/n1:invoice/n1:invoiceReference) or exists($XML/n1:InvoiceData/n1:invoiceMain/n1:batchInvoice))">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>SzÃ¡mlÃ¡val egy tekintet alÃ¡ esÅ okirat</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Invoice equivalent document</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>RechnungsÃ¤quivalentes Dokument</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Bizonylat sorszÃ¡ma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Serial number of the document: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Seriennummer des Dokuments: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="HeaderTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>SzÃ¡mlaadat</xsl:text>
				</fo:inline>
				<xsl:if test="n1:InvoiceData/n1:completenessIndicator = false()">
					<fo:inline font-weight="bold">
						<xsl:text>-szolgÃ¡ltatÃ¡s</xsl:text>
					</fo:inline>
				</xsl:if>
				<fo:inline font-weight="bold">
					<xsl:text> kÃ©pi megjelenÃ­tÃ©se</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Visual display of invoice data</xsl:text>
				</fo:inline>
				<xsl:if test="n1:InvoiceData/n1:completenessIndicator = false()">
					<fo:inline font-weight="bold">
						<xsl:text> report</xsl:text>
					</fo:inline>
				</xsl:if>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Visuelle Anzeige </xsl:text>
				</fo:inline>
				<xsl:choose>
					<xsl:when test="n1:InvoiceData/n1:completenessIndicator = true()">
						<fo:inline font-weight="bold">
							<xsl:text>von Rechnungsdaten</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="n1:InvoiceData/n1:completenessIndicator = false()">
						<fo:inline font-weight="bold">
							<xsl:text>des Rechnungsdatenberichts</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="FooterTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Ez a dokumentum a bizonylat adattartalmÃ¡nak standard kÃ©pi megjelenÃ­tÃ©se. Ez az dokumentum nem a szÃ¡mla.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>This document is a standard image representation of the data content of the document. This document is not the invoice.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Dieses Dokument ist eine Standardbilddarstellung des Dateninhalts des Dokuments. Dieses Dokument ist nicht die Rechnung.</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceIssueDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Bizonylat kiÃ¡llÃ­tÃ¡si dÃ¡tuma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Document issue date: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Dokumentausgabedatum: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BatchIndexTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MÃ³dosÃ­tÃ¡s sorszÃ¡ma a kÃ¶tegen belÃ¼l: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Sequence number of the modification document within the batch: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Laufende Nummer des Ãnderungsdokuments innerhalb der Charge: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericDateOffset_Outer">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;januÃ¡r&apos; else
	if (month-from-date(.) = 02) then &apos;februÃ¡r&apos; else
		if (month-from-date(.) = 03) then &apos;mÃ¡rcius&apos; else
			if (month-from-date(.) = 04) then &apos;Ã¡prilis&apos; else
				if (month-from-date(.) = 05) then &apos;mÃ¡jus&apos; else
					if (month-from-date(.) = 06) then &apos;jÃºnius&apos; else
						if (month-from-date(.) = 07) then &apos;jÃºlius&apos; else
							if (month-from-date(.) = 08) then &apos;augusztus&apos; else
								if (month-from-date(.) = 09) then &apos;szeptember&apos; else
									if (month-from-date(.) = 10) then &apos;oktÃ³ber&apos; else
										if (month-from-date(.) = 11) then &apos;november&apos;
											 else &apos;december&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="concat(day-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;January&apos; else
	if (month-from-date(.) = 02) then &apos;February&apos; else
		if (month-from-date(.) = 03) then &apos;March&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;May&apos; else
					if (month-from-date(.) = 06) then &apos;June&apos; else
						if (month-from-date(.) = 07) then &apos;July&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;October&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;December&apos;),
&apos; &apos;, year-from-date(.), &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;Januar&apos; else
	if (month-from-date(.) = 02) then &apos;Februar&apos; else
		if (month-from-date(.) = 03) then &apos;MÃ¤rz&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;Mai&apos; else
					if (month-from-date(.) = 06) then &apos;Juni&apos; else
						if (month-from-date(.) = 07) then &apos;Juli&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;Oktober&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;Dezember&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NamespaceErrorTemplate_L10N">
		<altova:line-break/>
		<fo:inline>
			<xsl:text>FeldolgozÃ¡si hiba! / Processing error! / Verarbeitungsfehler! </xsl:text>
		</fo:inline>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<fo:inline>
			<xsl:text>A bemenetkÃ©nt megadott XML Ã¡llomÃ¡ny nem az Online SzÃ¡mla adatszolgÃ¡ltatÃ¡s 3.0-Ã¡s verziÃ³ja szerint kÃ©szÃ¼lt. Az XSLT sablon desktop verziÃ³ja nem alkalmas ettÅl eltÃ©rÅ kÃ©pi megjelenÃ­tÃ©s generÃ¡lÃ¡sÃ¡ra. (A default namespace Ã©rtÃ©ke nem a 3.0-Ã¡s szÃ¡mla adatszolgÃ¡ltatÃ¡sokban hasznÃ¡lt &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos;.)</xsl:text>
		</fo:inline>
		<altova:line-break/>
		<altova:line-break/>
		<fo:inline>
			<xsl:text>The XML file specified as input was not created according to Online Invoice Data Report version 3.0. The desktop version of the XSLT template is not suitable for generating a different image display. (The default namespace value is not &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos;.</xsl:text>
		</fo:inline>
		<altova:line-break/>
		<altova:line-break/>
		<fo:inline>
			<xsl:text>Die als Eingabe angegebene XML-Datei wurde nicht gemÃ¤Ã Online Invoice Data Report Version 3.0 erstellt. Die Desktop-Version des XSLT-Templates ist nicht geeignet, um eine andere Bilddarstellung zu erzeugen. (Der Standard-Namespace-Wert ist nicht âhttp://schemas.nav.gov.hu/OSA/3.0/dataâ.</xsl:text>
		</fo:inline>
	</xsl:template>
	<xsl:template name="DisplayErrorTemplate_L10N">
		<fo:inline>
			<xsl:text>FeldolgozÃ¡si hiba / Processing error! / Verarbeitungsfehler! </xsl:text>
		</fo:inline>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<fo:inline>
			<xsl:text>A dokumentum megjelenÃ­tÃ©si beÃ¡llÃ­tÃ¡sait tartalmazÃ³ $lang vÃ¡ltozÃ³ nem kerÃ¼lt helyesen megadÃ¡sra! A tÃ¡mogatott Ã©rtÃ©kek: HU, EN, DE. / The $lang variable containing the display options of the document is not correctly provided! Supported values are: HU, EN, DE. / Das $lang-Variable, dass die Anzeigeoptionen des Dokuments enthÃ¤lt, wird nicht bereitgestellt! UnterstÃ¼tzte Werte sind: HU, EN, DE. </xsl:text>
		</fo:inline>
	</xsl:template>
	<xsl:template name="InvoiceCategoryTemplate">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>SzÃ¡mla tÃ­pusa: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Type of invoice: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>RechnungsTyp: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="n1:invoiceCategory = &apos;NORMAL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>NormÃ¡l szÃ¡mla</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Regular invoice</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Normales Rechnung</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceCategory = &apos;SIMPLIFIED&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>EgyszerÅ±sÃ­tett szÃ¡mla</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Simplified invoice</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Vereinfachte Rechnung</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceCategory = &apos;AGGREGATE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>GyÅ±jtÅ szÃ¡mla</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Aggregated invoice</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Aggregierte Rechnung</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceAppearanceTemplate">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MegjelenÃ©si forma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Invoice appearance: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Erscheinungsform: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="n1:invoiceAppearance = &apos;PAPER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>PapÃ­r</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Paper</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Papier</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceAppearance = &apos;ELECTRONIC&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Elektronikus</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Electronic</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Electronish</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceAppearance = &apos;EDI&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>EDI</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="n1:invoiceAppearance = &apos;UNKNOWN&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Ismeretlen</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Unknown</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Unbekannt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PeriodicalSettlementTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Folyamatos teljesÃ­tÃ©sÅ± Ã¼gylet</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Periodic settlement</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Periodische Abrechnung</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentMethodTemplate_C5X">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>FizetÃ©si mÃ³d: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Payment method: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Zahlungsweise: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="n1:paymentMethod = &apos;TRANSFER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>ÃtutalÃ¡s</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Bank transfer</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>BankÃ¼berweisung</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;CASH&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KÃ©szpÃ©nz</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Cash</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Bargeld</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;CARD&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KÃ¡rtya</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Card</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Karte</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;VOUCHER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>UtalvÃ¡ny, vÃ¡ltÃ³</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Voucher, bill of exchange</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Gutschein, Weschel</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;OTHER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>EgyÃ©b</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Other</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Sonstiges</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="CashAccountingIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>PÃ©nzforgalmi elszÃ¡molÃ¡s</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Cash accounting</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Verrechnung des Geldverkehrs</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SelfBillingIncidatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>ÃnszÃ¡mlÃ¡zÃ¡s</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Self billing</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Selbstfakturierung</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UtilitySettlementIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>KÃ¶zmÅ± elszÃ¡molÃ³ szÃ¡mla</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Public utility settlement invoice</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Verrechnungskonto fÃ¼r Versorgungsunternehmen</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="OriginalInvoiceNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MÃ³dosÃ­tott szÃ¡mla sorszÃ¡ma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Original invoice reference number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Original Rechnungsreferenznummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ModificationIndexTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MÃ³dosÃ­tÃ¡s sorszÃ¡ma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Modification index: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Ãnderungsindex: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SellerTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>ELADÃ</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>SELLER</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>VERKÃUFER</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BuyerTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>VEVÅ</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>CUSTOMER</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>KUNDE</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TaxNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>AdÃ³szÃ¡m: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Tax number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Steuernummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TaxNumberGroupTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>CsoportazonosÃ­tÃ³ szÃ¡m: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Group identifier number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Gruppenidentifikationsnummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="CommunityVatNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>KÃ¶zÃ¶ssÃ©gi adÃ³szÃ¡m: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>EU VAT number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>EU-Steuernummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ThirdStateTaxIdTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Harmadik orszÃ¡gbeli adÃ³azonosÃ­tÃ³: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Third state tax ID: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Dritte staatliche Steuer ID: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GroupMemberTaxNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Csoporttag adÃ³szÃ¡ma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Group member tax number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Steuernummer des Gruppenmitglieds: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceHeadNameTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>NÃ©v: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Name: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Name: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceHeadAddressTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>CÃ­m: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Address: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Anschrift: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="FiscalRepresentativeNameTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>PÃ©nzÃ¼gyi kÃ©pviselÅ neve: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Fiscal representative&apos;s name: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Name des Finanzvertreters: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceDeliveryDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TeljesÃ­tÃ©s dÃ¡tuma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Delivery date: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Lieferdatum: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceAccountingDeliveryDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>SzÃ¡mviteli teljesÃ­tÃ©s dÃ¡tuma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Accounting delivery date: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Abrechnungsdatum: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceDeliveryPeriodStartTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TeljesÃ­tÃ©si idÅszak kezdete: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Start of delivery period: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Beginn der Lieferfrist: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceDeliveryPeriodEndTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TeljesÃ­tÃ©si idÅszak vÃ©ge: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>End of delivery date: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Ende der Lieferfrist: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>FizetÃ©si hatÃ¡ridÅ: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Payment date: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Zahlungsfrist: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="CurrencyCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>SzÃ¡mla pÃ©nzneme: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Invoice currency: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>WÃ¤hrung der Rechnung: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ExchangeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ÃtvÃ¡ltÃ¡si Ã¡rfolyam: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Exchange rate: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Tauschrate: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoOrderNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MegrendelÃ©s szÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Order number(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Bestellnummer(n):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoDeliveryNoteTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>SzÃ¡llÃ­tÃ³levÃ©l szÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Delivery note(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Lieferschein(en):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoShippingDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>SzÃ¡llÃ­tÃ¡si dÃ¡tum(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Shipping date(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Versanddatum (daten):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericDateOffset_Inner">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;januÃ¡r&apos; else
	if (month-from-date(.) = 02) then &apos;februÃ¡r&apos; else
		if (month-from-date(.) = 03) then &apos;mÃ¡rcius&apos; else
			if (month-from-date(.) = 04) then &apos;Ã¡prilis&apos; else
				if (month-from-date(.) = 05) then &apos;mÃ¡jus&apos; else
					if (month-from-date(.) = 06) then &apos;jÃºnius&apos; else
						if (month-from-date(.) = 07) then &apos;jÃºlius&apos; else
							if (month-from-date(.) = 08) then &apos;augusztus&apos; else
								if (month-from-date(.) = 09) then &apos;szeptember&apos; else
									if (month-from-date(.) = 10) then &apos;oktÃ³ber&apos; else
										if (month-from-date(.) = 11) then &apos;november&apos;
											 else &apos;december&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="concat(day-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;January&apos; else
	if (month-from-date(.) = 02) then &apos;February&apos; else
		if (month-from-date(.) = 03) then &apos;March&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;May&apos; else
					if (month-from-date(.) = 06) then &apos;June&apos; else
						if (month-from-date(.) = 07) then &apos;July&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;October&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;December&apos;),
&apos; &apos;, year-from-date(.), &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;Januar&apos; else
	if (month-from-date(.) = 02) then &apos;Februar&apos; else
		if (month-from-date(.) = 03) then &apos;MÃ¤rz&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;Mai&apos; else
					if (month-from-date(.) = 06) then &apos;Juni&apos; else
						if (month-from-date(.) = 07) then &apos;Juli&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;Oktober&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;Dezember&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AggregateInstructionsTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Ld: tÃ©telsorok!</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>See invoice lines!</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Siehe Rechnungspositionen!</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PrivatePersonTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline color="red" font-weight="bold">
					<xsl:text>A vevÅ nem Ã¡faalany termÃ©szetes szemÃ©ly, ezÃ©rt adatai az adatszolgÃ¡ltatÃ¡sban nem szerepelnek.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline color="red" font-weight="bold">
					<xsl:text>The customer is non-VAT liable natural person and therefore his / her data is not included in the data report.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline color="red" font-weight="bold">
					<xsl:text>Der Kunde ist eine nicht umsatzsteuerpflichtige natÃ¼rliche Person und daher werden seine Daten nicht in den Rechnungsdatenberichts aufgenommen.</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SmallBusinessIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>(kisadÃ³zÃ³)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>(low-tax bracket enterprise)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>(kleinunternehmer)</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="IndividualExemptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>(alanyi Ã¡famentes)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>(individual VAT exempt)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>(Individuell steuerfrei)</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BankAccountNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>BankszÃ¡mlaszÃ¡m: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Bank account number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Bankkontonummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ExciseLicensNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>JÃ¶vedÃ©ki engedÃ©ly szÃ¡ma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Excise license number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Verbrauchsteuer-Lizenznummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoContractNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>SzerzÅdÃ©sszÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Contract number(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Vertragsnummer(n):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoSupplierCompanyCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>EladÃ³ vÃ¡llalati kÃ³dja(i):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Supplier company code(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Buchungskreise(n) des VerkÃ¤ufer:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoCustomerCompanyCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>VevÅ vÃ¡llalati kÃ³dja(i):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Customer company codes:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Buchungskreise(n) des Kunden:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoDealerCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>BeszÃ¡llÃ­tÃ³ kÃ³d(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Dealer code(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>HÃ¤ndlercode(n):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoCostCenterTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>KÃ¶ltsÃ©ghely(ek):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Cost center(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Kostenstelle(n):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoProjectNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ProjektszÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Project number(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Projektnummer(n):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoGeneralLedgerAccountNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>FÅkÃ¶nyvi szÃ¡mlaszÃ¡m(ok)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>General ledger account number(s)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Hauptbuchkontonummer(n)</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoGlnSupplierNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>KiÃ¡llÃ­tÃ³i globÃ¡lis helyazonosÃ­tÃ³ szÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Supplier global location number(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Globale Standortnummer(n) des VerkÃ¤ufer:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoGlnCustomerNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>VevÅi globÃ¡lis helyazonosÃ­tÃ³ szÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Customer global location number(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Globale Standortnummer(n) des Kunden:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoMaterialNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>AnyagszÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Material number(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Materialnummer(n):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoItemNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>CikkszÃ¡m(ok):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Item number(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Artikelnummer(n):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoEkaerNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>EKÃER azonosÃ­tÃ³(k):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>EKAER ID(s):</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>EKAER ID(s):</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericQuantityTypeOffset">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="translate(replace(format-number(., &apos;###,###,###,##0.##########&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="format-number(., &apos;###,###,###,##0.##########&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="translate(translate(replace(format-number(., &apos;###,###,###,##0.##########&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;), &apos; &apos;, &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericMonetaryTypeOffset">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="translate(replace(format-number(., &apos;#,###,###,###,###,##0.##&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="format-number(., &apos;#,###,###,###,###,##0.##&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="translate(translate(replace(format-number(., &apos;#,###,###,###,###,##0.##&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;), &apos; &apos;, &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericZeroWidthWhitespaceOffset">
		<altova:inline-container-substitute font-weight="bold">
			<xsl:value-of select="string-join(for $i in (string-to-codepoints(.)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
		</altova:inline-container-substitute>
	</xsl:template>
	<xsl:template name="VatRateTypeTemplate_C5X">
		<xsl:choose>
			<xsl:when test="exists(n1:vatPercentage)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA mÃ©rtÃ©k</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT percentage</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt Prozentsatz</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="n1:vatPercentage * 100"/>
				</altova:inline-container-substitute>
				<fo:inline font-weight="bold">
					<xsl:text> %</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="exists(n1:vatContent)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA tartalom</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT content</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt Inhalt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="n1:vatContent * 100"/>
				</altova:inline-container-substitute>
				<fo:inline font-weight="bold">
					<xsl:text> %</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="exists(n1:vatExemption)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<xsl:for-each select="n1:vatExemption">
					<xsl:for-each select="n1:case">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="exists(n1:vatOutOfScope)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<xsl:for-each select="n1:vatOutOfScope">
					<xsl:for-each select="n1:case">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="n1:vatDomesticReverseCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<fo:inline font-weight="bold">
					<xsl:text>FAD</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="exists(n1:marginSchemeIndicator)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<xsl:choose>
					<xsl:when test="n1:marginSchemeIndicator = &apos;TRAVEL_AGENCY&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KAU</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;SECOND_HAND&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KAH</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ARTWORK&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KAM</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ANTIQUES&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KAR</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:vatAmountMismatch)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="n1:vatAmountMismatch/n1:vatRate * 100"/>
				</altova:inline-container-substitute>
				<fo:inline>
					<xsl:text>&#160;</xsl:text>
				</fo:inline>
				<fo:inline font-weight="bold">
					<xsl:text>%</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="n1:noVatCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline>
							<xsl:text>ÃFA</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline>
							<xsl:text>VAT</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline>
							<xsl:text>MwSt</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>: </xsl:text>
				</fo:inline>
				<fo:inline font-weight="bold">
					<xsl:text>NFA</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatReasonTemplate_C5X">
		<xsl:choose>
			<xsl:when test="exists(n1:vatExemption/n1:reason)">
				<xsl:for-each select="n1:vatExemption">
					<xsl:for-each select="n1:reason">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="exists(n1:vatOutOfScope/n1:reason)">
				<xsl:for-each select="n1:vatOutOfScope">
					<xsl:for-each select="n1:reason">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="n1:vatDomesticReverseCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>BelfÃ¶ldi fordÃ­tott adÃ³zÃ¡s</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Domestic reverse charging</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Umgekehrte GebÃ¼hr im Inland</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:marginSchemeIndicator)">
				<xsl:choose>
					<xsl:when test="n1:marginSchemeIndicator = &apos;TRAVEL_AGENCY&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - utazÃ¡si irodÃ¡k</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Margin scheme taxation - travel agencies</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Differenzbesteuerung - Reiseagenturen</xsl:text>
								</fo:inline>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;SECOND_HAND&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - hasznÃ¡lt cikkek</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Margin scheme taxation - second hand goods</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Differenzbesteuerung - Gebrauchtwaren</xsl:text>
								</fo:inline>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ARTWORK&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - mÅ±alkotÃ¡sok</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Margin scheme taxation - works of art</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Differenzbesteuerung - Kunstwerke</xsl:text>
								</fo:inline>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ANTIQUES&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - gyÅ±jtemÃ©nydarabok Ã©s rÃ©gisÃ©gek</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Margin scheme taxation - collector&apos;s item and antiques</xsl:text>
								</fo:inline>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<fo:inline font-weight="bold">
									<xsl:text>Differenzbesteuerung - SammlerstÃ¼cke und AntiquitÃ¤ten</xsl:text>
								</fo:inline>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:vatAmountMismatch)">
				<xsl:for-each select="n1:vatAmountMismatch">
					<xsl:for-each select="n1:case">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="n1:noVatCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Nincs felszÃ¡mÃ­tott adÃ³ az ÃFA tÃ¶rvÃ©ny 17.Â§ alapjÃ¡n.</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>No VAT is charged under Section 17 of the VAT Act.</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Nach Â§ 17 des Mehrwertsteuergesetzes wird keine Mehrwertsteuer erhoben.</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="MergedItemTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Az adatszolgÃ¡ltatÃ¡s Ã¶sszevont soradatokat tartalmaz!</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>The invoice data report contains merged line data!</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Der Rechnungsdatenbericht enthÃ¤lt zusammengefÃ¼hrte Zeilendaten!</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>TÃ©tel sorszÃ¡m: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Line number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Zeilennummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineOperationCreateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Eredeti szÃ¡mlÃ¡n lÃ©trehozott Ãºj tÃ©tel sorszÃ¡ma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Line number of newly created item on original invoice: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Zeilennummer des neu erstellten Artikels auf der Originalrechnung: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineOperationModifyTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Eredeti szÃ¡mla mÃ³dosÃ­tÃ¡ssal Ã©rintett tÃ©tel sorszÃ¡ma: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Line number of modified item on original invoice: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Zeilennummer des geÃ¤nderten Artikels auf der Originalrechnung: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ReferenceToOtherLineTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>KapcsolÃ³dÃ³ tÃ©telek: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Referenced lines: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Referenzierte Zeilen: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvanceIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>(ElÅleg jellegÅ± tÃ©tel)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>(Advance payment type)</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>(Vorauszahlungsart)</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDescriptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MegnevezÃ©s: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Description: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Beschreibung: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="QuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MennyisÃ©g:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Quantity:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Menge:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitOfMeasureTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MennyisÃ©gi egysÃ©g:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Unit of measure:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Mengeneinheit:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDeliveryDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TÃ©tel teljesÃ­tÃ©si dÃ¡tuma:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Line delivery date:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Lieferdatum der Linie:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineExchangeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TÃ©tel Ã¡tvÃ¡ltÃ¡si Ã¡rfolyama:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Line exchange rate:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Wechselkurs der Linie:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitPriceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>EgysÃ©gÃ¡r:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Unit price:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Einheitpreis:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NetAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>NettÃ³ Ã¶sszeg:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Net amount:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Nettobetrag:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Ãfa Ã¶sszeg:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>VAT amount:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>MwSt Betrag:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GrossAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>BruttÃ³ Ã¶sszeg:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Gross amount:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Bruttowert:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatDescriptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Ãfa eset leÃ­rÃ¡sa: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>VAT case description: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Beschreibung des Mwst: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitPriceHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>EgysÃ©gÃ¡r forintban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Unit price in HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Einheitpreis im HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineNetAmountHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>NettÃ³ forintban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Net amount in HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Nettobetrag im HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineVatAmountHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Ãfa forintban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>VAT amount in HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>MwSt Betrag im HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineGrossAmountHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>BruttÃ³ forintban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Gross amount in HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Bruttowert im HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountDataTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>TÃ©telsor Ã¡rengedmÃ©ny adatok</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Line discount data</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Rabattdaten der Linie</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountDescriptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>LeÃ­rÃ¡sa:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Description:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Bezeichnung:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountValueTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Ãsszege:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Sum:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Summe:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ArÃ¡nya:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Rate:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Bewertung:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvancePaymentTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>ElÅleg beszÃ¡mÃ­tÃ¡s adatok</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Advance payment data</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Vorauszahlungsdaten</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvanceOriginalInvoiceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ElÅlegszÃ¡mla sorszÃ¡ma:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Advance payment invoice number:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Vorauszahlungsrechnung:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvancePaymentDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ElÅleg fizetÃ©sÃ©nek dÃ¡tuma:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Advance payment date:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Datum der Vorauszahlung:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvanceExchangeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ElÅleg Ã¡rfolyama:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Exchange rate of advance payment:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Wechselkurs der Vorauszahlung:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductCodesData_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TermÃ©kkÃ³d adatok:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Product codes data:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Daten zu Produktcodes:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="IntermediatedServiceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>A tÃ©tel kÃ¶zvetÃ­tett szolgÃ¡ltatÃ¡st tartalmaz.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>The item is an intermediated service.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Der Artikel enthÃ¤lt einen vermittelten Dienst.</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DepositIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>A tÃ©tel betÃ©tdÃ­j jellegÅ±.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>The item is of a deposit nature.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Der Artikel hat Pfandcharakter.</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ObligatedForProductFeeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>A tÃ©telt termÃ©kdÃ­j fizetÃ©si kÃ¶telezettsÃ©g terheli.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>The item is liable to product fee.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Der Artikel unterliegt der ProduktgebÃ¼hr</xsl:text>
				</fo:inline>
				<fo:inline>
					<xsl:text>.</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NetaDeclarationTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>A tÃ©tel vonatkozÃ¡sÃ¡ban a Neta tÃ¶rvÃ©nyben (2011. Ã©vi CIII. tÃ¶rvÃ©ny) meghatÃ¡rozott adÃ³fizetÃ©si kÃ¶telezettsÃ©g az eladÃ³t terheli.</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>In the relation of the item, the seller is liable to pay the tax specified in the Neta Act (Act CIII of 2011).</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>In Bezug auf den Artikel ist der VerkÃ¤ufer verpflichtet, die im Neta-Gesetz (Gesetz CIII von 2011) festgelegte Steuer zu zahlen.</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BrandTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>GyÃ¡rtmÃ¡ny / tÃ­pus:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Brand / type:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Marke / Typ:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SerialNumTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>AlvÃ¡zszÃ¡m / gyÃ¡ri szÃ¡m:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Chassis / serial number:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Fahrgestell / Seriennummer:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="EngineNumTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MotorszÃ¡m:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Engine number:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Motornummer:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="FirstEntryIntoServiceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ElsÅ forgalomba helyezÃ©s idÅpontja:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>First entry into service:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Erstinbetriebnahme:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NewTransportMeanTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Ãj kÃ¶zlekedÃ©si eszkÃ¶z</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>New means of transport</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Neuen Verkehrsmitteln</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
		<fo:inline>
			<xsl:text> - </xsl:text>
		</fo:inline>
		<xsl:choose>
			<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>szÃ¡razfÃ¶ldi</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>land vehicle</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>landfahrzeug</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:newTransportMean/n1:vessel)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>vÃ­zi</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>watercraft</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Wasserfahrzeug</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:newTransportMean/n1:aircraft)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>lÃ©gi</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>aircraft</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Flugzeug</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="EngineCapacityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>HengerÅ±rtartalom:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Engine capacity:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Motorleistung:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LengthTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Hossza:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Length:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>LÃ¤nge:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TakeOffWeightTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>FelszÃ¡llÃ¡si tÃ¶meg:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Take off weight:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Start - Masse:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="KmsTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Futott kilomÃ©ter:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Kilometers traveled:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Gefahrene Kilometer:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SailedHoursTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>HajÃ³zott Ã³rÃ¡k:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Sailed hours:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Stunden gesegelt:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="OperationHoursTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>RepÃ¼lt Ã³rÃ¡k:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Aviated hours:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Geflogene Stunden:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="EnginePowerTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TeljesÃ­tmÃ©ny:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Output:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Leistung:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NewTransportException">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Ãfa tÃ¶rvÃ©ny 259.Â§ 25.</xsl:text>
				</fo:inline>
				<xsl:choose>
					<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true()">
						<fo:inline font-weight="bold">
							<xsl:text>b</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
						<fo:inline font-weight="bold">
							<xsl:text>c</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline font-weight="bold">
					<xsl:text>) szerinti kivÃ©tel</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Exception under Section 259 (25)</xsl:text>
				</fo:inline>
				<fo:inline>
					<xsl:text>&#160;</xsl:text>
				</fo:inline>
				<xsl:choose>
					<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true()">
						<fo:inline font-weight="bold">
							<xsl:text>b</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
						<fo:inline font-weight="bold">
							<xsl:text>c</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline>
					<xsl:text>&#160;</xsl:text>
				</fo:inline>
				<fo:inline font-weight="bold">
					<xsl:text>of the VAT Act</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Ausnahme gemÃ¤Ã Â§ 259 Nr.25 Buchstabe</xsl:text>
				</fo:inline>
				<fo:inline>
					<xsl:text>&#160;</xsl:text>
				</fo:inline>
				<xsl:choose>
					<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true()">
						<fo:inline font-weight="bold">
							<xsl:text>b</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
						<fo:inline font-weight="bold">
							<xsl:text>c</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
				<fo:inline font-weight="bold">
					<xsl:text> UStG.</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericExchangeRateOffset">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="translate(replace(format-number(., &apos;##,###,##0.00####&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="format-number(., &apos;##,###,##0.00####&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:value-of select="translate(translate(replace(format-number(., &apos;##,###,##0.00####&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;), &apos; &apos;, &apos;.&apos;)"/>
				</altova:inline-container-substitute>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GPCExciseTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>FÃ¶ldgÃ¡z, villamos energia, szÃ©n jÃ¶vedÃ©ki adÃ³ja forintban: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Excise duty on natural gas, electricity and coal in HUF: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Verbrauchsteuer auf Erdgas, Strom und Kohle in HUF: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BaseTaxNumberTemplate">
		<xsl:for-each select="base:taxpayerId">
			<altova:inline-container-substitute font-weight="bold">
				<xsl:apply-templates/>
			</altova:inline-container-substitute>
		</xsl:for-each>
		<xsl:if test="exists(base:vatCode)">
			<fo:inline>
				<xsl:text>-</xsl:text>
			</fo:inline>
			<xsl:for-each select="base:vatCode">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
		</xsl:if>
		<xsl:if test="exists(base:countyCode)">
			<fo:inline>
				<xsl:text>-</xsl:text>
			</fo:inline>
			<xsl:for-each select="base:countyCode">
				<altova:inline-container-substitute font-weight="bold">
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template name="BaseAddressTemplate">
		<xsl:choose>
			<xsl:when test="exists(base:simpleAddress)">
				<xsl:for-each select="base:simpleAddress">
					<xsl:for-each select="base:countryCode">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
					<xsl:if test="exists(base:region)">
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
						<xsl:for-each select="base:region">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
					</xsl:if>
					<fo:inline font-weight="bold">
						<xsl:text>&#160;</xsl:text>
					</fo:inline>
					<xsl:for-each select="base:postalCode">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
					<fo:inline font-weight="bold">
						<xsl:text>&#160;</xsl:text>
					</fo:inline>
					<xsl:for-each select="base:city">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<fo:inline font-weight="bold">
						<xsl:text>&#160;</xsl:text>
					</fo:inline>
					<xsl:for-each select="base:additionalAddressDetail">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="exists(base:detailedAddress)">
				<xsl:for-each select="base:detailedAddress">
					<xsl:for-each select="base:countryCode">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
					<fo:inline font-weight="bold">
						<xsl:text>&#160;</xsl:text>
					</fo:inline>
					<xsl:if test="exists(base:detailedAddress/base:region)">
						<xsl:for-each select="base:region">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
					</xsl:if>
					<xsl:for-each select="base:postalCode">
						<altova:inline-container-substitute font-weight="bold">
							<xsl:apply-templates/>
						</altova:inline-container-substitute>
					</xsl:for-each>
					<fo:inline font-weight="bold">
						<xsl:text>&#160;</xsl:text>
					</fo:inline>
					<xsl:for-each select="base:city">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<fo:inline font-weight="bold">
						<xsl:text>, </xsl:text>
					</fo:inline>
					<xsl:for-each select="base:streetName">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<fo:inline font-weight="bold">
						<xsl:text>&#160;</xsl:text>
					</fo:inline>
					<xsl:for-each select="base:publicPlaceCategory">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<xsl:if test="exists(base:number)">
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
						<xsl:for-each select="base:number">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:building)">
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
						<xsl:for-each select="base:building">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:staircase)">
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
						<xsl:for-each select="base:staircase">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:floor)">
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
						<xsl:for-each select="base:floor">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:door)">
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
						<xsl:for-each select="base:door">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:lotNumber)">
						<fo:inline font-weight="bold">
							<xsl:text>&#160;</xsl:text>
						</fo:inline>
						<xsl:for-each select="base:lotNumber">
							<altova:inline-container-substitute font-weight="bold">
								<xsl:apply-templates/>
							</altova:inline-container-substitute>
						</xsl:for-each>
					</xsl:if>
					<altova:line-break/>
				</xsl:for-each>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeTakeoverTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>A termÃ©kdÃ­j Ã¡tvÃ¡llalÃ¡s adatai</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Data of the product fee takeover</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Daten der ProduktgebÃ¼hrenÃ¼bernahme</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeCustomerDeclarationTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>A termÃ©kdÃ­j mentesÃ¼lÃ©s adatai</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Product fee charge exemption details</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Einzelheiten zur ProduktgebÃ¼hrenbefreiung</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TakeoverTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ÃtvÃ¡llalÃ¡s irÃ¡nya Ã©s jogszabÃ¡lyi alapja:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Direction and legal base of takeover:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Richtung und Rechtsgrundlage der Ãbernahme:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductStreamTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TermÃ©kÃ¡ram:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Product stream:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Produktstrom:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TakeoverAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ÃtvÃ¡llalt termÃ©kdÃ­j Ã¶sszege forintban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Amount of product fee assumed in HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Summe der Ã¼bernommenen ProduktgebÃ¼hr im HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeWeightTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TermÃ©kdÃ­j kÃ¶teles termÃ©k tÃ¶mege kilogrammban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Weight of product fee obligated product in kg:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Gewicht des produktgebÃ¼hrenpflichtigen Produkts in kg:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeCodeAmount_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>termÃ©kdÃ­j Ã¶sszege: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>product fee amount: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>ProduktgebÃ¼hrenbetrag: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeQuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>mennyisÃ©g: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>quantity: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Anzahl: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>dÃ­jtÃ©tel: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>product fee rate: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>ProduktgebÃ¼hrensatz: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseLocationTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>GÃ¡zolaj beszerzÃ©s helye:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Diesel oil purchase location:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Einkaufsort fÃ¼r DieselÃ¶l:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>GÃ¡zolaj beszerzÃ©s adatai</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Diesel oil purchase data</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Daten zum Kauf von DieselÃ¶l</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>BeszerzÃ©s dÃ¡tuma:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Date of purchase:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Kaufdatum:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseVehicleRegistrationNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>RendszÃ¡m:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Plate number:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Kennzeichen:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilQuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>BÃ©rmunka szolgÃ¡ltatÃ¡s:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Contract work service:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Auftragsarbeiten:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeRateSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>DÃ­jtÃ©tel</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Rate unit</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>GebÃ¼hreneinheit</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeAmountSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TermÃ©kdÃ­j Ã¶sszeg</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Product fee amount</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>ProduktgebÃ¼hr</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeCodeSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TermÃ©kkÃ³d</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Product code</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Produktcode</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductChargeSumTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TermÃ©kdÃ­j Ã¶sszesen: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Product charge sum: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>ProduktgebÃ¼hrensumme: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeOperationTemplate_C5X">
		<xsl:choose>
			<xsl:when test="n1:productFeeOperation = &apos;REFUND&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>A termÃ©kdÃ­j Ã¶sszege visszaigÃ©nylÃ©sre vonatkozik.</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>The amount of the product fee is for a refund.</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>FÃ¼r eine RÃ¼ckerstattung gilt die HÃ¶he der ProduktgebÃ¼hr.</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productFeeOperation = &apos;DEPOSIT&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>A termÃ©kdÃ­j Ã¶sszege raktÃ¡rba tÃ¶rtÃ©nÅ beszÃ¡llÃ­tÃ¡sra vonatkozik.</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>The amount of the product fee applies to delivery to the warehouse.</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Die HÃ¶he der Produktpauschale gilt fÃ¼r die Lieferung an das Lager.</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceDocumentDataTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>TermÃ©kdÃ­j bevallÃ¡sÃ¡t igazolÃ³ dokumentum adatai</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Details of the document certifying the product fee declaration</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline text-decoration="underline">
					<xsl:text>Angaben zum Dokument zur Bescheinigung der ProduktgebÃ¼hrenerklÃ¤rung</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceObligatedTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>KÃ¶telezett adÃ³szÃ¡ma, neve: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Obligated name, tax number: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Obligatorischer Name, Steuernummer: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceObligatedAddressTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>KÃ¶telezett cÃ­me: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Obligor&apos;s address: </xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Adresse des Schuldners: </xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceDocumentNoTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Dokumentum azonosÃ­tÃ³ szÃ¡ma:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Document ID number:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Dokument ID Nummer:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceDocumentDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Dokumentum kelte:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Document date:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Datum des Dokuments:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>TermÃ©kdÃ­j Ã¶sszesÃ­tÅ adatok</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Product fee summary data</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Summierung der ProduktgebÃ¼hren</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>ÃFA</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>VAT</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>MwSt</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceSummaryInHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>Forintban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>In HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Im HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceSummarySumTotalTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>MindÃ¶sszesen:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Sumtotal:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Gesamtsumme:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceSummarySumTotalInHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Forintban:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>In HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Im HUF:</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeMeasuringUnitTemplate_L10N">
		<xsl:choose>
			<xsl:when test=". = &apos;DARAB&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>darab</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>piece</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>stÃ¼ck</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;KG&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>kg</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitOfMeasureValueTemplate_L10N">
		<xsl:choose>
			<xsl:when test=". = &apos;PIECE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Darab</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Piece</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>StÃ¼ck</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;KILOGRAM&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilogramm</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilogram</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilogramm</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;TON&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Tonna</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Ton</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Tonne</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;KWH&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilowatt Ã³ra</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilowatt hour</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilowattstunde</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;DAY&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Nap</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Day</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Tag</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;HOUR&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Ãra</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Hour</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Stunde</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;MINUTE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Perc</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Minute</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Minute</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;MONTH&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>HÃ³nap</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Month</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Monat</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;LITER&apos;">
				<fo:inline font-weight="bold">
					<xsl:text>Liter</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test=". = &apos;KILOMETER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KilomÃ©ter</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilometer</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kilometer</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;CUBIC_METER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>KÃ¶bmÃ©ter</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Cubic meter</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Kubikmeter</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;METER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>MÃ©ter</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Meter</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Meter</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;LINEAR_METER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>FolyÃ³mÃ©ter</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Linear meter</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>laufender Meter</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;CARTON&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Karton</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Carton</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Karton</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;PACK&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Csomag</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Pack</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Pack</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductStreamTemplate_C5X">
		<xsl:choose>
			<xsl:when test="n1:productStream = &apos;BATTERY&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>AkkumulÃ¡tor</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Battery</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Batterie</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;PACKAGING&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>CsomagolÃ³szer</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Packaging</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Verpackungsmaterial</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;OTHER_PETROL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>EgyÃ©b kÅolajtermÃ©k</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Other petroleum product</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Andere ErdÃ¶lprodukte</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;ELECTRONIC&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Elektromos, elektronikai berendezÃ©s</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Electric appliance, electronic equipment</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Elektrische, elektronische AusrÃ¼stung</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;TIRE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Gumiabroncs</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Tire</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Reifen</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;COMMERCIAL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>ReklÃ¡mhordozÃ³ papÃ­r</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Commercial printing paper</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Werbepapier</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;PLASTIC&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>EgyÃ©b mÅ±anyag termÃ©k</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Other plastic product</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Andere Kunstsoffprodukte</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;OTHER_CHEMICAL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>EgyÃ©b vegyipari termÃ©k</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Other chemical product</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Andere chemische Produkte</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;PAPER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Irodai papÃ­r</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>Paper stationery</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<fo:inline font-weight="bold">
							<xsl:text>BÃ¼ropapier</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeSummaryQuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<fo:inline>
					<xsl:text>MennyisÃ©g</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<fo:inline>
					<xsl:text>Quantity</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<fo:inline>
					<xsl:text>Menge</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="@* | node()" mode="altova:copy-table">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="fo:table" mode="altova:copy-table">
		<xsl:choose>
			<xsl:when test="(empty(fo:table-body/fo:table-row) and empty(fo:table-header/fo:table-row) and empty(fo:table-footer/fo:table-row)) or empty(.//fo:table-cell)">				</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:table-header | fo:table-footer" mode="altova:copy-table">
		<xsl:choose>
			<xsl:when test="empty(fo:table-row)">				</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:table-body" mode="altova:copy-table">
		<xsl:choose>
			<xsl:when test="empty(fo:table-row)">
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
					<fo:table-row>
						<fo:table-cell>
							<fo:block/>
						</fo:table-cell>
					</fo:table-row>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:table-row" mode="altova:copy-table">
		<xsl:choose>
			<xsl:when test="empty(fo:table-cell)">
				<xsl:copy>
					<fo:table-cell>
						<fo:block/>
					</fo:table-cell>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:list-item[empty(@break-before)]" mode="second-step">
		<xsl:copy>
			<xsl:choose>
				<xsl:when test=".//altova:page-break">
					<xsl:attribute name="break-before" select="'page'"/>
				</xsl:when>
				<xsl:when test=".//altova:column-break">
					<xsl:attribute name="break-before" select="'column'"/>
				</xsl:when>
			</xsl:choose>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:pdf-bookmark-tree[@generate-from-toc = false()]" mode="second-step">
		<xsl:variable name="altova:pdf-bookmarks">
			<xsl:apply-templates mode="altova:filter-pdf-bookmark-tree"/>
		</xsl:variable>
		<xsl:if test="exists($altova:pdf-bookmarks/fo:bookmark)">
			<fo:bookmark-tree>
				<xsl:copy-of select="$altova:pdf-bookmarks"/>
			</fo:bookmark-tree>
		</xsl:if>
	</xsl:template>
	<xsl:template match="node()" mode="altova:filter-pdf-bookmark-tree">
		<xsl:apply-templates mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:pdf-bookmark" mode="altova:filter-pdf-bookmark-tree">
		<fo:bookmark>
			<xsl:sequence select="@starting-state"/>
			<xsl:variable name="altova:hyperlink" select="altova:hyperlink[1]"/>
			<xsl:choose>
				<xsl:when test="not(exists($altova:hyperlink))">
					<xsl:message select="'Error: Found PDF bookmark without a corresponding hyperlink!'" terminate="yes"/>
					<xsl:attribute name="internal-destination" select="'undefined'"/>
					<fo:bookmark-title/>
				</xsl:when>
				<xsl:when test="not(starts-with($altova:hyperlink/@href,'#'))">
					<xsl:message select="concat('Error: External bookmark destinations (',$altova:hyperlink/@href,') are not supported by FOP 0.93/1.0!')" terminate="yes"/>
					<xsl:attribute name="internal-destination" select="'external-destination-not-supported'"/>
					<fo:bookmark-title>
						<xsl:sequence select="$altova:hyperlink//@color[1] | $altova:hyperlink//@font-style[.='normal' or .='italic'][1] | $altova:hyperlink//@font-weight[.='normal' or .='bold'][1]"/>
						<xsl:value-of select="string($altova:hyperlink)"/>
					</fo:bookmark-title>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="altova:bookmark-name" select="substring($altova:hyperlink/@href,2)"/>
					<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
					<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:design-xslt-tree-view)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
					<xsl:choose>
						<xsl:when test="empty($altova:target-document) or $altova:source-document is $altova:target-document">
							<xsl:attribute name="internal-destination" select="$altova:bookmark-name"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>
							<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',$altova:bookmark-name)"/>
							<xsl:message select="concat('Warning: External bookmark destinations (',$altova:url,') are not supported by FOP 0.93/1.0!')"/>
							<xsl:attribute name="internal-destination" select="'external-destination-not-supported'"/>
						</xsl:otherwise>
					</xsl:choose>
					<fo:bookmark-title>
						<xsl:sequence select="$altova:hyperlink//@color[1] | $altova:hyperlink//@font-style[.='normal' or .='italic'][1] | $altova:hyperlink//@font-weight[.='normal' or .='bold'][1]"/>
						<xsl:value-of select="string($altova:hyperlink)"/>
					</fo:bookmark-title>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:if test="count(altova:hyperlink) gt 1">
				<xsl:message select="concat('Error: Found PDF bookmark (',$altova:hyperlink/@href,') with more than one corresponding hyperlinks!')" terminate="yes"/>
			</xsl:if>
			<xsl:apply-templates mode="#current"/>
		</fo:bookmark>
	</xsl:template>
	<xsl:template match="fo:basic-link" mode="second-step">
		<xsl:choose>
			<xsl:when test="count(node()) eq 1 and fo:block">
				<fo:block>
					<xsl:apply-templates select="fo:block[1]/@*" mode="#current"/>
					<fo:basic-link>
						<xsl:apply-templates select="@*" mode="#current"/>
						<xsl:apply-templates select="fo:block[1]/node()" mode="#current"/>
					</fo:basic-link>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::altova:inline-container-substitute ) or boolean( $altova:child/self::fo:inline ) or boolean( $altova:child/self::fo:inline-container ) or boolean( $altova:child/self::fo:block-container ) or boolean( $altova:child/self::fo:block ) or boolean( $altova:child/self::fo:basic-link ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@number-columns-spanned ) ) then xs:integer( $altova:cell/@number-columns-spanned ) else 1"/>
	</xsl:function>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="@altova:hide-rows | @altova:hide-cols | @altova:is-body-cell" mode="altova:generate-table"/>
	<xsl:template match="fo:table-row" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:choose>
			<xsl:when test="ancestor::fo:table[ 1 ]/@altova:hide-rows = 'empty'">
				<xsl:if test="some $altova:cell in fo:table-cell satisfies not( altova:is-cell-empty( $altova:cell ) )">
					<xsl:copy>
						<xsl:apply-templates select="@* | node()" mode="#current">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
						</xsl:apply-templates>
					</xsl:copy>
				</xsl:if>
			</xsl:when>
			<xsl:when test="ancestor::fo:table[ 1 ]/@altova:hide-rows = 'body-empty'">
				<xsl:if test="not( exists( parent::fo:table-body ) ) or ( some $altova:cell in fo:table-cell[ @altova:is-body-cell = 'true' ] satisfies not( altova:is-cell-empty( $altova:cell ) ) )">
					<xsl:copy>
						<xsl:apply-templates select="@* | node()" mode="#current">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
						</xsl:apply-templates>
					</xsl:copy>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:col-position" as="xs:integer">
		<xsl:param name="altova:Cell" as="element()"/>
		<xsl:param name="altova:TableIndexInfo" as="element()"/>
		<xsl:variable name="altova:nRow" select="altova:GetGridRowNumForCell($altova:Cell)"/>
		<xsl:variable name="altova:nCell" select="count($altova:Cell/preceding-sibling::fo:table-cell) + 1" as="xs:integer"/>
		<xsl:sequence select="$altova:TableIndexInfo/altova:Row[$altova:nRow]/altova:ColumnIndex[$altova:nCell]"/>
	</xsl:function>
	<xsl:template match="fo:table-cell" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:variable name="altova:this-cell" select="."/>
		<xsl:variable name="altova:col-index" select="altova:col-position($altova:this-cell, $altova:TableIndexInfo)"/>
		<xsl:choose>
			<xsl:when test="$altova:generate-cols[ $altova:col-index ]">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
					</xsl:apply-templates>
					<xsl:copy-of select="node()"/>
				</xsl:copy>
			</xsl:when>
			<xsl:when test="altova:col-span( $altova:this-cell ) > 1">
				<xsl:for-each select="for $altova:pos in $altova:col-index to ( $altova:col-index + altova:col-span( $altova:this-cell ) - 1 ) return if ( $altova:generate-cols[ $altova:pos ] ) then true() else ()">
					<fo:table-cell>
						<xsl:apply-templates select="$altova:this-cell/@*" mode="altova:copy-table-cell-properties"/>
						<fo:block/>
					</fo:table-cell>
				</xsl:for-each>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:table-column" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:variable name="altova:col-index" select="count( preceding-sibling::fo:table-column ) + 1"/>
		<xsl:if test="$altova:generate-cols[ $altova:col-index ]">
			<xsl:copy>
				<xsl:apply-templates select="@*" mode="#current">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
				</xsl:apply-templates>
				<xsl:copy-of select="node()"/>
			</xsl:copy>
		</xsl:if>
	</xsl:template>
	<xsl:template match="@number-columns-spanned" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:choose>
			<xsl:when test="exists( ancestor::fo:table[ 1 ]/@altova:hide-cols )">
				<xsl:variable name="altova:col-index" select="altova:col-position(.., $altova:TableIndexInfo)"/>
				<xsl:attribute name="number-columns-spanned" select="sum( for $altova:pos in $altova:col-index to ( $altova:col-index + xs:integer( . ) - 1 ) return if ( $altova:generate-cols[ $altova:pos ] ) then 1 else 0 )"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="number-columns-spanned" select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="@*" mode="altova:copy-table-cell-properties">
		<xsl:copy-of select="."/>
	</xsl:template>
	<xsl:template match="@altova:is-body-cell" mode="altova:copy-table-cell-properties"/>
	<xsl:template match="@number-columns-spanned" mode="altova:copy-table-cell-properties"/>
	<xsl:template match="/">
		<xsl:apply-templates select="$altova:design-xslt-tree-view" mode="second-step"/>
	</xsl:template>
	<xsl:template match="altova:result-document" mode="second-step">
		<xsl:result-document href="{@url}">
			<xsl:apply-templates mode="#current"/>
		</xsl:result-document>
	</xsl:template>
	<xsl:template match="altova:bookmark" mode="second-step">
		<xsl:variable name="bookmark-content">
			<altova:bookmark>
				<xsl:apply-templates select="node()" mode="#current"/>
			</altova:bookmark>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="altova:is-node-empty($bookmark-content/altova:bookmark)">
				<fo:block>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:copy-of select="$bookmark-content/altova:bookmark/node()"/>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:copy-of select="$bookmark-content/altova:bookmark/node()"/>
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:key name="altova:bookmark-key" match="altova:bookmark" use="@name"/>
	<xsl:template match="altova:bookmark/@name" mode="second-step">
		<xsl:attribute name="id" select="."/>
	</xsl:template>
	<xsl:template match="altova:hyperlink" mode="second-step">
		<fo:basic-link>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</fo:basic-link>
	</xsl:template>
	<xsl:template match="altova:hyperlink/@href" mode="second-step">
		<xsl:choose>
			<xsl:when test="not(string(.))">
				<xsl:attribute name="external-destination" select="'url()'"/>
			</xsl:when>
			<xsl:when test="starts-with(.,'#')">
				<xsl:variable name="altova:bookmark-name" select="substring(.,2)"/>
				<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
				<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:design-xslt-tree-view)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
				<xsl:choose>
					<xsl:when test="empty($altova:target-document) or $altova:source-document is $altova:target-document">
						<xsl:attribute name="internal-destination" select="$altova:bookmark-name"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>
						<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',$altova:bookmark-name)"/>
						<xsl:variable name="altova:escaped-url">
							<xsl:call-template name="altova:double-backslash">
								<xsl:with-param name="text" select="$altova:url"/>
								<xsl:with-param name="text-length" select="string-length($altova:url)"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:escaped-url">
					<xsl:choose>
						<xsl:when test="starts-with(.,'\\') or substring(.,2,1)=':'">
							<xsl:value-of select="iri-to-uri(concat('file:///',translate(.,'\','/')))"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="iri-to-uri(.)"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:inline-container-substitute" mode="second-step">
		<xsl:choose>
			<xsl:when test="altova:IsInline(.)">
				<fo:inline>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:IsInline" as="xs:boolean">
		<xsl:param name="nodePassed" as="node()"/>
		<xsl:choose>
			<xsl:when test="(empty(for $i in $nodePassed/child::node() return index-of(('fo:block', 'fo:block-container', 'fo:list-block', 'fo:table'), name($i))) and (every $i in $nodePassed/altova:inline-container-substitute satisfies altova:IsInline($i))) or name($nodePassed/../..) eq 'fo:list-item-body'">
				<xsl:sequence select="true()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="false()"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:template match="altova:main-document" mode="second-step">
		<xsl:apply-templates mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:basic-link-container" mode="second-step">
		<fo:block text-align-last="justify">
			<xsl:apply-templates mode="second-step"/>
		</fo:block>
	</xsl:template>
	<xsl:template match="altova:page-break" mode="second-step">
		<xsl:if test="empty(ancestor::fo:list-item)">
			<fo:block break-after="page"/>
		</xsl:if>
	</xsl:template>
	<xsl:template match="altova:line-break" mode="second-step">
		<xsl:variable name="name-following-sibling" select="name(following-sibling::*[1])"/>
		<xsl:variable name="name-preceding-sibling" select="name(preceding-sibling::*[1])"/>
		<xsl:if test="($name-following-sibling and $name-following-sibling != 'fo:table' and $name-following-sibling != 'altova:line-break' and $name-preceding-sibling != 'altova:basic-link-container') or $name-preceding-sibling = 'altova:line-break'">
			<fo:block>
				<xsl:if test="not($name-preceding-sibling = ('altova:inline-container-substitute', 'fo:inline', 'fo:basic-link', 'altova:bookmark', 'altova:hyperlink', 'altova:user-defined-element')) or not($name-following-sibling = ('altova:inline-container-substitute', 'fo:inline', 'fo:basic-link', 'altova:bookmark', 'altova:hyperlink', 'altova:user-defined-element'))">
					<fo:leader leader-pattern="space"/>
				</xsl:if>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template match="altova:column-break" mode="second-step">
		<xsl:if test="empty(ancestor::fo:list-item)">
			<fo:block break-after="column"/>
		</xsl:if>
	</xsl:template>
	<xsl:template match="altova:user-defined-element" mode="second-step">
		<xsl:apply-templates mode="second-step"/>
	</xsl:template>
	<xsl:function name="altova:calc-relative-path" as="xs:string">
		<xsl:param name="altova:source-path"/>
		<xsl:param name="altova:target-path"/>
		<xsl:choose>
			<xsl:when test="$altova:source-path = $altova:target-path">
				<xsl:sequence select="''"/>
			</xsl:when>
			<xsl:when test="starts-with($altova:target-path,'http:') or starts-with($altova:target-path,'ftp:') or starts-with($altova:target-path,'file:')">
				<xsl:sequence select="$altova:target-path"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:source-parts" select="tokenize($altova:source-path,'[/\\]')"/>
				<xsl:variable name="altova:target-parts" select="tokenize($altova:target-path,'[/\\]')"/>
				<xsl:variable name="altova:common-part-count" select="sum(for $i in (1 to count($altova:source-parts) - 1) return if( subsequence($altova:source-parts,1,$i) = subsequence($altova:target-parts,1,$i) ) then 1 else 0)"/>
				<xsl:sequence select="string-join((for $i in ($altova:common-part-count + 1 to count($altova:source-parts) - 1) return '..',for $i in ($altova:common-part-count + 1 to count($altova:target-parts)) return $altova:target-parts[$i]),'/')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:map-preview-filepath" as="xs:string">
		<xsl:param name="filepath"/>
		<xsl:sequence select="altovaext:create-temp-file-mapping($filepath)" use-when="function-available('altovaext:create-temp-file-mapping',1)"/>
		<xsl:sequence select="$filepath" use-when="not(function-available('altovaext:create-temp-file-mapping',1))"/>
	</xsl:function>
	<xsl:template match="*|@*|comment()|processing-instruction()" mode="second-step">
		<xsl:copy>
			<xsl:apply-templates select="node()|@* except @altova-DisableOutputEscaping" mode="second-step"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="second-step">
		<xsl:choose>
			<xsl:when test="../@altova-DisableOutputEscaping">
				<xsl:value-of select="." disable-output-escaping="yes"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:number" mode="second-step">
		<xsl:number level="single" count="altova:dummy-list-item | fo:list-item" format="{@format}" from="fo:list-block"/>
	</xsl:template>
	<xsl:template match="altova:dummy-list-item" mode="second-step"/>
	<xsl:template match="altova:pdf-file-attach" mode="second-step"/>
	<xsl:function name="altova:AddCompositeStyles">
		<xsl:param name="altova:sStyleList" as="xs:string?"/>
		<xsl:variable name="altova:seqStyles" select="tokenize($altova:sStyleList, ';')" as="xs:string*"/>
		<xsl:for-each select="$altova:seqStyles">
			<xsl:variable name="altova:sStyleName" select="normalize-space(substring-before(., ':'))" as="xs:string?"/>
			<xsl:variable name="altova:sStyleValue" as="xs:string?">
				<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
					<xsl:with-param name="sValue" select="normalize-space(substring-after(., ':'))"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:if test="$altova:sStyleName and $altova:sStyleValue">
				<xsl:attribute name="{$altova:sStyleName}" select="$altova:sStyleValue"/>
			</xsl:if>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:AddDynamicClassStyles">
		<xsl:param name="altova:sClassName" as="xs:string?"/>
		<xsl:variable name="nodeRule" select="$altova:nodeCssClasses/Class[@sSelector eq $altova:sClassName and ($altova:sCssSwitch eq '' or @sFile eq $altova:sCssSwitch)]" as="node()*"/>
		<xsl:if test="$nodeRule">
			<xsl:copy-of select="$nodeRule/Styles/@*"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GetCellFromRow" as="node()?" xpath-default-namespace="">
		<xsl:param name="nodeTableRow" as="node()"/>
		<xsl:param name="nCell" as="xs:integer"/>
		<xsl:sequence select="$nodeTableRow/(fo:table-cell | fo:table-cell)[$nCell]"/>
	</xsl:function>
	<xsl:function name="altova:GetCellsFromRow" as="node()*" xpath-default-namespace="">
		<xsl:param name="nodeTableRow" as="node()"/>
		<xsl:sequence select="$nodeTableRow/(fo:table-cell | fo:table-cell)"/>
	</xsl:function>
	<xsl:function name="altova:GetRowsFromTable" as="node()*" xpath-default-namespace="">
		<xsl:param name="nodeTable" as="node()"/>
		<xsl:sequence select="$nodeTable/(fo:table-header | fo:table-body | fo:table-footer)/fo:table-row"/>
	</xsl:function>
	<xsl:function name="altova:GetRowspanFromCell" as="xs:integer" xpath-default-namespace="">
		<xsl:param name="altova:nodeCell" as="node()"/>
		<xsl:variable name="altova:sRowSpan" select="$altova:nodeCell/@number-rows-spanned" as="xs:string?"/>
		<xsl:variable name="altova:nRowSpan" select="if ($altova:sRowSpan) then xs:integer($altova:sRowSpan) else 1" as="xs:integer"/>
		<xsl:sequence select="$altova:nRowSpan"/>
	</xsl:function>
	<!-- In HTML and FO, the table section order is header, footer, body. This function determines, for a given cell, the number its row would have if the section order were header, body, footer -->
	<xsl:function name="altova:GetGridRowNumForCell" xpath-default-namespace="">
		<xsl:param name="altova:nodeTableCell" as="node()"/>
		<xsl:variable name="altova:nodeTableRow" select="$altova:nodeTableCell/.." as="node()"/>
		<xsl:variable name="altova:nodeTableSection" select="$altova:nodeTableRow/.." as="node()"/>
		<xsl:variable name="altova:sTableSection" select="fn:local-name($altova:nodeTableSection)" as="xs:string"/>
		<xsl:variable name="altova:nodeTable" select="$altova:nodeTableSection/.." as="node()"/>
		<xsl:variable name="altova:nRowNumInSection" select="count($altova:nodeTableRow/preceding-sibling::fo:table-row) + 1" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:sTableSection eq 'table-body'">
				<xsl:sequence select="count($altova:nodeTable/fo:table-header/fo:table-row) + $altova:nRowNumInSection"/>
			</xsl:when>
			<xsl:when test="$altova:sTableSection eq 'table-header'">
				<xsl:sequence select="$altova:nRowNumInSection"/>
			</xsl:when>
			<xsl:when test="$altova:sTableSection eq 'table-footer'">
				<xsl:sequence select="count($altova:nodeTable/fo:table-header/fo:table-row) + count($altova:nodeTable/fo:table-body/fo:table-row) + $altova:nRowNumInSection"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:message select="'Internal Error'" terminate="yes"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:BuildTableIndexInfo" as="node()" xpath-default-namespace="">
		<xsl:param name="altova:nodeTable" as="node()"/>
		<altova:ColumnIndices>
			<xsl:variable name="altova:nodeAllRows" select="altova:GetRowsFromTable($altova:nodeTable/fo:table)" as="node()*"/>
			<xsl:if test="$altova:nodeAllRows">
				<xsl:variable name="altova:seqCellsInFirstRow" select="altova:GetCellsFromRow($altova:nodeAllRows[1])" as="node()*"/>
				<xsl:variable name="altova:nColumnsInTable" select="sum(for $nodeCell in $altova:seqCellsInFirstRow return altova:col-span($nodeCell))" as="xs:integer"/>
				<xsl:variable name="altova:seqActiveRowSpans" select="for $Cell in 1 to $altova:nColumnsInTable return 0" as="xs:integer*"/>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_Recursive($altova:nodeAllRows, 1, $altova:seqActiveRowSpans)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_Recursive">
					<xsl:with-param name="altova:nodeTableRows" select="$altova:nodeAllRows"/>
					<xsl:with-param name="altova:nRow" select="1"/>
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
				</xsl:call-template>
			</xsl:if>
		</altova:ColumnIndices>
	</xsl:function>
	<!--xsl:template name="altova:BuildTableIndexInfo_Recursive" as="node()*" xpath-default-namespace=""-->
	<xsl:template name="altova:BuildTableIndexInfo_Recursive" xpath-default-namespace="">
		<xsl:param name="altova:nodeTableRows" as="node()*"/>
		<xsl:param name="altova:nRow" as="xs:integer"/>
		<xsl:param name="altova:seqActiveRowSpans" as="xs:integer*"/>
		<xsl:variable name="altova:nodeRow" select="$altova:nodeTableRows[$altova:nRow]" as="node()?"/>
		<xsl:choose>
			<xsl:when test="empty($altova:nodeRow)">
				<xsl:sequence select="()"/>
			</xsl:when>
			<xsl:when test="empty(altova:GetCellFromRow($altova:nodeRow, 1))">
				<xsl:sequence select="()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:nodeCell1" select="altova:GetCellFromRow($altova:nodeRow, 1)" as="node()?"/>
				<xsl:variable name="altova:nColSpan" select="altova:col-span($altova:nodeCell1)" as="xs:integer"/>
				<altova:Row>
					<!--xsl:variable name="altova:seqColumnIndicesOfCurrentRow" select="altova:BuildTableIndexInfo_SingleRow_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, 1, 1, $altova:nColSpan, true(), 0, 0)" as="node()*"/>
						<xsl:sequence select="$altova:seqColumnIndicesOfCurrentRow"/-->
					<xsl:call-template name="altova:BuildTableIndexInfo_SingleRow_Recursive">
						<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
						<xsl:with-param name="altova:nodeRow" select="$altova:nodeRow"/>
						<xsl:with-param name="altova:nColumn" select="1"/>
						<xsl:with-param name="altova:nCellInCurrentRow" select="1"/>
						<xsl:with-param name="altova:nColSpanInCellRemaining" select="$altova:nColSpan"/>
						<xsl:with-param name="altova:bColSpanBegins" select="true()"/>
						<xsl:with-param name="altova:nCurrentSum" select="0"/>
						<xsl:with-param name="altova:nRowSpansToAdd" select="0"/>
					</xsl:call-template>
				</altova:Row>
				<xsl:variable name="altova:seqActiveRowSpans_New" select="altova:BuildTableIndexInfo_ActiveRowSpans_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, 1, 1, $altova:nColSpan)" as="xs:integer*"/>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_Recursive($altova:nodeTableRows, $altova:nRow + 1, $altova:seqActiveRowSpans_New)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_Recursive">
					<xsl:with-param name="altova:nodeTableRows" select="$altova:nodeTableRows"/>
					<xsl:with-param name="altova:nRow" select="$altova:nRow + 1"/>
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans_New"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!--xsl:template name="altova:BuildTableIndexInfo_SingleRow_Recursive" as="node()*" xpath-default-namespace=""-->
	<xsl:template name="altova:BuildTableIndexInfo_SingleRow_Recursive" xpath-default-namespace="">
		<xsl:param name="altova:seqActiveRowSpans" as="xs:integer*"/>
		<xsl:param name="altova:nodeRow" as="node()"/>
		<xsl:param name="altova:nColumn" as="xs:integer"/>
		<xsl:param name="altova:nCellInCurrentRow" as="xs:integer"/>
		<xsl:param name="altova:nColSpanInCellRemaining" as="xs:integer"/>
		<xsl:param name="altova:bColSpanBegins" as="xs:boolean"/>
		<!-- Also true if it's just a single cell -->
		<xsl:param name="altova:nCurrentSum" as="xs:integer"/>
		<xsl:param name="altova:nRowSpansToAdd" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:nColumn gt count($altova:seqActiveRowSpans)">
				<xsl:sequence select="()"/>
			</xsl:when>
			<!-- If the cell is not under a rowspan -->
			<xsl:when test="$altova:seqActiveRowSpans[$altova:nColumn] eq 0">
				<!-- If the cell is not under a colspan -->
				<xsl:if test="$altova:bColSpanBegins eq true()">
					<!-- A non-spanned cell starts in this column -->
					<altova:ColumnIndex>
						<xsl:sequence select="$altova:nCurrentSum + 1"/>
					</altova:ColumnIndex>
				</xsl:if>
				<xsl:variable name="altova:nCellInCurrentRow_New" select="if ($altova:nColSpanInCellRemaining gt 1) then $altova:nCellInCurrentRow else $altova:nCellInCurrentRow + 1" as="xs:integer"/>
				<xsl:variable name="altova:nColSpanInCell_New" select="if ($altova:nColSpanInCellRemaining gt 1) then $altova:nColSpanInCellRemaining - 1 else if (empty(altova:GetCellFromRow($altova:nodeRow, $altova:nCellInCurrentRow_New))) then 1 else altova:col-span(altova:GetCellFromRow($altova:nodeRow, $altova:nCellInCurrentRow_New))" as="xs:integer"/>
				<xsl:variable name="altova:bColSpanBegins_New" select="$altova:nCellInCurrentRow ne $altova:nCellInCurrentRow_New" as="xs:boolean"/>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_SingleRow_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, $altova:nColumn + 1, $altova:nCellInCurrentRow_New, $altova:nColSpanInCell_New, $altova:bColSpanBegins_New, $altova:nCurrentSum + 1, $altova:nRowSpansToAdd)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_SingleRow_Recursive">
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
					<xsl:with-param name="altova:nodeRow" select="$altova:nodeRow"/>
					<xsl:with-param name="altova:nColumn" select="$altova:nColumn + 1"/>
					<xsl:with-param name="altova:nCellInCurrentRow" select="$altova:nCellInCurrentRow_New"/>
					<xsl:with-param name="altova:nColSpanInCellRemaining" select="$altova:nColSpanInCell_New"/>
					<xsl:with-param name="altova:bColSpanBegins" select="$altova:bColSpanBegins_New"/>
					<xsl:with-param name="altova:nCurrentSum" select="$altova:nCurrentSum + 1"/>
					<xsl:with-param name="altova:nRowSpansToAdd" select="$altova:nRowSpansToAdd"/>
				</xsl:call-template>
			</xsl:when>
			<!-- The cell is under a rowspan -->
			<xsl:otherwise>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_SingleRow_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, $altova:nColumn + 1, $altova:nCellInCurrentRow, $altova:nColSpanInCellRemaining, $altova:bColSpanBegins, $altova:nCurrentSum + 1, $altova:nRowSpansToAdd + 1)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_SingleRow_Recursive">
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
					<xsl:with-param name="altova:nodeRow" select="$altova:nodeRow"/>
					<xsl:with-param name="altova:nColumn" select="$altova:nColumn + 1"/>
					<xsl:with-param name="altova:nCellInCurrentRow" select="$altova:nCellInCurrentRow"/>
					<xsl:with-param name="altova:nColSpanInCellRemaining" select="$altova:nColSpanInCellRemaining"/>
					<xsl:with-param name="altova:bColSpanBegins" select="$altova:bColSpanBegins"/>
					<xsl:with-param name="altova:nCurrentSum" select="$altova:nCurrentSum + 1"/>
					<xsl:with-param name="altova:nRowSpansToAdd" select="$altova:nRowSpansToAdd + 1"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:BuildTableIndexInfo_ActiveRowSpans_Recursive" as="xs:integer*" xpath-default-namespace="">
		<xsl:param name="altova:seqRowSpans" as="xs:integer*"/>
		<xsl:param name="altova:nodeCurrentRow" as="node()"/>
		<xsl:param name="altova:nColumn" as="xs:integer"/>
		<xsl:param name="altova:nCellInCurrentRow" as="xs:integer"/>
		<xsl:param name="altova:nColSpanInCellRemaining" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:nColumn gt count($altova:seqRowSpans)">
				<xsl:sequence select="()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:nRowSpanForCurrentColumn" select="altova:BuildTableIndexInfo_ActiveRowSpans_SingleColumn($altova:seqRowSpans, $altova:nodeCurrentRow, $altova:nColumn, $altova:nCellInCurrentRow)" as="xs:integer?"/>
				<xsl:sequence select="$altova:nRowSpanForCurrentColumn"/>
				<xsl:variable name="altova:nCellInCurrentRow_New" select="if ($altova:seqRowSpans[$altova:nColumn] eq 0 and $altova:nColSpanInCellRemaining eq 1) then $altova:nCellInCurrentRow + 1 else $altova:nCellInCurrentRow" as="xs:integer"/>
				<xsl:variable name="altova:nColSpanInCell_New" select="if ($altova:seqRowSpans[$altova:nColumn] eq 0 and $altova:nCellInCurrentRow eq $altova:nCellInCurrentRow_New) then $altova:nColSpanInCellRemaining - 1 else if (empty(altova:GetCellFromRow($altova:nodeCurrentRow, $altova:nCellInCurrentRow_New))) then 1 else altova:col-span(altova:GetCellFromRow($altova:nodeCurrentRow, $altova:nCellInCurrentRow_New))" as="xs:integer"/>
				<xsl:sequence select="altova:BuildTableIndexInfo_ActiveRowSpans_Recursive($altova:seqRowSpans, $altova:nodeCurrentRow, $altova:nColumn + 1, $altova:nCellInCurrentRow_New, $altova:nColSpanInCell_New)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:BuildTableIndexInfo_ActiveRowSpans_SingleColumn" as="xs:integer?" xpath-default-namespace="">
		<xsl:param name="altova:seqRowSpans" as="xs:integer*"/>
		<xsl:param name="altova:nodeCurrentRow" as="node()"/>
		<xsl:param name="altova:nColumn" as="xs:integer"/>
		<xsl:param name="altova:nCellInCurrentRow" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:seqRowSpans[$altova:nColumn] gt 0">
				<xsl:sequence select="$altova:seqRowSpans[$altova:nColumn] - 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:nodeCell" select="altova:GetCellFromRow($altova:nodeCurrentRow, $altova:nCellInCurrentRow)" as="node()"/>
				<xsl:sequence select="altova:GetRowspanFromCell($altova:nodeCell) - 1"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:variable name="altova:nDefaultFontSizePt" as="xs:integer" select="12"/>
	<xsl:variable name="altova:nCmPerIn" as="xs:double" select="2.54"/>
	<xsl:variable name="altova:nPercentPerEm" as="xs:integer" select="100"/>
	<xsl:variable name="altova:nPercentPerEx" as="xs:integer" select="50"/>
	<xsl:variable name="altova:nPtPerPc" as="xs:integer" select="12"/>
	<xsl:variable name="altova:nPtPerIn" as="xs:integer" select="72"/>
	<xsl:template match="altova:Footnote" mode="second-step">
		<fo:footnote>
			<xsl:variable name="altova:nodeDocumentRoot" as="node()" select="if (ancestor::altova:result-document) then ancestor::altova:result-document[1] else /altova:main-document"/>
			<fo:inline>
				<xsl:copy-of select="@*"/>
				<fo:inline vertical-align="super" font-size="8">
					<xsl:number format="1" level="any" count="altova:Footnote[some $anc in ancestor::* satisfies $anc is $altova:nodeDocumentRoot]"/>
				</fo:inline>
			</fo:inline>
			<fo:footnote-body>
				<fo:block>
					<xsl:copy-of select="@*"/>
					<fo:inline vertical-align="super" font-size="8">
						<xsl:number format="1" level="any" count="altova:Footnote[some $anc in ancestor::* satisfies $anc is $altova:nodeDocumentRoot]"/>
					</fo:inline>
					<xsl:apply-templates mode="#current"/>
				</fo:block>
			</fo:footnote-body>
		</fo:footnote>
	</xsl:template>
	<xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), true())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitEmExPercentToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), false())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitEmExToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), true())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitPercentToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsUnroundedCore" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:param name="bAcceptEmEx" as="xs:boolean"/>
		<xsl:param name="bAcceptPercent" as="xs:boolean"/>
		<xsl:variable name="sLengthNormalized" as="xs:string" select="normalize-space($sLength)"/>
		<xsl:choose>
			<xsl:when test="matches($sLengthNormalized, '^\d+(\.\d+)?[a-zA-Z%]+$')">
				<xsl:variable name="nValue" select="number(replace($sLengthNormalized, '([a-zA-Z%])+', ''))"/>
				<xsl:variable name="sUnit" select="replace($sLengthNormalized, '(\d+(\.\d+)?)', '')"/>
				<xsl:choose>
					<xsl:when test="$sUnit = 'cm'">
						<xsl:value-of select="altova:MapUnitCmToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'in'">
						<xsl:value-of select="altova:MapUnitInToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'mm'">
						<xsl:value-of select="altova:MapUnitMmToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'pc'">
						<xsl:value-of select="altova:MapUnitPcToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'pt'">
						<xsl:value-of select="$nValue"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'px'">
						<xsl:value-of select="altova:MapUnitPxToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'em' and $bAcceptEmEx = true()">
						<xsl:value-of select="altova:MapUnitEmToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'ex' and $bAcceptEmEx = true()">
						<xsl:value-of select="altova:MapUnitExToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = '%' and $bAcceptPercent = true()">
						<xsl:value-of select="altova:MapUnitPercentToPt($nValue)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="-1"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="-1"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsWithUnit" as="xs:string">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:variable name="dPoints" as="xs:double" select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>
		<xsl:sequence select="concat(xs:string(round($dPoints * 100) div 100), 'pt')"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsWithUnit_AbsentOk" as="xs:string">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitToPointsWithUnit($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapUnitCmToPt" as="xs:double">
		<xsl:param name="dCm" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitInToPt($dCm div $altova:nCmPerIn)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitEmToPt" as="xs:double">
		<xsl:param name="dEm" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitPercentToPt($dEm * $altova:nPercentPerEm)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitExToPt" as="xs:double">
		<xsl:param name="dEx" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitPercentToPt($dEx * $altova:nPercentPerEx)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitInToPt" as="xs:double">
		<xsl:param name="dIn" as="xs:double"/>
		<xsl:sequence select="$dIn * $altova:nPtPerIn"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitMmToPt" as="xs:double">
		<xsl:param name="dMm" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitCmToPt($dMm div 10)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitPcToPt" as="xs:double">
		<xsl:param name="dPc" as="xs:double"/>
		<xsl:sequence select="$dPc * $altova:nPtPerPc"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitPercentToPt" as="xs:double">
		<xsl:param name="dPercent" as="xs:double"/>
		<xsl:sequence select="$dPercent div 100 * $altova:nDefaultFontSizePt"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitPxToPt" as="xs:double">
		<xsl:param name="dPx" as="xs:double"/>
		<xsl:sequence select="$dPx div $altova:nPxPerIn * $altova:nPtPerIn"/>
	</xsl:function>
	<xsl:function name="altova:Sqrt" as="xs:double">
		<xsl:param name="nValue" as="xs:double"/>
		<xsl:sequence select="altova:SqrtRecursive($nValue, $nValue)"/>
	</xsl:function>
	<xsl:function name="altova:SqrtRecursive" as="xs:double">
		<xsl:param name="nValue" as="xs:double"/>
		<xsl:param name="nApprox" as="xs:double"/>
		<xsl:choose>
			<xsl:when test="abs($nApprox * $nApprox - $nValue) lt 0.01">
				<xsl:sequence select="$nApprox"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="altova:SqrtRecursive($nValue, ($nValue div $nApprox + $nApprox) div 2)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
