<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2022 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altova-xfi="http://www.altova.com/xslt-extensions/xbrl" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:array="http://www.w3.org/2005/xpath-functions/array" xmlns:base="http://schemas.nav.gov.hu/OSA/3.0/base" xmlns:clitype="clitype" xmlns:common="http://schemas.nav.gov.hu/NTCA/1.0/common" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:n1="http://schemas.nav.gov.hu/OSA/3.0/data" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xff="http://www.xbrl.org/2010/function/formula" xmlns:xfi="http://www.xbrl.org/2008/function/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;#160;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="altova:bGeneratingMime" as="xs:boolean" select="false()"/>
	<xsl:param name="altova:execution-guid" as="xs:string">
		<xsl:sequence select="altovaext:generate-guid()" use-when="function-available('altovaext:generate-guid', 0)"/>
		<xsl:sequence select="'00000000-0000-0000-0000-NON0UNIQUE00'" use-when="not(function-available('altovaext:generate-guid', 0))"/>
	</xsl:param>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;InvoiceDataTemplate&apos;" as="xs:string?"/>
	<xsl:param name="lang"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:decimal-format name="format1" grouping-separator="Â " decimal-separator=","/>
	<xsl:import-schema schema-location="altova://file_resource/NTCA_Github_invoiceData.XSD" use-when="system-property('xsl:is-schema-aware')='yes'" namespace="http://schemas.nav.gov.hu/OSA/3.0/data"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2022 (x64) (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=9"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:10mm; margin-right:10mm; margin-top:35mm; margin-bottom:20mm } @media print { br.altova-page-break { page-break-before: always; } div.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body style="font-family:Tahoma; font-size:8pt; ">
				<xsl:choose>
					<xsl:when test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:InvoiceData">
								<div>
									<xsl:call-template name="InvoiceNumberTemplate_L10N"/>
									<xsl:for-each select="n1:invoiceNumber">
										<span style="font-weight:bold; ">
											<xsl:apply-templates/>
										</span>
									</xsl:for-each>
								</div>
								<div>
									<xsl:call-template name="InvoiceIssueDateTemplate_L10N"/>
									<xsl:for-each select="n1:invoiceIssueDate">
										<xsl:call-template name="GenericDateOffset_Outer"/>
									</xsl:for-each>
								</div>
								<div>
									<xsl:call-template name="InvoiceClassificationTemplate_C5X"/>
								</div>
								<xsl:choose>
									<xsl:when test="not(exists(n1:invoiceMain/n1:invoice))">
										<xsl:for-each select="n1:invoiceMain">
											<xsl:variable name="maxBatchIndex" select="max(n1:batchInvoice/n1:batchIndex)"/>
											<xsl:for-each-group group-by="n1:batchIndex" select="n1:batchInvoice">
												<xsl:sort select="n1:batchIndex" data-type="number" order="ascending"/>
												<xsl:for-each select="current-group()">
													<div style="padding-top:0.5cm; ">
														<xsl:call-template name="BatchIndexTemplate_L10N"/>
														<xsl:for-each select="n1:batchIndex">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</div>
													<xsl:apply-templates select="n1:invoice"/>
													<xsl:if test="n1:batchIndex != $maxBatchIndex">
														<br class="altova-page-break" clear="all"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:for-each-group>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="n1:invoiceMain">
											<xsl:apply-templates select="n1:invoice"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
							<br/>
						</xsl:for-each>
					</xsl:when>
					<xsl:when test="/*/namespace::*[name()=&apos;&apos;] != &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos;">
						<div style="color:red; font-size:14pt; letter-spacing:2pt; padding-top:2cm; text-align:justify; ">
							<xsl:call-template name="NamespaceErrorTemplate_L10N"/>
						</div>
					</xsl:when>
					<xsl:when test="$lang != (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
						<div style="color:red; font-size:14pt; letter-spacing:2pt; padding-top:2cm; text-align:justify; ">
							<xsl:call-template name="DisplayErrorTemplate_L10N"/>
						</div>
					</xsl:when>
				</xsl:choose>
			</body>
		</html>
	</xsl:template>
	<xsl:template match="n1:invoice">
		<xsl:variable name="CurrencyCodeValue" select="n1:invoiceHead/n1:invoiceDetail/n1:currencyCode"/>
		<xsl:variable name="ProductFeeSummaryCount" select="count(n1:productFeeSummary)"/>
		<xsl:if test="exists(n1:invoiceReference)">
			<xsl:for-each select="n1:invoiceReference">
				<div>
					<xsl:call-template name="OriginalInvoiceNumberTemplate_L10N"/>
					<xsl:for-each select="n1:originalInvoiceNumber">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
				</div>
				<div>
					<xsl:call-template name="ModificationIndexTemplate_L10N"/>
					<xsl:for-each select="n1:modificationIndex">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
				</div>
			</xsl:for-each>
		</xsl:if>
		<xsl:for-each select="n1:invoiceHead">
			<div style="padding-bottom:5mm; padding-top:5mm; ">
				<xsl:variable name="altova:table">
					<table style="border-collapse:collapse; border-style:none; " border="1" width="100%">
						<xsl:variable name="altova:CurrContextGrid_0" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr style="font-size:10pt; ">
								<td style="border-style:none; text-align:center; width:85.5mm; ">
									<xsl:call-template name="SellerTemplate_L10N"/>
								</td>
								<td style="border-style:none; text-align:center; width:19mm; "/>
								<td style="border-style:none; text-align:center; width:85.5mm; ">
									<xsl:call-template name="BuyerTemplate_L10N"/>
								</td>
							</tr>
							<tr>
								<td style="border-color:black; border-style:solid; vertical-align:top; width:85.5mm; ">
									<xsl:for-each select="n1:supplierInfo">
										<br/>
										<xsl:choose>
											<xsl:when test="not(exists(n1:groupMemberTaxNumber))">
												<xsl:call-template name="TaxNumberTemplate_L10N"/>
											</xsl:when>
											<xsl:when test="exists(n1:groupMemberTaxNumber)">
												<xsl:call-template name="TaxNumberGroupTemplate_L10N"/>
											</xsl:when>
										</xsl:choose>
										<xsl:for-each select="n1:supplierTaxNumber">
											<xsl:call-template name="BaseTaxNumberTemplate"/>
										</xsl:for-each>
										<xsl:if test="exists(n1:communityVatNumber)">
											<br/>
											<xsl:call-template name="CommunityVatNumberTemplate_L10N"/>
											<xsl:for-each select="n1:communityVatNumber">
												<span style="font-weight:bold; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</xsl:if>
										<xsl:if test="exists(n1:groupMemberTaxNumber)">
											<br/>
											<xsl:call-template name="GroupMemberTaxNumberTemplate_L10N"/>
											<xsl:for-each select="n1:groupMemberTaxNumber">
												<xsl:call-template name="BaseTaxNumberTemplate"/>
											</xsl:for-each>
										</xsl:if>
										<xsl:if test="exists(n1:exciseLicenceNum)">
											<br/>
											<xsl:call-template name="ExciseLicensNumberTemplate_L10N"/>
											<xsl:for-each select="n1:exciseLicenceNum">
												<span style="font-weight:bold; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</xsl:if>
										<br/>
										<br/>
										<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
										<xsl:for-each select="n1:supplierName">
											<span style="font-weight:bold; ">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
										<xsl:if test="../n1:invoiceDetail/n1:smallBusinessIndicator = true()">
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
											<xsl:call-template name="SmallBusinessIndicatorTemplate_L10N"/>
										</xsl:if>
										<xsl:if test="n1:individualExemption = true()">
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
											<xsl:call-template name="IndividualExemptionTemplate_L10N"/>
										</xsl:if>
										<br/>
										<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
										<xsl:for-each select="n1:supplierAddress">
											<xsl:call-template name="BaseAddressTemplate"/>
										</xsl:for-each>
										<xsl:if test="exists(n1:supplierBankAccountNumber)">
											<br/>
											<xsl:call-template name="BankAccountNumberTemplate_L10N"/>
											<xsl:for-each select="n1:supplierBankAccountNumber">
												<span style="font-weight:bold; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</xsl:if>
									</xsl:for-each>
									<br/>
								</td>
								<td style="border-style:none; width:19mm; "/>
								<td style="border-color:black; border-style:solid; vertical-align:top; width:85.5mm; ">
									<xsl:for-each select="n1:customerInfo">
										<br/>
										<xsl:choose>
											<xsl:when test="n1:customerVatStatus != &apos;PRIVATE_PERSON&apos; and exists(n1:customerVatData/n1:customerTaxNumber)">
												<xsl:choose>
													<xsl:when test="not(exists(n1:customerVatData/n1:customerTaxNumber/n1:groupMemberTaxNumber))">
														<xsl:call-template name="TaxNumberTemplate_L10N"/>
													</xsl:when>
													<xsl:when test="exists(n1:customerVatData/n1:customerTaxNumber/n1:groupMemberTaxNumber)">
														<xsl:call-template name="TaxNumberGroupTemplate_L10N"/>
													</xsl:when>
												</xsl:choose>
												<xsl:for-each select="n1:customerVatData">
													<xsl:for-each select="n1:customerTaxNumber">
														<xsl:call-template name="BaseTaxNumberTemplate"/>
														<xsl:if test="exists(n1:groupMemberTaxNumber)">
															<br/>
															<xsl:call-template name="GroupMemberTaxNumberTemplate_L10N"/>
															<xsl:for-each select="n1:groupMemberTaxNumber">
																<xsl:call-template name="BaseTaxNumberTemplate"/>
															</xsl:for-each>
														</xsl:if>
														<br/>
													</xsl:for-each>
												</xsl:for-each>
												<br/>
												<xsl:if test="exists(n1:customerName)">
													<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
													<xsl:for-each select="n1:customerName">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:if>
												<br/>
												<xsl:if test="exists(n1:customerAddress)">
													<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
													<xsl:for-each select="n1:customerAddress">
														<xsl:call-template name="BaseAddressTemplate"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:when>
											<xsl:when test="n1:customerVatStatus != &apos;PRIVATE_PERSON&apos; and exists(n1:customerVatData/n1:communityVatNumber)">
												<xsl:call-template name="CommunityVatNumberTemplate_L10N"/>
												<xsl:for-each select="n1:customerVatData">
													<xsl:for-each select="n1:communityVatNumber">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
												<br/>
												<br/>
												<xsl:if test="exists(n1:customerName)">
													<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
													<xsl:for-each select="n1:customerName">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:if>
												<br/>
												<xsl:if test="exists(n1:customerAddress)">
													<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
													<xsl:for-each select="n1:customerAddress">
														<xsl:call-template name="BaseAddressTemplate"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:when>
											<xsl:when test="n1:customerVatStatus != &apos;PRIVATE_PERSON&apos; and exists(n1:customerVatData/n1:thirdStateTaxId)">
												<xsl:call-template name="ThirdStateTaxIdTemplate_L10N"/>
												<xsl:for-each select="n1:customerVatData">
													<xsl:for-each select="n1:thirdStateTaxId">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
												<br/>
												<br/>
												<xsl:if test="exists(n1:customerName)">
													<xsl:call-template name="InvoiceHeadNameTemplate_L10N"/>
													<xsl:for-each select="n1:customerName">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:if>
												<br/>
												<xsl:if test="exists(n1:customerAddress)">
													<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
													<xsl:for-each select="n1:customerAddress">
														<xsl:call-template name="BaseAddressTemplate"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:when>
											<xsl:when test="n1:customerVatStatus = &apos;PRIVATE_PERSON&apos;">
												<xsl:call-template name="PrivatePersonTemplate_L10N"/>
												<br/>
											</xsl:when>
										</xsl:choose>
										<xsl:if test="exists(n1:customerBankAccountNumber)">
											<br/>
											<xsl:call-template name="BankAccountNumberTemplate_L10N"/>
											<xsl:for-each select="n1:customerBankAccountNumber">
												<span style="font-weight:bold; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</xsl:if>
									</xsl:for-each>
								</td>
							</tr>
							<xsl:choose>
								<xsl:when test="exists(n1:fiscalRepresentativeInfo)">
									<tr>
										<td style="border-color:black; border-style:solid; width:85.5mm; ">
											<xsl:for-each select="n1:fiscalRepresentativeInfo">
												<xsl:call-template name="FiscalRepresentativeNameTemplate_L10N"/>
												<xsl:for-each select="n1:fiscalRepresentativeName">
													<span style="font-weight:bold; ">
														<xsl:apply-templates/>
													</span>
												</xsl:for-each>
												<br/>
												<xsl:call-template name="TaxNumberTemplate_L10N"/>
												<xsl:for-each select="n1:fiscalRepresentativeTaxNumber">
													<xsl:call-template name="BaseTaxNumberTemplate"/>
												</xsl:for-each>
												<br/>
												<xsl:call-template name="InvoiceHeadAddressTemplate_L10N"/>
												<xsl:for-each select="n1:fiscalRepresentativeAddress">
													<xsl:call-template name="BaseAddressTemplate"/>
												</xsl:for-each>
												<xsl:if test="exists(n1:fiscalRepresentativeBankAccountNumber)">
													<xsl:call-template name="BankAccountNumberTemplate_L10N"/>
													<xsl:for-each select="n1:fiscalRepresentativeBankAccountNumber">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:if>
											</xsl:for-each>
										</td>
										<td style="border-style:none; width:19mm; "/>
										<td style="border-style:none; width:85.5mm; "/>
									</tr>
								</xsl:when>
								<xsl:otherwise/>
							</xsl:choose>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
				<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
					<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
					</xsl:apply-templates>
				</xsl:variable>
				<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
			</div>
			<xsl:for-each select="n1:invoiceDetail">
				<div>
					<xsl:variable name="altova:table">
						<table style="border-collapse:collapse; border-style:none; " border="1" width="100%">
							<xsl:variable name="altova:CurrContextGrid_1" select="."/>
							<xsl:variable name="altova:ColumnData"/>
							<tbody>
								<tr>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="InvoiceCategoryTemplate"/>
									</td>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="InvoiceAppearanceTemplate"/>
									</td>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:if test="n1:selfBillingIndicator = true()">
											<xsl:call-template name="SelfBillingIncidatorTemplate_L10N"/>
										</xsl:if>
									</td>
								</tr>
								<tr>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="InvoiceDeliveryDateTemplate_L10N"/>
										<xsl:choose>
											<xsl:when test="n1:invoiceCategory != &apos;AGGREGATE&apos;">
												<xsl:for-each select="n1:invoiceDeliveryDate">
													<xsl:call-template name="GenericDateOffset_Inner"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:when test="n1:invoiceCategory = &apos;AGGREGATE&apos;">
												<xsl:call-template name="AggregateInstructionsTemplate_L10N"/>
											</xsl:when>
										</xsl:choose>
									</td>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="InvoiceAccountingDeliveryDateTemplate_L10N"/>
										<xsl:for-each select="n1:invoiceAccountingDeliveryDate">
											<xsl:call-template name="GenericDateOffset_Inner"/>
										</xsl:for-each>
									</td>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:if test="n1:cashAccountingIndicator = true()">
											<xsl:call-template name="CashAccountingIndicatorTemplate_L10N"/>
										</xsl:if>
									</td>
								</tr>
								<xsl:choose>
									<xsl:when test="exists(n1:invoiceDeliveryPeriodStart) or exists(n1:invoiceDeliveryPeriodEnd) or n1:periodicalSettlement = true()">
										<tr>
											<td style="border-style:none; width:62.7mm; ">
												<xsl:call-template name="InvoiceDeliveryPeriodStartTemplate_L10N"/>
												<xsl:for-each select="n1:invoiceDeliveryPeriodStart">
													<xsl:call-template name="GenericDateOffset_Inner"/>
												</xsl:for-each>
											</td>
											<td style="border-style:none; width:62.7mm; ">
												<xsl:call-template name="InvoiceDeliveryPeriodEndTemplate_L10N"/>
												<xsl:for-each select="n1:invoiceDeliveryPeriodEnd">
													<xsl:call-template name="GenericDateOffset_Inner"/>
												</xsl:for-each>
											</td>
											<td style="border-style:none; width:62.7mm; ">
												<xsl:if test="n1:periodicalSettlement = true()">
													<xsl:call-template name="PeriodicalSettlementTemplate_L10N"/>
												</xsl:if>
											</td>
										</tr>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<tr>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="PaymentMethodTemplate_C5X"/>
									</td>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="PaymentDateTemplate_L10N"/>
										<xsl:for-each select="n1:paymentDate">
											<xsl:call-template name="GenericDateOffset_Inner"/>
										</xsl:for-each>
									</td>
									<td rowspan="2" style="border-style:none; vertical-align:top; width:62.7mm; ">
										<xsl:if test="n1:utilitySettlementIndicator = true()">
											<xsl:call-template name="UtilitySettlementIndicatorTemplate_L10N"/>
										</xsl:if>
									</td>
								</tr>
								<tr>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="CurrencyCodeTemplate_L10N"/>
										<xsl:for-each select="n1:currencyCode">
											<span style="font-weight:bold; ">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
									</td>
									<td style="border-style:none; width:62.7mm; ">
										<xsl:call-template name="ExchangeRateTemplate_L10N"/>
										<xsl:choose>
											<xsl:when test="n1:invoiceCategory != &apos;AGGREGATE&apos;">
												<xsl:for-each select="n1:exchangeRate">
													<xsl:call-template name="GenericExchangeRateOffset"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:when test="n1:invoiceCategory = &apos;AGGREGATE&apos;">
												<xsl:call-template name="AggregateInstructionsTemplate_L10N"/>
											</xsl:when>
										</xsl:choose>
									</td>
								</tr>
							</tbody>
						</table>
					</xsl:variable>
					<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
					<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
					<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
					<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
						</xsl:apply-templates>
					</xsl:variable>
					<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
				</div>
				<div style="padding-top:5mm; ">
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:orderNumbers)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1" altova:hide-rows="body-empty" altova:hide-cols="body-empty">
								<xsl:variable name="altova:CurrContextGrid_2" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:orderNumbers">
											<xsl:for-each select="n1:orderNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoOrderNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" xpath-default-namespace="">
							<xsl:choose>
								<xsl:when test="$altova:table/table/@altova:hide-cols = 'empty'">
									<xsl:sequence select="for $altova:pos in 1 to $altova:col-count return some $altova:cell in $altova:table/table/(thead | tbody | tfoot)/tr/(th | td)[ altova:col-position(., $altova:TableIndexInfo) = $altova:pos ] satisfies not( altova:is-cell-empty( $altova:cell ) )"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="for $altova:pos in 1 to $altova:col-count return not( exists( $altova:table/table/tbody/tr/td[ altova:col-position(., $altova:TableIndexInfo) = $altova:pos ] ) ) or ( some $altova:cell in $altova:table/table/tbody/tr/td[ altova:col-position(., $altova:TableIndexInfo) = $altova:pos ] satisfies not( altova:is-cell-empty( $altova:cell ) ) )"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:deliveryNotes)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_3" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:deliveryNotes">
											<xsl:for-each select="n1:deliveryNote">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoDeliveryNoteTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:shippingDates)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_4" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:shippingDates">
											<xsl:for-each select="n1:shippingDate">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoShippingDateTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:contractNumbers)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_5" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:contractNumbers">
											<xsl:for-each select="n1:contractNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoContractNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:supplierCompanyCodes)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_6" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:supplierCompanyCodes">
											<xsl:for-each select="n1:supplierCompanyCode">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoSupplierCompanyCodeTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:customerCompanyCodes)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_7" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:customerCompanyCodes">
											<xsl:for-each select="n1:customerCompanyCode">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoCustomerCompanyCodeTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:dealerCodes)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_8" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:dealerCodes">
											<xsl:for-each select="n1:dealerCode">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoDealerCodeTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:costCenters)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_9" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:costCenters">
											<xsl:for-each select="n1:costCenter">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoCostCenterTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:projectNumbers)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_10" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:projectNumbers">
											<xsl:for-each select="n1:projectNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoProjectNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:generalLedgerAccountNumbers)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_11" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:generalLedgerAccountNumbers">
											<xsl:for-each select="n1:generalLedgerAccountNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoGeneralLedgerAccountNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:glnNumbersSupplier)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_12" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:glnNumbersSupplier">
											<xsl:for-each select="n1:glnNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoGlnSupplierNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:glnNumbersCustomer)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_13" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:glnNumbersCustomer">
											<xsl:for-each select="n1:glnNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoGlnCustomerNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:materialNumbers)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_14" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:materialNumbers">
											<xsl:for-each select="n1:materialNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoMaterialNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:itemNumbers)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_15" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:itemNumbers">
											<xsl:for-each select="n1:itemNumber">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoItemNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
					<xsl:if test="exists(n1:conventionalInvoiceInfo/n1:ekaerIds)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_16" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:conventionalInvoiceInfo">
										<xsl:for-each select="n1:ekaerIds">
											<xsl:for-each select="n1:ekaerId">
												<tr>
													<td style="border-style:none; width:62.7mm; ">
														<xsl:if test="position() &lt; 2">
															<xsl:call-template name="ConventionalInfoEkaerNumberTemplate_L10N"/>
														</xsl:if>
													</td>
													<td style="border-style:none; width:127.3mm; ">
														<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:if>
				</div>
				<xsl:if test="exists(n1:additionalInvoiceData)">
					<div style="padding-top:5mm; word-break:normal; word-wrap:break-word; ">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; " border="1">
								<xsl:variable name="altova:CurrContextGrid_17" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:additionalInvoiceData">
										<tr style="keep-together:always; ">
											<td style="border-style:none; width:62.7mm; ">
												<xsl:for-each select="n1:dataDescription">
													<span style="font-weight:bold; ">
														<xsl:apply-templates/>
													</span>
												</xsl:for-each>
												<span>
													<xsl:text>:</xsl:text>
												</span>
												<br/>
												<span>
													<xsl:text>(</xsl:text>
												</span>
												<xsl:for-each select="n1:dataName">
													<xsl:apply-templates/>
												</xsl:for-each>
												<span>
													<xsl:text>)</xsl:text>
												</span>
											</td>
											<td style="border-style:none; width:127.1mm; word-break:break-all; word-wrap:break-word; ">
												<xsl:for-each select="n1:dataValue">
													<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
												</xsl:for-each>
											</td>
										</tr>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</div>
				</xsl:if>
			</xsl:for-each>
		</xsl:for-each>
		<xsl:if test="exists(n1:invoiceLines)">
			<div style="padding-top:5mm; ">
				<xsl:for-each select="n1:invoiceLines">
					<xsl:if test="n1:mergedItemIndicator = true()">
						<div style="color:red; text-align:left; ">
							<xsl:call-template name="MergedItemTemplate_L10N"/>
						</div>
					</xsl:if>
					<br/>
					<xsl:variable name="altova:table">
						<table style="border-collapse:collapse; border-style:none; width:100%; " border="1">
							<xsl:variable name="altova:CurrContextGrid_18" select="."/>
							<xsl:variable name="altova:ColumnData"/>
							<tbody>
								<xsl:for-each select="n1:line">
									<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-left-style:none; border-right-style:none; border-top-style:none; width:47.5mm; ">
											<xsl:call-template name="LineNumberTemplate_L10N"/>
											<xsl:for-each select="n1:lineNumber">
												<span style="font-weight:bold; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</td>
										<td colspan="2" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-left-style:none; border-right-style:none; border-top-style:none; width:47.5mm; ">
											<xsl:choose>
												<xsl:when test="n1:lineModificationReference/n1:lineOperation = &apos;CREATE&apos;">
													<xsl:call-template name="LineOperationCreateTemplate_L10N"/>
												</xsl:when>
												<xsl:when test="n1:lineModificationReference/n1:lineOperation = &apos;MODIFY&apos;">
													<xsl:call-template name="LineOperationModifyTemplate_L10N"/>
												</xsl:when>
											</xsl:choose>
											<xsl:for-each select="n1:lineModificationReference">
												<xsl:for-each select="n1:lineNumberReference">
													<span style="font-weight:bold; ">
														<xsl:apply-templates/>
													</span>
												</xsl:for-each>
											</xsl:for-each>
										</td>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-left-style:none; border-right-style:none; border-top-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:referencesToOtherLines)">
												<xsl:call-template name="ReferenceToOtherLineTemplate_L10N"/>
												<xsl:for-each select="n1:referencesToOtherLines">
													<span style="font-weight:bold; ">
														<xsl:value-of select="string-join(n1:referenceToOtherLine/text(), &apos;, &apos;)"/>
													</span>
												</xsl:for-each>
											</xsl:if>
										</td>
									</tr>
									<xsl:choose>
										<xsl:when test="n1:advanceData/n1:advanceIndicator = true()">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="AdvanceIndicatorTemplate_L10N"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
										<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
											<xsl:call-template name="LineDescriptionTemplate_L10N"/>
										</td>
										<td colspan="3" style="border-style:none; width:47.5mm; ">
											<xsl:for-each select="n1:lineDescription">
												<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
											</xsl:for-each>
										</td>
									</tr>
									<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
										<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:quantity)">
												<xsl:call-template name="QuantityTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:quantity">
													<span style="font-weight:bold; ">
														<xsl:variable name="altova:seqContentStrings_19">
															<xsl:value-of select="format-number(number(string(.)), '###Â ###Â ###Â ###', 'format1')"/>
														</xsl:variable>
														<xsl:variable name="altova:sContent_19" select="string($altova:seqContentStrings_19)"/>
														<xsl:value-of select="$altova:sContent_19"/>
													</span>
												</xsl:for-each>
											</xsl:if>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:unitOfMeasure) or exists(n1:unitOfMeasureOwn)">
												<xsl:call-template name="UnitOfMeasureTemplate_L10N"/>
												<br/>
												<xsl:choose>
													<xsl:when test="not(exists(n1:unitOfMeasureOwn)) and exists(n1:unitOfMeasure)">
														<xsl:for-each select="n1:unitOfMeasure">
															<xsl:call-template name="UnitOfMeasureValueTemplate_L10N"/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="exists(n1:unitOfMeasureOwn)">
														<xsl:for-each select="n1:unitOfMeasureOwn">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:when>
												</xsl:choose>
											</xsl:if>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:aggregateInvoiceLineData/n1:lineDeliveryDate)">
												<xsl:call-template name="LineDeliveryDateTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:aggregateInvoiceLineData">
													<xsl:for-each select="n1:lineDeliveryDate">
														<xsl:call-template name="GenericDateOffset_Inner"/>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:if>
											<br/>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:aggregateInvoiceLineData/n1:lineExchangeRate)">
												<xsl:call-template name="LineExchangeRateTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:aggregateInvoiceLineData">
													<xsl:for-each select="n1:lineExchangeRate">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:if>
										</td>
									</tr>
									<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
										<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:unitPrice)">
												<xsl:call-template name="UnitPriceTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:unitPrice">
													<xsl:call-template name="GenericQuantityTypeOffset"/>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</span>
											</xsl:if>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:lineAmountsNormal/n1:lineNetAmountData/n1:lineNetAmount)">
												<xsl:call-template name="NetAmountTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:lineAmountsNormal">
													<xsl:for-each select="n1:lineNetAmountData">
														<xsl:for-each select="n1:lineNetAmount">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</span>
											</xsl:if>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:lineAmountsNormal/n1:lineVatData/n1:lineVatAmount)">
												<xsl:call-template name="VatAmountTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:lineAmountsNormal">
													<xsl:for-each select="n1:lineVatData">
														<xsl:for-each select="n1:lineVatAmount">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</span>
											</xsl:if>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:choose>
												<xsl:when test="exists(n1:lineAmountsNormal/n1:lineGrossAmountData/n1:lineGrossAmountNormal)">
													<xsl:call-template name="GrossAmountTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:lineAmountsNormal">
														<xsl:for-each select="n1:lineGrossAmountData">
															<xsl:for-each select="n1:lineGrossAmountNormal">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</span>
												</xsl:when>
												<xsl:when test="exists(n1:lineAmountsSimplified/n1:lineGrossAmountSimplified)">
													<xsl:call-template name="GrossAmountTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:lineAmountsSimplified">
														<xsl:for-each select="n1:lineGrossAmountSimplified">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160; </xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</span>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<xsl:choose>
										<xsl:when test="exists(n1:lineAmountsNormal)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:lineAmountsNormal">
														<xsl:for-each select="n1:lineVatRate">
															<xsl:call-template name="VatRateTypeTemplate_C5X"/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td colspan="3" style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:lineAmountsNormal/n1:lineVatRate/n1:vatExemption/n1:reason) or exists(n1:lineAmountsNormal/n1:lineVatRate/n1:vatOutOfScope/n1:reason) or n1:lineAmountsNormal/n1:lineVatRate/n1:vatDomesticReverseCharge = true() or exists(n1:lineAmountsNormal/n1:lineVatRate/n1:marginSchemeIndicator) or exists(n1:lineAmountsNormal/n1:lineVatRate/n1:vatAmountMismatch/n1:case) or n1:lineAmountsNormal/n1:lineVatRate/n1:noVatCharge = true()">
														<xsl:call-template name="VatDescriptionTemplate_L10N"/>
														<xsl:for-each select="n1:lineAmountsNormal">
															<xsl:for-each select="n1:lineVatRate">
																<xsl:call-template name="VatReasonTemplate_C5X"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:if>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:lineAmountsSimplified)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:lineAmountsSimplified">
														<xsl:for-each select="n1:lineVatRate">
															<xsl:call-template name="VatRateTypeTemplate_C5X"/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td colspan="3" style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:vatExemption/n1:reason) or exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:vatOutOfScope/n1:reason) or n1:lineAmountsSimplified/n1:lineVatRate/n1:vatDomesticReverseCharge = true() or exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:marginSchemeIndicator) or exists(n1:lineAmountsSimplified/n1:lineVatRate/n1:vatAmountMismatch/n1:case) or n1:lineAmountsSimplified/n1:lineVatRate/n1:noVatCharge = true()">
														<xsl:call-template name="VatDescriptionTemplate_L10N"/>
														<xsl:for-each select="n1:lineAmountsSimplified">
															<xsl:for-each select="n1:lineVatRate">
																<xsl:call-template name="VatReasonTemplate_C5X"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:if>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
										<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
											<xsl:call-template name="UnitPriceHUFTemplate_L10N"/>
											<br/>
											<xsl:for-each select="n1:unitPriceHUF">
												<xsl:call-template name="GenericQuantityTypeOffset"/>
											</xsl:for-each>
											<span style="font-weight:bold; ">
												<xsl:text> HUF</xsl:text>
											</span>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:lineAmountsNormal/n1:lineNetAmountData/n1:lineNetAmountHUF)">
												<xsl:call-template name="LineNetAmountHUFTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:lineAmountsNormal">
													<xsl:for-each select="n1:lineNetAmountData">
														<xsl:for-each select="n1:lineNetAmountHUF">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:text>HUF</xsl:text>
												</span>
											</xsl:if>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:if test="exists(n1:lineAmountsNormal/n1:lineVatData/n1:lineVatAmountHUF)">
												<xsl:call-template name="LineVatAmountHUFTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:lineAmountsNormal">
													<xsl:for-each select="n1:lineVatData">
														<xsl:for-each select="n1:lineVatAmountHUF">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:text>HUF</xsl:text>
												</span>
											</xsl:if>
										</td>
										<td style="border-style:none; width:47.5mm; ">
											<xsl:choose>
												<xsl:when test="exists(n1:lineAmountsNormal/n1:lineGrossAmountData/n1:lineGrossAmountNormalHUF)">
													<xsl:call-template name="LineGrossAmountHUFTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:lineAmountsNormal">
														<xsl:for-each select="n1:lineGrossAmountData">
															<xsl:for-each select="n1:lineGrossAmountNormalHUF">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:text>HUF</xsl:text>
													</span>
												</xsl:when>
												<xsl:when test="exists(n1:lineAmountsSimplified/n1:lineGrossAmountSimplified)">
													<xsl:call-template name="LineGrossAmountHUFTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:lineAmountsSimplified">
														<xsl:for-each select="n1:lineGrossAmountSimplifiedHUF">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<xsl:choose>
										<xsl:when test="exists(n1:lineDiscountData)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="LineDiscountDataTemplate_L10N"/>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="LineDiscountDescriptionTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:lineDiscountData">
														<xsl:for-each select="n1:discountDescription">
															<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="LineDiscountValueTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:lineDiscountData">
														<xsl:for-each select="n1:discountValue">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</span>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="LineDiscountRateTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:lineDiscountData">
														<xsl:for-each select="n1:discountRate">
															<span style="font-weight:bold; ">
																<xsl:value-of select=". * 100"/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
													<span style="font-weight:bold; ">
														<xsl:text> %</xsl:text>
													</span>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:advanceData/n1:advancePaymentData)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="AdvancePaymentTemplate_L10N"/>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:advanceData/n1:advancePaymentData)">
														<xsl:call-template name="AdvanceOriginalInvoiceTemplate_L10N"/>
														<br/>
														<xsl:for-each select="n1:advanceData">
															<xsl:for-each select="n1:advancePaymentData">
																<xsl:for-each select="n1:advanceOriginalInvoice">
																	<span style="font-weight:bold; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:if>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:advanceData/n1:advancePaymentData)">
														<xsl:call-template name="AdvancePaymentDateTemplate_L10N"/>
														<br/>
														<xsl:for-each select="n1:advanceData">
															<xsl:for-each select="n1:advancePaymentData">
																<xsl:for-each select="n1:advancePaymentDate">
																	<xsl:call-template name="GenericDateOffset_Inner"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:if>
													<br/>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:advanceData/n1:advancePaymentData)">
														<xsl:call-template name="AdvanceExchangeRateTemplate_L10N"/>
														<br/>
														<xsl:for-each select="n1:advanceData">
															<xsl:for-each select="n1:advancePaymentData">
																<xsl:for-each select="n1:advanceExchangeRate">
																	<span style="font-weight:bold; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:if>
													<br/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:productCodes)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="ProductCodesData_L10N"/>
												</td>
												<td colspan="3" style="border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:productCodes">
														<span style="font-weight:bold; ">
															<xsl:value-of select="string-join(n1:productCode/string-join(*, &apos; - &apos;), &apos;, &apos;)"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:intermediatedService = true()">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="IntermediatedServiceTemplate_L10N"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:depositIndicator = true()">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="DepositIndicatorTemplate_L10N"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:obligatedForProductFee = true()">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="2" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="ObligatedForProductFeeTemplate_L10N"/>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
												</td>
												<td colspan="2" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:choose>
														<xsl:when test="exists(n1:productFeeClause/n1:productFeeTakeoverData)">
															<xsl:call-template name="ProductFeeTakeoverTemplate_L10N"/>
														</xsl:when>
														<xsl:when test="exists(n1:productFeeClause/n1:customerDeclaration)">
															<xsl:call-template name="ProductFeeCustomerDeclarationTemplate_L10N"/>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:productFeeClause)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="2" style="border-style:none; width:47.5mm; ">
													<xsl:choose>
														<xsl:when test="exists(n1:productFeeClause/n1:productFeeTakeoverData)">
															<xsl:call-template name="TakeoverTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:productFeeClause">
																<xsl:for-each select="n1:productFeeTakeoverData">
																	<xsl:for-each select="n1:takeoverReason">
																		<span style="font-weight:bold; ">
																			<xsl:apply-templates/>
																		</span>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="exists(n1:productFeeClause/n1:customerDeclaration)">
															<xsl:call-template name="ProductStreamTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:productFeeClause">
																<xsl:for-each select="n1:customerDeclaration">
																	<xsl:call-template name="ProductStreamTemplate_C5X"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
												<td colspan="2" style="border-style:none; width:47.5mm; ">
													<xsl:choose>
														<xsl:when test="exists(n1:productFeeClause/n1:productFeeTakeoverData)">
															<xsl:call-template name="TakeoverAmountTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:productFeeClause">
																<xsl:for-each select="n1:productFeeTakeoverData">
																	<xsl:for-each select="n1:takeoverAmount">
																		<xsl:call-template name="GenericMonetaryTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
															<span style="font-weight:bold; ">
																<xsl:text>HUF</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="exists(n1:productFeeClause/n1:customerDeclaration)">
															<xsl:call-template name="ProductFeeWeightTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:productFeeClause">
																<xsl:for-each select="n1:customerDeclaration">
																	<xsl:for-each select="n1:productFeeWeight">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
															<span style="font-weight:bold; ">
																<xsl:text>kg</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:lineProductFeeContent)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; ">
															<xsl:variable name="altova:CurrContextGrid_20" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:lineProductFeeContent">
																	<tr>
																		<td style="border-style:none; width:100%; ">
																			<span style="font-weight:bold; ">
																				<xsl:value-of select="string-join(./n1:productFeeCode/*, &apos; - &apos;)"/>
																			</span>
																			<span>
																				<xsl:text>&#160;</xsl:text>
																			</span>
																			<xsl:call-template name="ProductFeeCodeAmount_L10N"/>
																			<xsl:for-each select="n1:productFeeAmount">
																				<xsl:call-template name="GenericMonetaryTypeOffset"/>
																			</xsl:for-each>
																			<span>
																				<xsl:text>&#160;</xsl:text>
																			</span>
																			<span style="font-weight:bold; ">
																				<xsl:text>HUF</xsl:text>
																			</span>
																			<span>
																				<xsl:text>, </xsl:text>
																			</span>
																			<xsl:call-template name="ProductFeeQuantityTemplate_L10N"/>
																			<xsl:for-each select="n1:productFeeQuantity">
																				<xsl:call-template name="GenericQuantityTypeOffset"/>
																			</xsl:for-each>
																			<span>
																				<xsl:text>&#160;</xsl:text>
																			</span>
																			<xsl:for-each select="n1:productFeeMeasuringUnit">
																				<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																			</xsl:for-each>
																			<span>
																				<xsl:text>, </xsl:text>
																			</span>
																			<xsl:call-template name="ProductFeeRateTemplate_L10N"/>
																			<xsl:for-each select="n1:productFeeRate">
																				<xsl:call-template name="GenericMonetaryTypeOffset"/>
																			</xsl:for-each>
																			<span>
																				<xsl:text>&#160;</xsl:text>
																			</span>
																			<span style="font-weight:bold; ">
																				<xsl:text>HUF / </xsl:text>
																			</span>
																			<xsl:for-each select="n1:productFeeMeasuringUnit">
																				<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																			</xsl:for-each>
																		</td>
																	</tr>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:GPCExcise)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="GPCExciseTemplate_L10N"/>
													<xsl:for-each select="n1:GPCExcise">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="n1:netaDeclaration = true()">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="NetaDeclarationTemplate_L10N"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:newTransportMean)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="NewTransportMeanTemplate_L10N"/>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:choose>
														<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
															<xsl:call-template name="EngineCapacityTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:newTransportMean">
																<xsl:for-each select="n1:vehicle">
																	<xsl:for-each select="n1:engineCapacity">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span style="font-weight:bold; ">
																<xsl:text> cm3</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="exists(n1:newTransportMean/n1:vessel)">
															<xsl:call-template name="LengthTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:newTransportMean">
																<xsl:for-each select="n1:vessel">
																	<xsl:for-each select="n1:length">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span style="font-weight:bold; ">
																<xsl:text> m</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="exists(n1:newTransportMean/n1:aircraft)">
															<xsl:call-template name="TakeOffWeightTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:newTransportMean">
																<xsl:for-each select="n1:aircraft">
																	<xsl:for-each select="n1:takeOffWeight">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span style="font-weight:bold; ">
																<xsl:text> kg</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:choose>
														<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
															<xsl:call-template name="EnginePowerTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:newTransportMean">
																<xsl:for-each select="n1:vehicle">
																	<xsl:for-each select="n1:enginePower">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span style="font-weight:bold; ">
																<xsl:text> kw</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true() or n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
															<xsl:call-template name="NewTransportException"/>
														</xsl:when>
													</xsl:choose>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:choose>
														<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
															<xsl:call-template name="KmsTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:newTransportMean">
																<xsl:for-each select="n1:vehicle">
																	<xsl:for-each select="n1:kms">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span style="font-weight:bold; ">
																<xsl:text> km</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="exists(n1:newTransportMean/n1:vessel)">
															<xsl:call-template name="SailedHoursTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:newTransportMean">
																<xsl:for-each select="n1:vessel">
																	<xsl:for-each select="n1:sailedHours">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span style="font-weight:bold; ">
																<xsl:text> h</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="exists(n1:newTransportMean/n1:aircraft)">
															<xsl:call-template name="OperationHoursTemplate_L10N"/>
															<br/>
															<xsl:for-each select="n1:newTransportMean">
																<xsl:for-each select="n1:aircraft">
																	<xsl:for-each select="n1:operationHours">
																		<xsl:call-template name="GenericQuantityTypeOffset"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<span style="font-weight:bold; ">
																<xsl:text> h</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="count(child::n1:newTransportMean) &gt; 0">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:call-template name="BrandTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:newTransportMean">
														<xsl:for-each select="n1:brand">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="SerialNumTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:newTransportMean">
														<xsl:for-each select="n1:serialNum">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="EngineNumTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:newTransportMean">
														<xsl:for-each select="n1:engineNum">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="FirstEntryIntoServiceTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:newTransportMean">
														<xsl:for-each select="n1:firstEntryIntoService">
															<xsl:call-template name="GenericDateOffset_Inner"/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:dieselOilPurchase)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="DieselOilPurchaseTemplate_L10N"/>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="DieselOilPurchaseDateTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:dieselOilPurchase">
														<xsl:for-each select="n1:purchaseDate">
															<xsl:call-template name="GenericDateOffset_Inner"/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="DieselOilPurchaseVehicleRegistrationNumberTemplate_L10N"/>
													<br/>
													<xsl:for-each select="n1:dieselOilPurchase">
														<xsl:for-each select="n1:vehicleRegistrationNumber">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:dieselOilPurchase/n1:dieselOilQuantity)">
														<xsl:call-template name="DieselOilQuantityTemplate_L10N"/>
														<br/>
														<xsl:for-each select="n1:dieselOilPurchase">
															<xsl:for-each select="n1:dieselOilQuantity">
																<xsl:call-template name="GenericQuantityTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<span>
															<xsl:text>&#160;</xsl:text>
														</span>
														<span style="font-weight:bold; ">
															<xsl:text>l</xsl:text>
														</span>
													</xsl:if>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:dieselOilPurchase)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td style="border-style:none; width:47.5mm; ">
													<xsl:call-template name="DieselOilPurchaseLocationTemplate_L10N"/>
												</td>
												<td colspan="3" style="border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:dieselOilPurchase">
														<xsl:for-each select="n1:purchaseLocation">
															<xsl:for-each select="base:countryCode">
																<span style="font-weight:bold; ">
																	<xsl:apply-templates/>
																</span>
															</xsl:for-each>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
															<xsl:if test="exists(n1:dieselOilPurchase/n1:purchaseLocation/base:region)">
																<xsl:for-each select="base:region">
																	<span style="font-weight:bold; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
																<span>
																	<xsl:text>&#160;</xsl:text>
																</span>
															</xsl:if>
															<xsl:for-each select="base:postalCode">
																<span style="font-weight:bold; ">
																	<xsl:apply-templates/>
																</span>
															</xsl:for-each>
															<span>
																<xsl:text>, </xsl:text>
															</span>
															<xsl:for-each select="base:city">
																<span style="font-weight:bold; ">
																	<xsl:apply-templates/>
																</span>
															</xsl:for-each>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
															<xsl:for-each select="base:additionalAddressDetail">
																<span style="font-weight:bold; ">
																	<xsl:apply-templates/>
																</span>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:orderNumbers)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_21" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:orderNumbers">
																		<xsl:variable name="conventionalLine" select="string-join(n1:orderNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoOrderNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:deliveryNotes)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_22" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:deliveryNotes">
																		<xsl:variable name="conventionalLine" select="string-join(n1:deliveryNote/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoDeliveryNoteTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:shippingDates)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_23" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:shippingDates">
																		<xsl:variable name="conventionalLine" select="string-join(n1:shippingDate/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoShippingDateTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:contractNumbers)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_24" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:contractNumbers">
																		<xsl:variable name="conventionalLine" select="string-join(n1:contractNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoContractNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:supplierCompanyCodes)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_25" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:supplierCompanyCodes">
																		<xsl:variable name="conventionalLine" select="string-join(n1:supplierCompanyCode/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoSupplierCompanyCodeTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:customerCompanyCodes)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_26" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:customerCompanyCodes">
																		<xsl:variable name="conventionalLine" select="string-join(n1:customerCompanyCode/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoCustomerCompanyCodeTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:dealerCodes)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_27" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:dealerCodes">
																		<xsl:variable name="conventionalLine" select="string-join(n1:dealerCode/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoDealerCodeTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:costCenters)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_28" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:costCenters">
																		<xsl:variable name="conventionalLine" select="string-join(n1:costCenter/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoCostCenterTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:projectNumbers)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_29" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:projectNumbers">
																		<xsl:variable name="conventionalLine" select="string-join(n1:projectNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoProjectNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:generalLedgerAccountNumbers)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_30" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:generalLedgerAccountNumbers">
																		<xsl:variable name="conventionalLine" select="string-join(n1:generalLedgerAccountNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoGeneralLedgerAccountNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:glnNumbersSupplier)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_31" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:glnNumbersSupplier">
																		<xsl:variable name="conventionalLine" select="string-join(n1:glnNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoGlnSupplierNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:glnNumbersCustomer)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_32" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:glnNumbersCustomer">
																		<xsl:variable name="conventionalLine" select="string-join(n1:glnNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoGlnCustomerNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:materialNumbers)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_33" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:materialNumbers">
																		<xsl:variable name="conventionalLine" select="string-join(n1:materialNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoMaterialNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:itemNumbers)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_34" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:itemNumbers">
																		<xsl:variable name="conventionalLine" select="string-join(n1:itemNumber/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoItemNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:conventionalLineInfo/n1:ekaerIds)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; ">
															<xsl:variable name="altova:CurrContextGrid_35" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:conventionalLineInfo">
																	<xsl:for-each select="n1:ekaerIds">
																		<xsl:variable name="conventionalLine" select="string-join(n1:ekaerId/text(), &apos;, &apos;)"/>
																		<tr>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																				<xsl:call-template name="ConventionalInfoEkaerNumberTemplate_L10N"/>
																			</td>
																			<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																				<span style="font-weight:bold; ">
																					<xsl:value-of select="string-join(for $i in (string-to-codepoints($conventionalLine)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
																				</span>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="exists(n1:additionalLineData)">
											<tr style="background-color:{if ( n1:lineNumber mod 2 = 0 ) then &quot;#FFFFFF&quot; else &quot;#E8E8E8&quot;}; keep-together:always; ">
												<td colspan="4" style="border-left-color:black; border-left-width:1px; border-style:none; width:47.5mm; ">
													<xsl:variable name="altova:table">
														<table style="border-collapse:collapse; border-style:none; width:100%; " border="1">
															<xsl:variable name="altova:CurrContextGrid_36" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<xsl:for-each select="n1:additionalLineData">
																	<tr>
																		<td style="border-left-color:black; border-left-width:1px; border-style:none; width:25%; ">
																			<xsl:for-each select="n1:dataDescription">
																				<span style="font-weight:bold; ">
																					<xsl:apply-templates/>
																				</span>
																			</xsl:for-each>
																			<span>
																				<xsl:text>:</xsl:text>
																			</span>
																			<br/>
																			<span>
																				<xsl:text>(</xsl:text>
																			</span>
																			<xsl:for-each select="n1:dataName">
																				<xsl:apply-templates/>
																			</xsl:for-each>
																			<span>
																				<xsl:text>)</xsl:text>
																			</span>
																		</td>
																		<td style="border-left-color:black; border-left-width:1px; border-style:none; width:75%; ">
																			<xsl:for-each select="n1:dataValue">
																				<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
																			</xsl:for-each>
																			<span>
																				<xsl:text>&#160;</xsl:text>
																			</span>
																		</td>
																	</tr>
																</xsl:for-each>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
													<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
														</xsl:apply-templates>
													</xsl:variable>
													<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
												</td>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="position() != last()">
											<tr style="height:5mm; keep-together:always; ">
												<td colspan="4" style="border-style:none; width:47.5mm; "/>
											</tr>
										</xsl:when>
										<xsl:otherwise/>
									</xsl:choose>
								</xsl:for-each>
							</tbody>
						</table>
					</xsl:variable>
					<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
					<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
					<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
					<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
						</xsl:apply-templates>
					</xsl:variable>
					<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					<br/>
				</xsl:for-each>
			</div>
		</xsl:if>
		<xsl:if test="exists(n1:productFeeSummary)">
			<div style="keep-together:always; padding-top:5mm; ">
				<xsl:call-template name="ProductFeeSummaryTemplate_L10N"/>
				<xsl:variable name="altova:table">
					<table style="border-collapse:collapse; border-color:black; border-style:solid; table-omit-header-at-break:true; " border="1">
						<xsl:variable name="altova:CurrContextGrid_37" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<thead>
							<tr>
								<th style="border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
									<xsl:call-template name="ProductFeeSummaryQuantityTemplate_L10N"/>
								</th>
								<th style="border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
									<xsl:call-template name="ProductFeeRateSummaryTemplate_L10N"/>
								</th>
								<th style="border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
									<xsl:call-template name="ProductFeeAmountSummaryTemplate_L10N"/>
								</th>
								<th style="border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
									<xsl:call-template name="ProductFeeCodeSummaryTemplate_L10N"/>
								</th>
							</tr>
						</thead>
						<tbody>
							<xsl:for-each select="n1:productFeeSummary">
								<tr>
									<td colspan="4" style="border-style:none; width:47.5mm; ">
										<xsl:variable name="altova:table">
											<table style="border-collapse:collapse; border-style:none; width:100%; ">
												<xsl:variable name="altova:CurrContextGrid_38" select="."/>
												<xsl:variable name="altova:ColumnData"/>
												<tbody>
													<xsl:for-each select="n1:productFeeData">
														<tr>
															<td style="border-style:none; width:25%; ">
																<xsl:for-each select="n1:productFeeQuantity">
																	<xsl:call-template name="GenericQuantityTypeOffset"/>
																</xsl:for-each>
																<span>
																	<xsl:text>&#160;</xsl:text>
																</span>
																<xsl:for-each select="n1:productFeeMeasuringUnit">
																	<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																</xsl:for-each>
															</td>
															<td style="border-style:none; width:25%; ">
																<xsl:for-each select="n1:productFeeRate">
																	<xsl:call-template name="GenericMonetaryTypeOffset"/>
																</xsl:for-each>
																<span>
																	<xsl:text>&#160;</xsl:text>
																</span>
																<span style="font-weight:bold; ">
																	<xsl:text>HUF / </xsl:text>
																</span>
																<xsl:for-each select="n1:productFeeMeasuringUnit">
																	<xsl:call-template name="ProductFeeMeasuringUnitTemplate_L10N"/>
																</xsl:for-each>
															</td>
															<td style="border-style:none; width:25%; ">
																<xsl:for-each select="n1:productFeeAmount">
																	<xsl:call-template name="GenericMonetaryTypeOffset"/>
																</xsl:for-each>
																<span>
																	<xsl:text>&#160;</xsl:text>
																</span>
																<span style="font-weight:bold; ">
																	<xsl:text>HUF</xsl:text>
																</span>
															</td>
															<td style="border-style:none; width:25%; ">
																<span style="font-weight:bold; ">
																	<xsl:value-of select="string-join(./n1:productFeeCode/*, &apos; - &apos;)"/>
																</span>
															</td>
														</tr>
													</xsl:for-each>
												</tbody>
											</table>
										</xsl:variable>
										<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
										<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
										<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
										<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
												<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
											</xsl:apply-templates>
										</xsl:variable>
										<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
									</td>
								</tr>
								<tr>
									<td colspan="4" style="border-style:none; width:47.5mm; ">
										<xsl:call-template name="ProductChargeSumTemplate_L10N"/>
										<xsl:for-each select="n1:productChargeSum">
											<xsl:call-template name="GenericMonetaryTypeOffset"/>
										</xsl:for-each>
										<span>
											<xsl:text>&#160;</xsl:text>
										</span>
										<span style="font-weight:bold; ">
											<xsl:text>HUF</xsl:text>
										</span>
									</td>
								</tr>
								<tr>
									<td colspan="4" style="border-style:none; width:47.5mm; ">
										<xsl:call-template name="ProductFeeOperationTemplate_C5X"/>
									</td>
								</tr>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<tr>
											<td colspan="4" style="border-style:none; width:47.5mm; ">
												<xsl:call-template name="PaymentEvidenceDocumentDataTemplate_L10N"/>
											</td>
										</tr>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<tr>
											<td colspan="4" style="border-style:none; width:47.5mm; ">
												<xsl:call-template name="PaymentEvidenceObligatedTemplate_L10N"/>
												<xsl:for-each select="n1:paymentEvidenceDocumentData">
													<xsl:for-each select="n1:obligatedTaxNumber">
														<xsl:call-template name="BaseTaxNumberTemplate"/>
													</xsl:for-each>
													<span>
														<xsl:text>, </xsl:text>
													</span>
													<xsl:for-each select="n1:obligatedName">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</td>
										</tr>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<tr>
											<td colspan="4" style="border-style:none; width:47.5mm; ">
												<xsl:call-template name="PaymentEvidenceObligatedAddressTemplate_L10N"/>
												<xsl:for-each select="n1:paymentEvidenceDocumentData">
													<xsl:for-each select="n1:obligatedAddress">
														<xsl:call-template name="BaseAddressTemplate"/>
													</xsl:for-each>
												</xsl:for-each>
											</td>
										</tr>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="exists(n1:paymentEvidenceDocumentData)">
										<tr>
											<td colspan="2" style="border-style:none; width:47.5mm; ">
												<xsl:call-template name="PaymentEvidenceDocumentNoTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:paymentEvidenceDocumentData">
													<xsl:for-each select="n1:evidenceDocumentNo">
														<span style="font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:for-each>
											</td>
											<td colspan="2" style="border-style:none; width:47.5mm; ">
												<xsl:call-template name="PaymentEvidenceDocumentDateTemplate_L10N"/>
												<br/>
												<xsl:for-each select="n1:paymentEvidenceDocumentData">
													<xsl:for-each select="n1:evidenceDocumentDate">
														<xsl:call-template name="GenericDateOffset_Inner"/>
													</xsl:for-each>
												</xsl:for-each>
											</td>
										</tr>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$ProductFeeSummaryCount &gt; 1 and position() != last()">
										<tr>
											<td colspan="4" style="border-style:none; width:47.5mm; ">
												<hr size="1"/>
											</td>
										</tr>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$ProductFeeSummaryCount &gt; 1 and position() != last()">
										<tr style="height:1mm; ">
											<td style="border-style:none; font-weight:normal; width:47.5mm; ">
												<xsl:call-template name="ProductFeeSummaryQuantityTemplate_L10N"/>
											</td>
											<td style="border-style:none; font-weight:normal; width:47.5mm; ">
												<xsl:call-template name="ProductFeeRateSummaryTemplate_L10N"/>
											</td>
											<td style="border-style:none; font-weight:normal; width:47.5mm; ">
												<xsl:call-template name="ProductFeeAmountSummaryTemplate_L10N"/>
											</td>
											<td style="border-style:none; font-weight:normal; width:47.5mm; ">
												<xsl:call-template name="ProductFeeCodeSummaryTemplate_L10N"/>
											</td>
										</tr>
									</xsl:when>
									<xsl:otherwise/>
								</xsl:choose>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
				<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
					<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
					</xsl:apply-templates>
				</xsl:variable>
				<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
			</div>
		</xsl:if>
		<div style="padding-top:5mm; ">
			<xsl:for-each select="n1:invoiceSummary">
				<xsl:choose>
					<xsl:when test="exists(n1:summaryNormal)">
						<br/>
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; " border="1">
								<xsl:variable name="altova:CurrContextGrid_39" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<thead>
									<tr>
										<th style="background-color:#E8E8E8; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
											<xsl:call-template name="VatTemplate_L10N"/>
										</th>
										<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
											<xsl:call-template name="NetAmountTemplate_L10N"/>
										</th>
										<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
											<xsl:call-template name="VatAmountTemplate_L10N"/>
										</th>
										<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; font-weight:normal; text-align:left; width:47.5mm; ">
											<xsl:call-template name="GrossAmountTemplate_L10N"/>
										</th>
									</tr>
								</thead>
								<tfoot>
									<tr style="height:2.5mm; ">
										<td style="background-color:#E8E8E8; border-style:none; width:47.5mm; "/>
										<td style="border-style:none; width:47.5mm; "/>
										<td style="border-style:none; width:47.5mm; "/>
										<td style="border-style:none; width:47.5mm; "/>
									</tr>
									<tr>
										<td style="background-color:#E8E8E8; border-color:black; border-style:none; font-size:9pt; width:47.5mm; ">
											<xsl:call-template name="InvoiceSummarySumTotalTemplate_L10N"/>
										</td>
										<td style="border-color:black; border-style:solid; width:47.5mm; ">
											<xsl:for-each select="n1:summaryNormal">
												<xsl:for-each select="n1:invoiceNetAmount">
													<xsl:call-template name="GenericMonetaryTypeOffset"/>
												</xsl:for-each>
											</xsl:for-each>
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
											<span style="font-weight:bold; ">
												<xsl:value-of select="$CurrencyCodeValue"/>
											</span>
										</td>
										<td style="border-color:black; border-style:solid; width:47.5mm; ">
											<xsl:for-each select="n1:summaryNormal">
												<xsl:for-each select="n1:invoiceVatAmount">
													<xsl:call-template name="GenericMonetaryTypeOffset"/>
												</xsl:for-each>
											</xsl:for-each>
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
											<span style="font-weight:bold; ">
												<xsl:value-of select="$CurrencyCodeValue"/>
											</span>
										</td>
										<td style="border-bottom-color:{if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;}; border-left-color:black; border-right-color:{if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;}; border-style:solid; border-top-color:{if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;}; width:47.5mm; ">
											<xsl:if test="exists(n1:summaryGrossData)">
												<xsl:for-each select="n1:summaryGrossData">
													<xsl:for-each select="n1:invoiceGrossAmount">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</span>
											</xsl:if>
										</td>
									</tr>
									<tr>
										<td style="background-color:#E8E8E8; border-color:black; border-style:none; font-size:9pt; width:47.5mm; ">
											<xsl:call-template name="InvoiceSummarySumTotalInHUFTemplate_L10N"/>
										</td>
										<td style="border-color:black; border-style:solid; width:47.5mm; ">
											<xsl:for-each select="n1:summaryNormal">
												<xsl:for-each select="n1:invoiceNetAmountHUF">
													<xsl:call-template name="GenericMonetaryTypeOffset"/>
												</xsl:for-each>
											</xsl:for-each>
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
											<span style="font-weight:bold; ">
												<xsl:text>HUF</xsl:text>
											</span>
										</td>
										<td style="border-color:black; border-style:solid; width:47.5mm; ">
											<xsl:for-each select="n1:summaryNormal">
												<xsl:for-each select="n1:invoiceVatAmountHUF">
													<xsl:call-template name="GenericMonetaryTypeOffset"/>
												</xsl:for-each>
											</xsl:for-each>
											<span style="font-weight:bold; ">
												<xsl:text> HUF</xsl:text>
											</span>
										</td>
										<td style="border-bottom-color:{if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;}; border-left-color:black; border-right-color:{if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;}; border-style:solid; border-top-color:{if (exists(n1:summaryGrossData)) then &apos;black&apos; else &apos;white&apos;}; width:47.5mm; ">
											<xsl:if test="exists(n1:summaryGrossData)">
												<xsl:for-each select="n1:summaryGrossData">
													<xsl:for-each select="n1:invoiceGrossAmountHUF">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:text>HUF</xsl:text>
												</span>
											</xsl:if>
										</td>
									</tr>
								</tfoot>
								<tbody>
									<xsl:for-each select="n1:summaryNormal">
										<xsl:for-each select="n1:summaryByVatRate">
											<tr>
												<td style="background-color:#E8E8E8; border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:vatRate">
														<xsl:call-template name="VatRateTypeTemplate_C5X"/>
													</xsl:for-each>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:vatRateNetData">
														<xsl:for-each select="n1:vatRateNetAmount">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</span>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:vatRateVatData">
														<xsl:for-each select="n1:vatRateVatAmount">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:value-of select="$CurrencyCodeValue"/>
													</span>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:vatRateGrossData)">
														<xsl:for-each select="n1:vatRateGrossData">
															<xsl:for-each select="n1:vatRateGrossAmount">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<span>
															<xsl:text>&#160;</xsl:text>
														</span>
														<span style="font-weight:bold; ">
															<xsl:value-of select="$CurrencyCodeValue"/>
														</span>
													</xsl:if>
												</td>
											</tr>
											<tr>
												<td style="background-color:#E8E8E8; border-style:none; width:47.5mm; ">
													<xsl:call-template name="InvoiceSummaryInHUFTemplate_L10N"/>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:vatRateNetData">
														<xsl:for-each select="n1:vatRateNetAmount">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:text>HUF</xsl:text>
													</span>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:for-each select="n1:vatRateVatData">
														<xsl:for-each select="n1:vatRateVatAmountHUF">
															<xsl:call-template name="GenericMonetaryTypeOffset"/>
														</xsl:for-each>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<span style="font-weight:bold; ">
														<xsl:text>HUF</xsl:text>
													</span>
												</td>
												<td style="border-style:none; width:47.5mm; ">
													<xsl:if test="exists(n1:vatRateGrossData)">
														<xsl:for-each select="n1:vatRateGrossData">
															<xsl:for-each select="n1:vatRateGrossAmountHUF">
																<xsl:call-template name="GenericMonetaryTypeOffset"/>
															</xsl:for-each>
														</xsl:for-each>
														<span>
															<xsl:text>&#160;</xsl:text>
														</span>
														<span style="font-weight:bold; ">
															<xsl:text>HUF</xsl:text>
														</span>
													</xsl:if>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:when>
					<xsl:when test="exists(n1:summarySimplified)">
						<xsl:variable name="altova:table">
							<table style="border-collapse:collapse; border-style:none; table-omit-header-at-break:true; " border="1">
								<xsl:variable name="altova:CurrContextGrid_40" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<thead>
									<tr>
										<th style="background-color:#E8E8E8; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; text-align:left; width:47.5mm; ">
											<span>
												<xsl:text>ÃFA</xsl:text>
											</span>
										</th>
										<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; text-align:left; width:47.5mm; "/>
										<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; text-align:left; width:47.5mm; "/>
										<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:1px; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; text-align:left; width:47.5mm; ">
											<span>
												<xsl:text>BruttÃ³ Ã¶sszeg</xsl:text>
											</span>
										</th>
									</tr>
								</thead>
								<tfoot>
									<tr style="height:2.5mm; ">
										<td style="background-color:#E8E8E8; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
										<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
										<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
										<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
									</tr>
									<tr>
										<td style="background-color:#E8E8E8; font-size:9pt; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
											<span style="font-weight:bold; ">
												<xsl:text>MindÃ¶sszesen:</xsl:text>
											</span>
										</td>
										<td colspan="2" style="border-bottom-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
										<td style="table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
											<xsl:if test="exists(n1:summaryGrossData)">
												<xsl:for-each select="n1:summaryGrossData">
													<xsl:for-each select="n1:invoiceGrossAmount">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</span>
											</xsl:if>
										</td>
									</tr>
									<tr>
										<td style="background-color:#E8E8E8; font-size:9pt; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
											<span style="font-weight:bold; ">
												<xsl:text>Forintban:</xsl:text>
											</span>
										</td>
										<td colspan="2" style="border-top-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
										<td style="table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
											<xsl:if test="exists(n1:summaryGrossData)">
												<xsl:for-each select="n1:summaryGrossData">
													<xsl:for-each select="n1:invoiceGrossAmountHUF">
														<xsl:call-template name="GenericMonetaryTypeOffset"/>
													</xsl:for-each>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:text>HUF</xsl:text>
												</span>
											</xsl:if>
										</td>
									</tr>
								</tfoot>
								<tbody>
									<xsl:for-each select="n1:summarySimplified">
										<tr>
											<td style="background-color:#E8E8E8; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
												<xsl:for-each select="n1:vatRate">
													<xsl:call-template name="VatRateTypeTemplate_C5X"/>
												</xsl:for-each>
											</td>
											<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
											<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
											</td>
											<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
												<xsl:for-each select="n1:vatContentGrossAmount">
													<xsl:call-template name="GenericMonetaryTypeOffset"/>
												</xsl:for-each>
												<span>
													<xsl:text>&#160; </xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:value-of select="$CurrencyCodeValue"/>
												</span>
											</td>
										</tr>
										<tr>
											<td style="background-color:#E8E8E8; border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
												<span>
													<xsl:text>Forintban: </xsl:text>
												</span>
											</td>
											<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
											<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; "/>
											<td style="border-style:none; table-omit-footer-at-break:true; table-omit-header-at-break:true; width:47.5mm; ">
												<xsl:for-each select="n1:vatContentGrossAmountHUF">
													<xsl:call-template name="GenericMonetaryTypeOffset"/>
												</xsl:for-each>
												<span>
													<xsl:text>&#160;</xsl:text>
												</span>
												<span style="font-weight:bold; ">
													<xsl:text>HUF</xsl:text>
												</span>
											</td>
										</tr>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )" xpath-default-namespace=""/>
						<xsl:variable name="altova:TableIndexInfo" select="altova:BuildTableIndexInfo($altova:table)"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:variable name="altova:nodeTableWithoutUnwantedParts">
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
							</xsl:apply-templates>
						</xsl:variable>
						<xsl:sequence select="$altova:nodeTableWithoutUnwantedParts"/>
					</xsl:when>
				</xsl:choose>
				<br/>
			</xsl:for-each>
		</div>
	</xsl:template>
	<xsl:template name="InvoiceClassificationTemplate_C5X">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Bizonylat tÃ­pusa</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Document type</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Dokumentenart</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
		<span>
			<xsl:text>: </xsl:text>
		</span>
		<xsl:choose>
			<xsl:when test="not(exists($XML/n1:InvoiceData/n1:invoiceMain/n1:invoice/n1:invoiceReference)) and not(exists($XML/n1:InvoiceData/n1:invoiceMain/n1:batchInvoice))">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>SzÃ¡mla</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Invoice</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Rechnung</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="(exists($XML/n1:InvoiceData/n1:invoiceMain/n1:invoice/n1:invoiceReference) or exists($XML/n1:InvoiceData/n1:invoiceMain/n1:batchInvoice))">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>SzÃ¡mlÃ¡val egy tekintet alÃ¡ esÅ okirat</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Invoice equivalent document</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>RechnungsÃ¤quivalentes Dokument</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Bizonylat sorszÃ¡ma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Serial number of the document: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Seriennummer des Dokuments: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="HeaderTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>SzÃ¡mlaadat</xsl:text>
				</span>
				<xsl:if test="n1:InvoiceData/n1:completenessIndicator = false()">
					<span style="font-weight:bold; ">
						<xsl:text>-szolgÃ¡ltatÃ¡s</xsl:text>
					</span>
				</xsl:if>
				<span style="font-weight:bold; ">
					<xsl:text> kÃ©pi megjelenÃ­tÃ©se</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Visual display of invoice data</xsl:text>
				</span>
				<xsl:if test="n1:InvoiceData/n1:completenessIndicator = false()">
					<span style="font-weight:bold; ">
						<xsl:text> report</xsl:text>
					</span>
				</xsl:if>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Visuelle Anzeige </xsl:text>
				</span>
				<xsl:choose>
					<xsl:when test="n1:InvoiceData/n1:completenessIndicator = true()">
						<span style="font-weight:bold; ">
							<xsl:text>von Rechnungsdaten</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="n1:InvoiceData/n1:completenessIndicator = false()">
						<span style="font-weight:bold; ">
							<xsl:text>des Rechnungsdatenberichts</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="FooterTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Ez a dokumentum a bizonylat adattartalmÃ¡nak standard kÃ©pi megjelenÃ­tÃ©se. Ez az dokumentum nem a szÃ¡mla.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>This document is a standard image representation of the data content of the document. This document is not the invoice.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Dieses Dokument ist eine Standardbilddarstellung des Dateninhalts des Dokuments. Dieses Dokument ist nicht die Rechnung.</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceIssueDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Bizonylat kiÃ¡llÃ­tÃ¡si dÃ¡tuma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Document issue date: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Dokumentausgabedatum: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BatchIndexTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MÃ³dosÃ­tÃ¡s sorszÃ¡ma a kÃ¶tegen belÃ¼l: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Sequence number of the modification document within the batch: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Laufende Nummer des Ãnderungsdokuments innerhalb der Charge: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericDateOffset_Outer">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;januÃ¡r&apos; else
	if (month-from-date(.) = 02) then &apos;februÃ¡r&apos; else
		if (month-from-date(.) = 03) then &apos;mÃ¡rcius&apos; else
			if (month-from-date(.) = 04) then &apos;Ã¡prilis&apos; else
				if (month-from-date(.) = 05) then &apos;mÃ¡jus&apos; else
					if (month-from-date(.) = 06) then &apos;jÃºnius&apos; else
						if (month-from-date(.) = 07) then &apos;jÃºlius&apos; else
							if (month-from-date(.) = 08) then &apos;augusztus&apos; else
								if (month-from-date(.) = 09) then &apos;szeptember&apos; else
									if (month-from-date(.) = 10) then &apos;oktÃ³ber&apos; else
										if (month-from-date(.) = 11) then &apos;november&apos;
											 else &apos;december&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="concat(day-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;January&apos; else
	if (month-from-date(.) = 02) then &apos;February&apos; else
		if (month-from-date(.) = 03) then &apos;March&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;May&apos; else
					if (month-from-date(.) = 06) then &apos;June&apos; else
						if (month-from-date(.) = 07) then &apos;July&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;October&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;December&apos;),
&apos; &apos;, year-from-date(.), &apos;.&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;Januar&apos; else
	if (month-from-date(.) = 02) then &apos;Februar&apos; else
		if (month-from-date(.) = 03) then &apos;MÃ¤rz&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;Mai&apos; else
					if (month-from-date(.) = 06) then &apos;Juni&apos; else
						if (month-from-date(.) = 07) then &apos;Juli&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;Oktober&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;Dezember&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NamespaceErrorTemplate_L10N">
		<br/>
		<span>
			<xsl:text>FeldolgozÃ¡si hiba! / Processing error! / Verarbeitungsfehler! </xsl:text>
		</span>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<span>
			<xsl:text>A bemenetkÃ©nt megadott XML Ã¡llomÃ¡ny nem az Online SzÃ¡mla adatszolgÃ¡ltatÃ¡s 3.0-Ã¡s verziÃ³ja szerint kÃ©szÃ¼lt. Az XSLT sablon desktop verziÃ³ja nem alkalmas ettÅl eltÃ©rÅ kÃ©pi megjelenÃ­tÃ©s generÃ¡lÃ¡sÃ¡ra. (A default namespace Ã©rtÃ©ke nem a 3.0-Ã¡s szÃ¡mla adatszolgÃ¡ltatÃ¡sokban hasznÃ¡lt &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos;.)</xsl:text>
		</span>
		<br/>
		<br/>
		<span>
			<xsl:text>The XML file specified as input was not created according to Online Invoice Data Report version 3.0. The desktop version of the XSLT template is not suitable for generating a different image display. (The default namespace value is not &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos;.</xsl:text>
		</span>
		<br/>
		<br/>
		<span>
			<xsl:text>Die als Eingabe angegebene XML-Datei wurde nicht gemÃ¤Ã Online Invoice Data Report Version 3.0 erstellt. Die Desktop-Version des XSLT-Templates ist nicht geeignet, um eine andere Bilddarstellung zu erzeugen. (Der Standard-Namespace-Wert ist nicht âhttp://schemas.nav.gov.hu/OSA/3.0/dataâ.</xsl:text>
		</span>
	</xsl:template>
	<xsl:template name="DisplayErrorTemplate_L10N">
		<span>
			<xsl:text>FeldolgozÃ¡si hiba / Processing error! / Verarbeitungsfehler! </xsl:text>
		</span>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<span>
			<xsl:text>A dokumentum megjelenÃ­tÃ©si beÃ¡llÃ­tÃ¡sait tartalmazÃ³ $lang vÃ¡ltozÃ³ nem kerÃ¼lt helyesen megadÃ¡sra! A tÃ¡mogatott Ã©rtÃ©kek: HU, EN, DE. / The $lang variable containing the display options of the document is not correctly provided! Supported values are: HU, EN, DE. / Das $lang-Variable, dass die Anzeigeoptionen des Dokuments enthÃ¤lt, wird nicht bereitgestellt! UnterstÃ¼tzte Werte sind: HU, EN, DE. </xsl:text>
		</span>
	</xsl:template>
	<xsl:template name="InvoiceCategoryTemplate">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>SzÃ¡mla tÃ­pusa: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Type of invoice: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>RechnungsTyp: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="n1:invoiceCategory = &apos;NORMAL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>NormÃ¡l szÃ¡mla</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Regular invoice</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Normales Rechnung</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceCategory = &apos;SIMPLIFIED&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>EgyszerÅ±sÃ­tett szÃ¡mla</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Simplified invoice</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Vereinfachte Rechnung</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceCategory = &apos;AGGREGATE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>GyÅ±jtÅ szÃ¡mla</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Aggregated invoice</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Aggregierte Rechnung</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceAppearanceTemplate">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MegjelenÃ©si forma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Invoice appearance: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Erscheinungsform: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="n1:invoiceAppearance = &apos;PAPER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>PapÃ­r</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Paper</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Papier</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceAppearance = &apos;ELECTRONIC&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Elektronikus</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Electronic</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Electronish</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:invoiceAppearance = &apos;EDI&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>EDI</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="n1:invoiceAppearance = &apos;UNKNOWN&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Ismeretlen</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Unknown</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Unbekannt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PeriodicalSettlementTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Folyamatos teljesÃ­tÃ©sÅ± Ã¼gylet</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Periodic settlement</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Periodische Abrechnung</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentMethodTemplate_C5X">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>FizetÃ©si mÃ³d: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Payment method: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Zahlungsweise: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="n1:paymentMethod = &apos;TRANSFER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>ÃtutalÃ¡s</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Bank transfer</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>BankÃ¼berweisung</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;CASH&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KÃ©szpÃ©nz</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Cash</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Bargeld</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;CARD&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KÃ¡rtya</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Card</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Karte</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;VOUCHER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>UtalvÃ¡ny, vÃ¡ltÃ³</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Voucher, bill of exchange</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Gutschein, Weschel</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:paymentMethod = &apos;OTHER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>EgyÃ©b</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Other</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Sonstiges</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="CashAccountingIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>PÃ©nzforgalmi elszÃ¡molÃ¡s</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Cash accounting</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Verrechnung des Geldverkehrs</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SelfBillingIncidatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>ÃnszÃ¡mlÃ¡zÃ¡s</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Self billing</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Selbstfakturierung</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UtilitySettlementIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>KÃ¶zmÅ± elszÃ¡molÃ³ szÃ¡mla</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Public utility settlement invoice</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Verrechnungskonto fÃ¼r Versorgungsunternehmen</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="OriginalInvoiceNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MÃ³dosÃ­tott szÃ¡mla sorszÃ¡ma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Original invoice reference number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Original Rechnungsreferenznummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ModificationIndexTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MÃ³dosÃ­tÃ¡s sorszÃ¡ma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Modification index: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Ãnderungsindex: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SellerTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>ELADÃ</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>SELLER</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>VERKÃUFER</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BuyerTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>VEVÅ</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>CUSTOMER</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>KUNDE</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TaxNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>AdÃ³szÃ¡m: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Tax number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Steuernummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TaxNumberGroupTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>CsoportazonosÃ­tÃ³ szÃ¡m: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Group identifier number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Gruppenidentifikationsnummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="CommunityVatNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>KÃ¶zÃ¶ssÃ©gi adÃ³szÃ¡m: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>EU VAT number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>EU-Steuernummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ThirdStateTaxIdTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Harmadik orszÃ¡gbeli adÃ³azonosÃ­tÃ³: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Third state tax ID: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Dritte staatliche Steuer ID: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GroupMemberTaxNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Csoporttag adÃ³szÃ¡ma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Group member tax number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Steuernummer des Gruppenmitglieds: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceHeadNameTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>NÃ©v: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Name: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Name: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceHeadAddressTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>CÃ­m: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Address: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Anschrift: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="FiscalRepresentativeNameTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>PÃ©nzÃ¼gyi kÃ©pviselÅ neve: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Fiscal representative&apos;s name: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Name des Finanzvertreters: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceDeliveryDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TeljesÃ­tÃ©s dÃ¡tuma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Delivery date: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Lieferdatum: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceAccountingDeliveryDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>SzÃ¡mviteli teljesÃ­tÃ©s dÃ¡tuma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Accounting delivery date: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Abrechnungsdatum: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceDeliveryPeriodStartTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TeljesÃ­tÃ©si idÅszak kezdete: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Start of delivery period: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Beginn der Lieferfrist: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceDeliveryPeriodEndTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TeljesÃ­tÃ©si idÅszak vÃ©ge: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>End of delivery date: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Ende der Lieferfrist: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>FizetÃ©si hatÃ¡ridÅ: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Payment date: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Zahlungsfrist: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="CurrencyCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>SzÃ¡mla pÃ©nzneme: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Invoice currency: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>WÃ¤hrung der Rechnung: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ExchangeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ÃtvÃ¡ltÃ¡si Ã¡rfolyam: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Exchange rate: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Tauschrate: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoOrderNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MegrendelÃ©s szÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Order number(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Bestellnummer(n):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoDeliveryNoteTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>SzÃ¡llÃ­tÃ³levÃ©l szÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Delivery note(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Lieferschein(en):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoShippingDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>SzÃ¡llÃ­tÃ¡si dÃ¡tum(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Shipping date(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Versanddatum (daten):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericDateOffset_Inner">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;januÃ¡r&apos; else
	if (month-from-date(.) = 02) then &apos;februÃ¡r&apos; else
		if (month-from-date(.) = 03) then &apos;mÃ¡rcius&apos; else
			if (month-from-date(.) = 04) then &apos;Ã¡prilis&apos; else
				if (month-from-date(.) = 05) then &apos;mÃ¡jus&apos; else
					if (month-from-date(.) = 06) then &apos;jÃºnius&apos; else
						if (month-from-date(.) = 07) then &apos;jÃºlius&apos; else
							if (month-from-date(.) = 08) then &apos;augusztus&apos; else
								if (month-from-date(.) = 09) then &apos;szeptember&apos; else
									if (month-from-date(.) = 10) then &apos;oktÃ³ber&apos; else
										if (month-from-date(.) = 11) then &apos;november&apos;
											 else &apos;december&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="concat(day-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;January&apos; else
	if (month-from-date(.) = 02) then &apos;February&apos; else
		if (month-from-date(.) = 03) then &apos;March&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;May&apos; else
					if (month-from-date(.) = 06) then &apos;June&apos; else
						if (month-from-date(.) = 07) then &apos;July&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;October&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;December&apos;),
&apos; &apos;, year-from-date(.), &apos;.&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="concat(year-from-date(.), &apos;. &apos;, (
if (month-from-date(.) = 01) then &apos;Januar&apos; else
	if (month-from-date(.) = 02) then &apos;Februar&apos; else
		if (month-from-date(.) = 03) then &apos;MÃ¤rz&apos; else
			if (month-from-date(.) = 04) then &apos;April&apos; else
				if (month-from-date(.) = 05) then &apos;Mai&apos; else
					if (month-from-date(.) = 06) then &apos;Juni&apos; else
						if (month-from-date(.) = 07) then &apos;Juli&apos; else
							if (month-from-date(.) = 08) then &apos;August&apos; else
								if (month-from-date(.) = 09) then &apos;September&apos; else
									if (month-from-date(.) = 10) then &apos;Oktober&apos; else
										if (month-from-date(.) = 11) then &apos;November&apos;
											 else &apos;Dezember&apos;),
&apos; &apos;, day-from-date(.), &apos;.&apos;)"/>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AggregateInstructionsTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Ld: tÃ©telsorok!</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>See invoice lines!</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Siehe Rechnungspositionen!</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PrivatePersonTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="color:red; font-weight:bold; ">
					<xsl:text>A vevÅ nem Ã¡faalany termÃ©szetes szemÃ©ly, ezÃ©rt adatai az adatszolgÃ¡ltatÃ¡sban nem szerepelnek.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="color:red; font-weight:bold; ">
					<xsl:text>The customer is non-VAT liable natural person and therefore his / her data is not included in the data report.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="color:red; font-weight:bold; ">
					<xsl:text>Der Kunde ist eine nicht umsatzsteuerpflichtige natÃ¼rliche Person und daher werden seine Daten nicht in den Rechnungsdatenberichts aufgenommen.</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SmallBusinessIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>(kisadÃ³zÃ³)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>(low-tax bracket enterprise)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>(kleinunternehmer)</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="IndividualExemptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>(alanyi Ã¡famentes)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>(individual VAT exempt)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>(Individuell steuerfrei)</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BankAccountNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>BankszÃ¡mlaszÃ¡m: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Bank account number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Bankkontonummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ExciseLicensNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>JÃ¶vedÃ©ki engedÃ©ly szÃ¡ma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Excise license number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Verbrauchsteuer-Lizenznummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoContractNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>SzerzÅdÃ©sszÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Contract number(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Vertragsnummer(n):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoSupplierCompanyCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>EladÃ³ vÃ¡llalati kÃ³dja(i):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Supplier company code(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Buchungskreise(n) des VerkÃ¤ufer:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoCustomerCompanyCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>VevÅ vÃ¡llalati kÃ³dja(i):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Customer company codes:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Buchungskreise(n) des Kunden:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoDealerCodeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>BeszÃ¡llÃ­tÃ³ kÃ³d(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Dealer code(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>HÃ¤ndlercode(n):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoCostCenterTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>KÃ¶ltsÃ©ghely(ek):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Cost center(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Kostenstelle(n):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoProjectNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ProjektszÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Project number(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Projektnummer(n):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoGeneralLedgerAccountNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>FÅkÃ¶nyvi szÃ¡mlaszÃ¡m(ok)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>General ledger account number(s)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Hauptbuchkontonummer(n)</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoGlnSupplierNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>KiÃ¡llÃ­tÃ³i globÃ¡lis helyazonosÃ­tÃ³ szÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Supplier global location number(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Globale Standortnummer(n) des VerkÃ¤ufer:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoGlnCustomerNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>VevÅi globÃ¡lis helyazonosÃ­tÃ³ szÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Customer global location number(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Globale Standortnummer(n) des Kunden:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoMaterialNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>AnyagszÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Material number(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Materialnummer(n):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoItemNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>CikkszÃ¡m(ok):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Item number(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Artikelnummer(n):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ConventionalInfoEkaerNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>EKÃER azonosÃ­tÃ³(k):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>EKAER ID(s):</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>EKAER ID(s):</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericQuantityTypeOffset">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="translate(replace(format-number(., &apos;###,###,###,##0.##########&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="format-number(., &apos;###,###,###,##0.##########&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="translate(translate(replace(format-number(., &apos;###,###,###,##0.##########&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;), &apos; &apos;, &apos;.&apos;)"/>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericMonetaryTypeOffset">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="translate(replace(format-number(., &apos;#,###,###,###,###,##0.##&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="format-number(., &apos;#,###,###,###,###,##0.##&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="translate(translate(replace(format-number(., &apos;#,###,###,###,###,##0.##&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;), &apos; &apos;, &apos;.&apos;)"/>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericZeroWidthWhitespaceOffset">
		<span style="font-weight:bold; ">
			<xsl:value-of select="string-join(for $i in (string-to-codepoints(.)) return codepoints-to-string($i), codepoints-to-string(8203))"/>
		</span>
	</xsl:template>
	<xsl:template name="VatRateTypeTemplate_C5X">
		<xsl:choose>
			<xsl:when test="exists(n1:vatPercentage)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA mÃ©rtÃ©k</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT percentage</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt Prozentsatz</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<span style="font-weight:bold; ">
					<xsl:value-of select="n1:vatPercentage * 100"/>
				</span>
				<span style="font-weight:bold; ">
					<xsl:text> %</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="exists(n1:vatContent)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA tartalom</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT content</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt Inhalt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<span style="font-weight:bold; ">
					<xsl:value-of select="n1:vatContent * 100"/>
				</span>
				<span style="font-weight:bold; ">
					<xsl:text> %</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="exists(n1:vatExemption)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<xsl:for-each select="n1:vatExemption">
					<xsl:for-each select="n1:case">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="exists(n1:vatOutOfScope)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<xsl:for-each select="n1:vatOutOfScope">
					<xsl:for-each select="n1:case">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="n1:vatDomesticReverseCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<span style="font-weight:bold; ">
					<xsl:text>FAD</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="exists(n1:marginSchemeIndicator)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<xsl:choose>
					<xsl:when test="n1:marginSchemeIndicator = &apos;TRAVEL_AGENCY&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KAU</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;SECOND_HAND&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KAH</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ARTWORK&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KAM</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ANTIQUES&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KAR</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:vatAmountMismatch)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<span style="font-weight:bold; ">
					<xsl:value-of select="n1:vatAmountMismatch/n1:vatRate * 100"/>
				</span>
				<span>
					<xsl:text>&#160;</xsl:text>
				</span>
				<span style="font-weight:bold; ">
					<xsl:text>%</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="n1:noVatCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span>
							<xsl:text>ÃFA</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span>
							<xsl:text>VAT</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span>
							<xsl:text>MwSt</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>: </xsl:text>
				</span>
				<span style="font-weight:bold; ">
					<xsl:text>NFA</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatReasonTemplate_C5X">
		<xsl:choose>
			<xsl:when test="exists(n1:vatExemption/n1:reason)">
				<xsl:for-each select="n1:vatExemption">
					<xsl:for-each select="n1:reason">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="exists(n1:vatOutOfScope/n1:reason)">
				<xsl:for-each select="n1:vatOutOfScope">
					<xsl:for-each select="n1:reason">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="n1:vatDomesticReverseCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>BelfÃ¶ldi fordÃ­tott adÃ³zÃ¡s</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Domestic reverse charging</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Umgekehrte GebÃ¼hr im Inland</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:marginSchemeIndicator)">
				<xsl:choose>
					<xsl:when test="n1:marginSchemeIndicator = &apos;TRAVEL_AGENCY&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - utazÃ¡si irodÃ¡k</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Margin scheme taxation - travel agencies</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Differenzbesteuerung - Reiseagenturen</xsl:text>
								</span>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;SECOND_HAND&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - hasznÃ¡lt cikkek</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Margin scheme taxation - second hand goods</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Differenzbesteuerung - Gebrauchtwaren</xsl:text>
								</span>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ARTWORK&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - mÅ±alkotÃ¡sok</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Margin scheme taxation - works of art</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Differenzbesteuerung - Kunstwerke</xsl:text>
								</span>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="n1:marginSchemeIndicator = &apos;ANTIQUES&apos;">
						<xsl:choose>
							<xsl:when test="$lang = &apos;HU&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>KÃ¼lÃ¶nbÃ¶zet szerinti szabÃ¡lyozÃ¡s - gyÅ±jtemÃ©nydarabok Ã©s rÃ©gisÃ©gek</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;EN&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Margin scheme taxation - collector&apos;s item and antiques</xsl:text>
								</span>
							</xsl:when>
							<xsl:when test="$lang = &apos;DE&apos;">
								<span style="font-weight:bold; ">
									<xsl:text>Differenzbesteuerung - SammlerstÃ¼cke und AntiquitÃ¤ten</xsl:text>
								</span>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:vatAmountMismatch)">
				<xsl:for-each select="n1:vatAmountMismatch">
					<xsl:for-each select="n1:case">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="n1:noVatCharge = true()">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Nincs felszÃ¡mÃ­tott adÃ³ az ÃFA tÃ¶rvÃ©ny 17.Â§ alapjÃ¡n.</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>No VAT is charged under Section 17 of the VAT Act.</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Nach Â§ 17 des Mehrwertsteuergesetzes wird keine Mehrwertsteuer erhoben.</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="MergedItemTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Az adatszolgÃ¡ltatÃ¡s Ã¶sszevont soradatokat tartalmaz!</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>The invoice data report contains merged line data!</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Der Rechnungsdatenbericht enthÃ¤lt zusammengefÃ¼hrte Zeilendaten!</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>TÃ©tel sorszÃ¡m: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Line number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Zeilennummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineOperationCreateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Eredeti szÃ¡mlÃ¡n lÃ©trehozott Ãºj tÃ©tel sorszÃ¡ma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Line number of newly created item on original invoice: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Zeilennummer des neu erstellten Artikels auf der Originalrechnung: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineOperationModifyTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Eredeti szÃ¡mla mÃ³dosÃ­tÃ¡ssal Ã©rintett tÃ©tel sorszÃ¡ma: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Line number of modified item on original invoice: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Zeilennummer des geÃ¤nderten Artikels auf der Originalrechnung: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ReferenceToOtherLineTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>KapcsolÃ³dÃ³ tÃ©telek: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Referenced lines: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Referenzierte Zeilen: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvanceIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>(ElÅleg jellegÅ± tÃ©tel)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>(Advance payment type)</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>(Vorauszahlungsart)</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDescriptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MegnevezÃ©s: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Description: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Beschreibung: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="QuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MennyisÃ©g:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Quantity:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Menge:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitOfMeasureTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MennyisÃ©gi egysÃ©g:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Unit of measure:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Mengeneinheit:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDeliveryDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TÃ©tel teljesÃ­tÃ©si dÃ¡tuma:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Line delivery date:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Lieferdatum der Linie:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineExchangeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TÃ©tel Ã¡tvÃ¡ltÃ¡si Ã¡rfolyama:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Line exchange rate:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Wechselkurs der Linie:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitPriceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>EgysÃ©gÃ¡r:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Unit price:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Einheitpreis:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NetAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>NettÃ³ Ã¶sszeg:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Net amount:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Nettobetrag:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Ãfa Ã¶sszeg:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>VAT amount:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>MwSt Betrag:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GrossAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>BruttÃ³ Ã¶sszeg:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Gross amount:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Bruttowert:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatDescriptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Ãfa eset leÃ­rÃ¡sa: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>VAT case description: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Beschreibung des Mwst: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitPriceHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>EgysÃ©gÃ¡r forintban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Unit price in HUF:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Einheitpreis im HUF:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineNetAmountHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>NettÃ³ forintban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Net amount in HUF:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Nettobetrag im HUF:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineVatAmountHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Ãfa forintban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>VAT amount in HUF:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>MwSt Betrag im HUF:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineGrossAmountHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>BruttÃ³ forintban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Gross amount in HUF:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Bruttowert im HUF:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountDataTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>TÃ©telsor Ã¡rengedmÃ©ny adatok</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Line discount data</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Rabattdaten der Linie</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountDescriptionTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>LeÃ­rÃ¡sa:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Description:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Bezeichnung:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountValueTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Ãsszege:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Sum:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Summe:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LineDiscountRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ArÃ¡nya:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Rate:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Bewertung:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvancePaymentTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>ElÅleg beszÃ¡mÃ­tÃ¡s adatok</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Advance payment data</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Vorauszahlungsdaten</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvanceOriginalInvoiceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ElÅlegszÃ¡mla sorszÃ¡ma:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Advance payment invoice number:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Vorauszahlungsrechnung:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvancePaymentDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ElÅleg fizetÃ©sÃ©nek dÃ¡tuma:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Advance payment date:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Datum der Vorauszahlung:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="AdvanceExchangeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ElÅleg Ã¡rfolyama:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Exchange rate of advance payment:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Wechselkurs der Vorauszahlung:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductCodesData_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TermÃ©kkÃ³d adatok:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Product codes data:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Daten zu Produktcodes:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="IntermediatedServiceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>A tÃ©tel kÃ¶zvetÃ­tett szolgÃ¡ltatÃ¡st tartalmaz.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>The item is an intermediated service.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Der Artikel enthÃ¤lt einen vermittelten Dienst.</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DepositIndicatorTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>A tÃ©tel betÃ©tdÃ­j jellegÅ±.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>The item is of a deposit nature.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Der Artikel hat Pfandcharakter.</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ObligatedForProductFeeTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>A tÃ©telt termÃ©kdÃ­j fizetÃ©si kÃ¶telezettsÃ©g terheli.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>The item is liable to product fee.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Der Artikel unterliegt der ProduktgebÃ¼hr</xsl:text>
				</span>
				<span>
					<xsl:text>.</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NetaDeclarationTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>A tÃ©tel vonatkozÃ¡sÃ¡ban a Neta tÃ¶rvÃ©nyben (2011. Ã©vi CIII. tÃ¶rvÃ©ny) meghatÃ¡rozott adÃ³fizetÃ©si kÃ¶telezettsÃ©g az eladÃ³t terheli.</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>In the relation of the item, the seller is liable to pay the tax specified in the Neta Act (Act CIII of 2011).</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>In Bezug auf den Artikel ist der VerkÃ¤ufer verpflichtet, die im Neta-Gesetz (Gesetz CIII von 2011) festgelegte Steuer zu zahlen.</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BrandTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>GyÃ¡rtmÃ¡ny / tÃ­pus:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Brand / type:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Marke / Typ:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SerialNumTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>AlvÃ¡zszÃ¡m / gyÃ¡ri szÃ¡m:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Chassis / serial number:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Fahrgestell / Seriennummer:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="EngineNumTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MotorszÃ¡m:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Engine number:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Motornummer:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="FirstEntryIntoServiceTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ElsÅ forgalomba helyezÃ©s idÅpontja:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>First entry into service:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Erstinbetriebnahme:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NewTransportMeanTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Ãj kÃ¶zlekedÃ©si eszkÃ¶z</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>New means of transport</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Neuen Verkehrsmitteln</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
		<span>
			<xsl:text> - </xsl:text>
		</span>
		<xsl:choose>
			<xsl:when test="exists(n1:newTransportMean/n1:vehicle)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>szÃ¡razfÃ¶ldi</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>land vehicle</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>landfahrzeug</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:newTransportMean/n1:vessel)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>vÃ­zi</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>watercraft</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Wasserfahrzeug</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="exists(n1:newTransportMean/n1:aircraft)">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>lÃ©gi</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>aircraft</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Flugzeug</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="EngineCapacityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>HengerÅ±rtartalom:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Engine capacity:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Motorleistung:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="LengthTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Hossza:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Length:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>LÃ¤nge:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TakeOffWeightTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>FelszÃ¡llÃ¡si tÃ¶meg:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Take off weight:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Start - Masse:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="KmsTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Futott kilomÃ©ter:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Kilometers traveled:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Gefahrene Kilometer:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="SailedHoursTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>HajÃ³zott Ã³rÃ¡k:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Sailed hours:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Stunden gesegelt:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="OperationHoursTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>RepÃ¼lt Ã³rÃ¡k:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Aviated hours:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Geflogene Stunden:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="EnginePowerTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TeljesÃ­tmÃ©ny:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Output:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Leistung:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="NewTransportException">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Ãfa tÃ¶rvÃ©ny 259.Â§ 25.</xsl:text>
				</span>
				<xsl:choose>
					<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true()">
						<span style="font-weight:bold; ">
							<xsl:text>b</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
						<span style="font-weight:bold; ">
							<xsl:text>c</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span style="font-weight:bold; ">
					<xsl:text>) szerinti kivÃ©tel</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Exception under Section 259 (25)</xsl:text>
				</span>
				<span>
					<xsl:text>&#160;</xsl:text>
				</span>
				<xsl:choose>
					<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true()">
						<span style="font-weight:bold; ">
							<xsl:text>b</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
						<span style="font-weight:bold; ">
							<xsl:text>c</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span>
					<xsl:text>&#160;</xsl:text>
				</span>
				<span style="font-weight:bold; ">
					<xsl:text>of the VAT Act</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Ausnahme gemÃ¤Ã Â§ 259 Nr.25 Buchstabe</xsl:text>
				</span>
				<span>
					<xsl:text>&#160;</xsl:text>
				</span>
				<xsl:choose>
					<xsl:when test="n1:newTransportMean/n1:vessel/n1:activityReferred = true()">
						<span style="font-weight:bold; ">
							<xsl:text>b</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="n1:newTransportMean/n1:aircraft/n1:airCargo = true()">
						<span style="font-weight:bold; ">
							<xsl:text>c</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
				<span style="font-weight:bold; ">
					<xsl:text> UStG.</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GenericExchangeRateOffset">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="translate(replace(format-number(., &apos;##,###,##0.00####&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="format-number(., &apos;##,###,##0.00####&apos;)"/>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:value-of select="translate(translate(replace(format-number(., &apos;##,###,##0.00####&apos;), &apos;,&apos;, &apos; &apos;), &apos;.&apos;, &apos;,&apos;), &apos; &apos;, &apos;.&apos;)"/>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="GPCExciseTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>FÃ¶ldgÃ¡z, villamos energia, szÃ©n jÃ¶vedÃ©ki adÃ³ja forintban: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Excise duty on natural gas, electricity and coal in HUF: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Verbrauchsteuer auf Erdgas, Strom und Kohle in HUF: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="BaseTaxNumberTemplate">
		<xsl:for-each select="base:taxpayerId">
			<span style="font-weight:bold; ">
				<xsl:apply-templates/>
			</span>
		</xsl:for-each>
		<xsl:if test="exists(base:vatCode)">
			<span>
				<xsl:text>-</xsl:text>
			</span>
			<xsl:for-each select="base:vatCode">
				<span style="font-weight:bold; ">
					<xsl:apply-templates/>
				</span>
			</xsl:for-each>
		</xsl:if>
		<xsl:if test="exists(base:countyCode)">
			<span>
				<xsl:text>-</xsl:text>
			</span>
			<xsl:for-each select="base:countyCode">
				<span style="font-weight:bold; ">
					<xsl:apply-templates/>
				</span>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template name="BaseAddressTemplate">
		<xsl:choose>
			<xsl:when test="exists(base:simpleAddress)">
				<xsl:for-each select="base:simpleAddress">
					<xsl:for-each select="base:countryCode">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
					<xsl:if test="exists(base:region)">
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:for-each select="base:region">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
					</xsl:if>
					<span style="font-weight:bold; ">
						<xsl:text>&#160;</xsl:text>
					</span>
					<xsl:for-each select="base:postalCode">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
					<span style="font-weight:bold; ">
						<xsl:text>&#160;</xsl:text>
					</span>
					<xsl:for-each select="base:city">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<span style="font-weight:bold; ">
						<xsl:text>&#160;</xsl:text>
					</span>
					<xsl:for-each select="base:additionalAddressDetail">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="exists(base:detailedAddress)">
				<xsl:for-each select="base:detailedAddress">
					<xsl:for-each select="base:countryCode">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
					<span style="font-weight:bold; ">
						<xsl:text>&#160;</xsl:text>
					</span>
					<xsl:if test="exists(base:detailedAddress/base:region)">
						<xsl:for-each select="base:region">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
					</xsl:if>
					<xsl:for-each select="base:postalCode">
						<span style="font-weight:bold; ">
							<xsl:apply-templates/>
						</span>
					</xsl:for-each>
					<span style="font-weight:bold; ">
						<xsl:text>&#160;</xsl:text>
					</span>
					<xsl:for-each select="base:city">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<span style="font-weight:bold; ">
						<xsl:text>, </xsl:text>
					</span>
					<xsl:for-each select="base:streetName">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<span style="font-weight:bold; ">
						<xsl:text>&#160;</xsl:text>
					</span>
					<xsl:for-each select="base:publicPlaceCategory">
						<xsl:call-template name="GenericZeroWidthWhitespaceOffset"/>
					</xsl:for-each>
					<xsl:if test="exists(base:number)">
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:for-each select="base:number">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:building)">
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:for-each select="base:building">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:staircase)">
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:for-each select="base:staircase">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:floor)">
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:for-each select="base:floor">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:door)">
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:for-each select="base:door">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="exists(base:lotNumber)">
						<span style="font-weight:bold; ">
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:for-each select="base:lotNumber">
							<span style="font-weight:bold; ">
								<xsl:apply-templates/>
							</span>
						</xsl:for-each>
					</xsl:if>
					<br/>
				</xsl:for-each>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeTakeoverTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>A termÃ©kdÃ­j Ã¡tvÃ¡llalÃ¡s adatai</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Data of the product fee takeover</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Daten der ProduktgebÃ¼hrenÃ¼bernahme</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeCustomerDeclarationTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>A termÃ©kdÃ­j mentesÃ¼lÃ©s adatai</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Product fee charge exemption details</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Einzelheiten zur ProduktgebÃ¼hrenbefreiung</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TakeoverTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ÃtvÃ¡llalÃ¡s irÃ¡nya Ã©s jogszabÃ¡lyi alapja:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Direction and legal base of takeover:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Richtung und Rechtsgrundlage der Ãbernahme:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductStreamTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TermÃ©kÃ¡ram:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Product stream:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Produktstrom:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="TakeoverAmountTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ÃtvÃ¡llalt termÃ©kdÃ­j Ã¶sszege forintban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Amount of product fee assumed in HUF:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Summe der Ã¼bernommenen ProduktgebÃ¼hr im HUF:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeWeightTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TermÃ©kdÃ­j kÃ¶teles termÃ©k tÃ¶mege kilogrammban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Weight of product fee obligated product in kg:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Gewicht des produktgebÃ¼hrenpflichtigen Produkts in kg:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeCodeAmount_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>termÃ©kdÃ­j Ã¶sszege: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>product fee amount: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>ProduktgebÃ¼hrenbetrag: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeQuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>mennyisÃ©g: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>quantity: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Anzahl: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeRateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>dÃ­jtÃ©tel: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>product fee rate: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>ProduktgebÃ¼hrensatz: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseLocationTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>GÃ¡zolaj beszerzÃ©s helye:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Diesel oil purchase location:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Einkaufsort fÃ¼r DieselÃ¶l:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>GÃ¡zolaj beszerzÃ©s adatai</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Diesel oil purchase data</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Daten zum Kauf von DieselÃ¶l</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>BeszerzÃ©s dÃ¡tuma:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Date of purchase:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Kaufdatum:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilPurchaseVehicleRegistrationNumberTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>RendszÃ¡m:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Plate number:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Kennzeichen:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DieselOilQuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>BÃ©rmunka szolgÃ¡ltatÃ¡s:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Contract work service:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Auftragsarbeiten:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeRateSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>DÃ­jtÃ©tel</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Rate unit</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>GebÃ¼hreneinheit</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeAmountSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TermÃ©kdÃ­j Ã¶sszeg</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Product fee amount</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>ProduktgebÃ¼hr</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeCodeSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TermÃ©kkÃ³d</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Product code</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Produktcode</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductChargeSumTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TermÃ©kdÃ­j Ã¶sszesen: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Product charge sum: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>ProduktgebÃ¼hrensumme: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeOperationTemplate_C5X">
		<xsl:choose>
			<xsl:when test="n1:productFeeOperation = &apos;REFUND&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>A termÃ©kdÃ­j Ã¶sszege visszaigÃ©nylÃ©sre vonatkozik.</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>The amount of the product fee is for a refund.</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>FÃ¼r eine RÃ¼ckerstattung gilt die HÃ¶he der ProduktgebÃ¼hr.</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productFeeOperation = &apos;DEPOSIT&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>A termÃ©kdÃ­j Ã¶sszege raktÃ¡rba tÃ¶rtÃ©nÅ beszÃ¡llÃ­tÃ¡sra vonatkozik.</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>The amount of the product fee applies to delivery to the warehouse.</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Die HÃ¶he der Produktpauschale gilt fÃ¼r die Lieferung an das Lager.</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceDocumentDataTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>TermÃ©kdÃ­j bevallÃ¡sÃ¡t igazolÃ³ dokumentum adatai</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Details of the document certifying the product fee declaration</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="text-decoration:underline; ">
					<xsl:text>Angaben zum Dokument zur Bescheinigung der ProduktgebÃ¼hrenerklÃ¤rung</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceObligatedTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>KÃ¶telezett adÃ³szÃ¡ma, neve: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Obligated name, tax number: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Obligatorischer Name, Steuernummer: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceObligatedAddressTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>KÃ¶telezett cÃ­me: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Obligor&apos;s address: </xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Adresse des Schuldners: </xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceDocumentNoTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Dokumentum azonosÃ­tÃ³ szÃ¡ma:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Document ID number:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Dokument ID Nummer:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="PaymentEvidenceDocumentDateTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Dokumentum kelte:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Document date:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Datum des Dokuments:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeSummaryTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>TermÃ©kdÃ­j Ã¶sszesÃ­tÅ adatok</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Product fee summary data</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Summierung der ProduktgebÃ¼hren</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="VatTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>ÃFA</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>VAT</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>MwSt</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceSummaryInHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>Forintban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>In HUF:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Im HUF:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceSummarySumTotalTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>MindÃ¶sszesen:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Sumtotal:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Gesamtsumme:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="InvoiceSummarySumTotalInHUFTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Forintban:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>In HUF:</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Im HUF:</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeMeasuringUnitTemplate_L10N">
		<xsl:choose>
			<xsl:when test=". = &apos;DARAB&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>darab</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>piece</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>stÃ¼ck</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;KG&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>kg</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="UnitOfMeasureValueTemplate_L10N">
		<xsl:choose>
			<xsl:when test=". = &apos;PIECE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Darab</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Piece</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>StÃ¼ck</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;KILOGRAM&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilogramm</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilogram</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilogramm</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;TON&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Tonna</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Ton</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Tonne</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;KWH&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilowatt Ã³ra</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilowatt hour</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilowattstunde</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;DAY&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Nap</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Day</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Tag</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;HOUR&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Ãra</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Hour</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Stunde</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;MINUTE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Perc</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Minute</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Minute</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;MONTH&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>HÃ³nap</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Month</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Monat</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;LITER&apos;">
				<span style="font-weight:bold; ">
					<xsl:text>Liter</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test=". = &apos;KILOMETER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KilomÃ©ter</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilometer</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kilometer</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;CUBIC_METER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>KÃ¶bmÃ©ter</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Cubic meter</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Kubikmeter</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;METER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>MÃ©ter</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Meter</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Meter</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;LINEAR_METER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>FolyÃ³mÃ©ter</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Linear meter</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>laufender Meter</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;CARTON&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Karton</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Carton</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Karton</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test=". = &apos;PACK&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Csomag</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Pack</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Pack</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductStreamTemplate_C5X">
		<xsl:choose>
			<xsl:when test="n1:productStream = &apos;BATTERY&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>AkkumulÃ¡tor</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Battery</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Batterie</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;PACKAGING&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>CsomagolÃ³szer</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Packaging</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Verpackungsmaterial</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;OTHER_PETROL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>EgyÃ©b kÅolajtermÃ©k</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Other petroleum product</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Andere ErdÃ¶lprodukte</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;ELECTRONIC&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Elektromos, elektronikai berendezÃ©s</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Electric appliance, electronic equipment</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Elektrische, elektronische AusrÃ¼stung</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;TIRE&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Gumiabroncs</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Tire</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Reifen</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;COMMERCIAL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>ReklÃ¡mhordozÃ³ papÃ­r</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Commercial printing paper</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Werbepapier</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;PLASTIC&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>EgyÃ©b mÅ±anyag termÃ©k</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Other plastic product</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Andere Kunstsoffprodukte</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;OTHER_CHEMICAL&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>EgyÃ©b vegyipari termÃ©k</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Other chemical product</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Andere chemische Produkte</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="n1:productStream = &apos;PAPER&apos;">
				<xsl:choose>
					<xsl:when test="$lang = &apos;HU&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Irodai papÃ­r</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;EN&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>Paper stationery</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$lang = &apos;DE&apos;">
						<span style="font-weight:bold; ">
							<xsl:text>BÃ¼ropapier</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ProductFeeSummaryQuantityTemplate_L10N">
		<xsl:choose>
			<xsl:when test="$lang = &apos;HU&apos;">
				<span>
					<xsl:text>MennyisÃ©g</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;EN&apos;">
				<span>
					<xsl:text>Quantity</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$lang = &apos;DE&apos;">
				<span>
					<xsl:text>Menge</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean" xpath-default-namespace="">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-position" as="xs:integer" xpath-default-namespace="">
		<xsl:param name="altova:Cell" as="element()"/>
		<xsl:param name="altova:TableIndexInfo" as="element()"/>
		<xsl:variable name="altova:nRow" select="altova:GetGridRowNumForCell($altova:Cell)"/>
		<xsl:variable name="altova:nCell" select="count($altova:Cell/preceding-sibling::th) + count($altova:Cell/preceding-sibling::td) + 1" as="xs:integer"/>
		<xsl:sequence select="$altova:TableIndexInfo/altova:Row[$altova:nRow]/altova:ColumnIndex[$altova:nCell]"/>
	</xsl:function>
	<xsl:template match="@*" mode="altova:copy-table-cell-properties">
		<xsl:copy-of select="."/>
	</xsl:template>
	<xsl:template match="@colspan" mode="altova:copy-table-cell-properties"/>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table" xpath-default-namespace="">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="tr" mode="altova:generate-table" xpath-default-namespace="">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:choose>
			<xsl:when test="ancestor::table[1]/@altova:hide-rows = 'empty'">
				<xsl:if test="some $altova:cell in (th | td) satisfies not(altova:is-cell-empty($altova:cell))">
					<xsl:copy>
						<xsl:apply-templates select="@* | node()" mode="#current">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
						</xsl:apply-templates>
					</xsl:copy>
				</xsl:if>
			</xsl:when>
			<xsl:when test="ancestor::table[1]/@altova:hide-rows = 'body-empty'">
				<xsl:if test="not(exists(parent::tbody)) or (some $altova:cell in td satisfies not(altova:is-cell-empty($altova:cell)))">
					<xsl:copy>
						<xsl:apply-templates select="@* | node()" mode="#current">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
						</xsl:apply-templates>
					</xsl:copy>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table" xpath-default-namespace="">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:variable name="altova:this-cell" select="."/>
		<xsl:variable name="altova:col-index" select="altova:col-position($altova:this-cell, $altova:TableIndexInfo)"/>
		<xsl:choose>
			<xsl:when test="$altova:generate-cols[$altova:col-index]">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						<xsl:with-param name="altova:TableIndexInfo" select="$altova:TableIndexInfo"/>
					</xsl:apply-templates>
					<xsl:choose>
						<xsl:when test="altova:is-cell-empty($altova:this-cell)">
							<xsl:text>&#160;</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:copy-of select="node()"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:copy>
			</xsl:when>
			<xsl:when test="altova:col-span($altova:this-cell) > 1">
				<xsl:for-each select="for $altova:pos in $altova:col-index to ($altova:col-index + altova:col-span($altova:this-cell) - 1) return if ($altova:generate-cols[$altova:pos]) then true() else ()">
					<xsl:for-each select="$altova:this-cell">
						<xsl:copy>
							<xsl:apply-templates select="@*" mode="altova:copy-table-cell-properties"/>
							<xsl:text>&#160;</xsl:text>
						</xsl:copy>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="@colspan" mode="altova:generate-table" xpath-default-namespace="">
		<xsl:param name="altova:generate-cols"/>
		<xsl:param name="altova:TableIndexInfo"/>
		<xsl:choose>
			<xsl:when test="exists( ancestor::table[ 1 ]/@altova:hide-cols )">
				<xsl:variable name="altova:col-index" select="altova:col-position(.., $altova:TableIndexInfo)"/>
				<xsl:attribute name="colspan" select="sum( for $altova:pos in $altova:col-index to ( $altova:col-index + xs:integer( . ) - 1 ) return if ( $altova:generate-cols[ $altova:pos ] ) then 1 else 0 )"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="colspan" select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="@altova:hide-rows | @altova:hide-cols" mode="altova:generate-table"/>
	<xsl:function name="altova:CountLeadingTrueValues">
		<xsl:param name="seqBools"/>
		<xsl:sequence select="if (not($seqBools[1] = true())) then 0 else 1 + altova:CountLeadingTrueValues($seqBools[position() gt 1])"/>
	</xsl:function>
	<xsl:function name="altova:GetCellFromRow" as="node()?" xpath-default-namespace="">
		<xsl:param name="nodeTableRow" as="node()"/>
		<xsl:param name="nCell" as="xs:integer"/>
		<xsl:sequence select="$nodeTableRow/(th | td)[$nCell]"/>
	</xsl:function>
	<xsl:function name="altova:GetCellsFromRow" as="node()*" xpath-default-namespace="">
		<xsl:param name="nodeTableRow" as="node()"/>
		<xsl:sequence select="$nodeTableRow/(th | td)"/>
	</xsl:function>
	<xsl:function name="altova:GetRowsFromTable" as="node()*" xpath-default-namespace="">
		<xsl:param name="nodeTable" as="node()"/>
		<xsl:sequence select="$nodeTable/(thead | tbody | tfoot)/tr"/>
	</xsl:function>
	<xsl:function name="altova:GetRowspanFromCell" as="xs:integer" xpath-default-namespace="">
		<xsl:param name="altova:nodeCell" as="node()"/>
		<xsl:variable name="altova:sRowSpan" select="$altova:nodeCell/@rowspan" as="xs:string?"/>
		<xsl:variable name="altova:nRowSpan" select="if ($altova:sRowSpan) then xs:integer($altova:sRowSpan) else 1" as="xs:integer"/>
		<xsl:sequence select="$altova:nRowSpan"/>
	</xsl:function>
	<!-- In HTML and FO, the table section order is header, footer, body. This function determines, for a given cell, the number its row would have if the section order were header, body, footer -->
	<xsl:function name="altova:GetGridRowNumForCell" xpath-default-namespace="">
		<xsl:param name="altova:nodeTableCell" as="node()"/>
		<xsl:variable name="altova:nodeTableRow" select="$altova:nodeTableCell/.." as="node()"/>
		<xsl:variable name="altova:nodeTableSection" select="$altova:nodeTableRow/.." as="node()"/>
		<xsl:variable name="altova:sTableSection" select="fn:local-name($altova:nodeTableSection)" as="xs:string"/>
		<xsl:variable name="altova:nodeTable" select="$altova:nodeTableSection/.." as="node()"/>
		<xsl:variable name="altova:nRowNumInSection" select="count($altova:nodeTableRow/preceding-sibling::tr) + 1" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:sTableSection eq 'tbody'">
				<xsl:sequence select="count($altova:nodeTable/thead/tr) + $altova:nRowNumInSection"/>
			</xsl:when>
			<xsl:when test="$altova:sTableSection eq 'thead'">
				<xsl:sequence select="$altova:nRowNumInSection"/>
			</xsl:when>
			<xsl:when test="$altova:sTableSection eq 'tfoot'">
				<xsl:sequence select="count($altova:nodeTable/thead/tr) + count($altova:nodeTable/tbody/tr) + $altova:nRowNumInSection"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:message select="'Internal Error'" terminate="yes"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:BuildTableIndexInfo" as="node()" xpath-default-namespace="">
		<xsl:param name="altova:nodeTable" as="node()"/>
		<altova:ColumnIndices>
			<xsl:variable name="altova:nodeAllRows" select="altova:GetRowsFromTable($altova:nodeTable/table)" as="node()*"/>
			<xsl:if test="$altova:nodeAllRows">
				<xsl:variable name="altova:seqCellsInFirstRow" select="altova:GetCellsFromRow($altova:nodeAllRows[1])" as="node()*"/>
				<xsl:variable name="altova:nColumnsInTable" select="sum(for $nodeCell in $altova:seqCellsInFirstRow return altova:col-span($nodeCell))" as="xs:integer"/>
				<xsl:variable name="altova:seqActiveRowSpans" select="for $Cell in 1 to $altova:nColumnsInTable return 0" as="xs:integer*"/>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_Recursive($altova:nodeAllRows, 1, $altova:seqActiveRowSpans)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_Recursive">
					<xsl:with-param name="altova:nodeTableRows" select="$altova:nodeAllRows"/>
					<xsl:with-param name="altova:nRow" select="1"/>
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
				</xsl:call-template>
			</xsl:if>
		</altova:ColumnIndices>
	</xsl:function>
	<!--xsl:template name="altova:BuildTableIndexInfo_Recursive" as="node()*" xpath-default-namespace=""-->
	<xsl:template name="altova:BuildTableIndexInfo_Recursive" xpath-default-namespace="">
		<xsl:param name="altova:nodeTableRows" as="node()*"/>
		<xsl:param name="altova:nRow" as="xs:integer"/>
		<xsl:param name="altova:seqActiveRowSpans" as="xs:integer*"/>
		<xsl:variable name="altova:nodeRow" select="$altova:nodeTableRows[$altova:nRow]" as="node()?"/>
		<xsl:choose>
			<xsl:when test="empty($altova:nodeRow)">
				<xsl:sequence select="()"/>
			</xsl:when>
			<xsl:when test="empty(altova:GetCellFromRow($altova:nodeRow, 1))">
				<xsl:sequence select="()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:nodeCell1" select="altova:GetCellFromRow($altova:nodeRow, 1)" as="node()?"/>
				<xsl:variable name="altova:nColSpan" select="altova:col-span($altova:nodeCell1)" as="xs:integer"/>
				<altova:Row>
					<!--xsl:variable name="altova:seqColumnIndicesOfCurrentRow" select="altova:BuildTableIndexInfo_SingleRow_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, 1, 1, $altova:nColSpan, true(), 0, 0)" as="node()*"/>
						<xsl:sequence select="$altova:seqColumnIndicesOfCurrentRow"/-->
					<xsl:call-template name="altova:BuildTableIndexInfo_SingleRow_Recursive">
						<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
						<xsl:with-param name="altova:nodeRow" select="$altova:nodeRow"/>
						<xsl:with-param name="altova:nColumn" select="1"/>
						<xsl:with-param name="altova:nCellInCurrentRow" select="1"/>
						<xsl:with-param name="altova:nColSpanInCellRemaining" select="$altova:nColSpan"/>
						<xsl:with-param name="altova:bColSpanBegins" select="true()"/>
						<xsl:with-param name="altova:nCurrentSum" select="0"/>
						<xsl:with-param name="altova:nRowSpansToAdd" select="0"/>
					</xsl:call-template>
				</altova:Row>
				<xsl:variable name="altova:seqActiveRowSpans_New" select="altova:BuildTableIndexInfo_ActiveRowSpans_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, 1, 1, $altova:nColSpan)" as="xs:integer*"/>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_Recursive($altova:nodeTableRows, $altova:nRow + 1, $altova:seqActiveRowSpans_New)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_Recursive">
					<xsl:with-param name="altova:nodeTableRows" select="$altova:nodeTableRows"/>
					<xsl:with-param name="altova:nRow" select="$altova:nRow + 1"/>
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans_New"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!--xsl:template name="altova:BuildTableIndexInfo_SingleRow_Recursive" as="node()*" xpath-default-namespace=""-->
	<xsl:template name="altova:BuildTableIndexInfo_SingleRow_Recursive" xpath-default-namespace="">
		<xsl:param name="altova:seqActiveRowSpans" as="xs:integer*"/>
		<xsl:param name="altova:nodeRow" as="node()"/>
		<xsl:param name="altova:nColumn" as="xs:integer"/>
		<xsl:param name="altova:nCellInCurrentRow" as="xs:integer"/>
		<xsl:param name="altova:nColSpanInCellRemaining" as="xs:integer"/>
		<xsl:param name="altova:bColSpanBegins" as="xs:boolean"/>
		<!-- Also true if it's just a single cell -->
		<xsl:param name="altova:nCurrentSum" as="xs:integer"/>
		<xsl:param name="altova:nRowSpansToAdd" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:nColumn gt count($altova:seqActiveRowSpans)">
				<xsl:sequence select="()"/>
			</xsl:when>
			<!-- If the cell is not under a rowspan -->
			<xsl:when test="$altova:seqActiveRowSpans[$altova:nColumn] eq 0">
				<!-- If the cell is not under a colspan -->
				<xsl:if test="$altova:bColSpanBegins eq true()">
					<!-- A non-spanned cell starts in this column -->
					<altova:ColumnIndex>
						<xsl:sequence select="$altova:nCurrentSum + 1"/>
					</altova:ColumnIndex>
				</xsl:if>
				<xsl:variable name="altova:nCellInCurrentRow_New" select="if ($altova:nColSpanInCellRemaining gt 1) then $altova:nCellInCurrentRow else $altova:nCellInCurrentRow + 1" as="xs:integer"/>
				<xsl:variable name="altova:nColSpanInCell_New" select="if ($altova:nColSpanInCellRemaining gt 1) then $altova:nColSpanInCellRemaining - 1 else if (empty(altova:GetCellFromRow($altova:nodeRow, $altova:nCellInCurrentRow_New))) then 1 else altova:col-span(altova:GetCellFromRow($altova:nodeRow, $altova:nCellInCurrentRow_New))" as="xs:integer"/>
				<xsl:variable name="altova:bColSpanBegins_New" select="$altova:nCellInCurrentRow ne $altova:nCellInCurrentRow_New" as="xs:boolean"/>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_SingleRow_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, $altova:nColumn + 1, $altova:nCellInCurrentRow_New, $altova:nColSpanInCell_New, $altova:bColSpanBegins_New, $altova:nCurrentSum + 1, $altova:nRowSpansToAdd)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_SingleRow_Recursive">
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
					<xsl:with-param name="altova:nodeRow" select="$altova:nodeRow"/>
					<xsl:with-param name="altova:nColumn" select="$altova:nColumn + 1"/>
					<xsl:with-param name="altova:nCellInCurrentRow" select="$altova:nCellInCurrentRow_New"/>
					<xsl:with-param name="altova:nColSpanInCellRemaining" select="$altova:nColSpanInCell_New"/>
					<xsl:with-param name="altova:bColSpanBegins" select="$altova:bColSpanBegins_New"/>
					<xsl:with-param name="altova:nCurrentSum" select="$altova:nCurrentSum + 1"/>
					<xsl:with-param name="altova:nRowSpansToAdd" select="$altova:nRowSpansToAdd"/>
				</xsl:call-template>
			</xsl:when>
			<!-- The cell is under a rowspan -->
			<xsl:otherwise>
				<!--xsl:sequence select="altova:BuildTableIndexInfo_SingleRow_Recursive($altova:seqActiveRowSpans, $altova:nodeRow, $altova:nColumn + 1, $altova:nCellInCurrentRow, $altova:nColSpanInCellRemaining, $altova:bColSpanBegins, $altova:nCurrentSum + 1, $altova:nRowSpansToAdd + 1)"/-->
				<xsl:call-template name="altova:BuildTableIndexInfo_SingleRow_Recursive">
					<xsl:with-param name="altova:seqActiveRowSpans" select="$altova:seqActiveRowSpans"/>
					<xsl:with-param name="altova:nodeRow" select="$altova:nodeRow"/>
					<xsl:with-param name="altova:nColumn" select="$altova:nColumn + 1"/>
					<xsl:with-param name="altova:nCellInCurrentRow" select="$altova:nCellInCurrentRow"/>
					<xsl:with-param name="altova:nColSpanInCellRemaining" select="$altova:nColSpanInCellRemaining"/>
					<xsl:with-param name="altova:bColSpanBegins" select="$altova:bColSpanBegins"/>
					<xsl:with-param name="altova:nCurrentSum" select="$altova:nCurrentSum + 1"/>
					<xsl:with-param name="altova:nRowSpansToAdd" select="$altova:nRowSpansToAdd + 1"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:BuildTableIndexInfo_ActiveRowSpans_Recursive" as="xs:integer*" xpath-default-namespace="">
		<xsl:param name="altova:seqRowSpans" as="xs:integer*"/>
		<xsl:param name="altova:nodeCurrentRow" as="node()"/>
		<xsl:param name="altova:nColumn" as="xs:integer"/>
		<xsl:param name="altova:nCellInCurrentRow" as="xs:integer"/>
		<xsl:param name="altova:nColSpanInCellRemaining" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:nColumn gt count($altova:seqRowSpans)">
				<xsl:sequence select="()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:nRowSpanForCurrentColumn" select="altova:BuildTableIndexInfo_ActiveRowSpans_SingleColumn($altova:seqRowSpans, $altova:nodeCurrentRow, $altova:nColumn, $altova:nCellInCurrentRow)" as="xs:integer?"/>
				<xsl:sequence select="$altova:nRowSpanForCurrentColumn"/>
				<xsl:variable name="altova:nCellInCurrentRow_New" select="if ($altova:seqRowSpans[$altova:nColumn] eq 0 and $altova:nColSpanInCellRemaining eq 1) then $altova:nCellInCurrentRow + 1 else $altova:nCellInCurrentRow" as="xs:integer"/>
				<xsl:variable name="altova:nColSpanInCell_New" select="if ($altova:seqRowSpans[$altova:nColumn] eq 0 and $altova:nCellInCurrentRow eq $altova:nCellInCurrentRow_New) then $altova:nColSpanInCellRemaining - 1 else if (empty(altova:GetCellFromRow($altova:nodeCurrentRow, $altova:nCellInCurrentRow_New))) then 1 else altova:col-span(altova:GetCellFromRow($altova:nodeCurrentRow, $altova:nCellInCurrentRow_New))" as="xs:integer"/>
				<xsl:sequence select="altova:BuildTableIndexInfo_ActiveRowSpans_Recursive($altova:seqRowSpans, $altova:nodeCurrentRow, $altova:nColumn + 1, $altova:nCellInCurrentRow_New, $altova:nColSpanInCell_New)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:BuildTableIndexInfo_ActiveRowSpans_SingleColumn" as="xs:integer?" xpath-default-namespace="">
		<xsl:param name="altova:seqRowSpans" as="xs:integer*"/>
		<xsl:param name="altova:nodeCurrentRow" as="node()"/>
		<xsl:param name="altova:nColumn" as="xs:integer"/>
		<xsl:param name="altova:nCellInCurrentRow" as="xs:integer"/>
		<xsl:choose>
			<xsl:when test="$altova:seqRowSpans[$altova:nColumn] gt 0">
				<xsl:sequence select="$altova:seqRowSpans[$altova:nColumn] - 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:nodeCell" select="altova:GetCellFromRow($altova:nodeCurrentRow, $altova:nCellInCurrentRow)" as="node()"/>
				<xsl:sequence select="altova:GetRowspanFromCell($altova:nodeCell) - 1"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:reluri-to-content-id" as="xs:string">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$altova:bGeneratingMime and not(contains($input, '://') or starts-with($input, '/') or contains($input, ':/') or contains($input, ':\'))">
				<xsl:sequence select="string-join(('cid:', encode-for-uri($input), '@', $altova:execution-guid, '.Altova.StyleVision'), '')"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="$input"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
